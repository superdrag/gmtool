// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: common.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PBase {

  /// <summary>Holder for reflection information generated from common.proto</summary>
  public static partial class CommonReflection {

    #region Descriptor
    /// <summary>File descriptor for common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxjb21tb24ucHJvdG8SBVBCYXNlIiUKCFBCX01vbmV5EgwKBHR5cGUYASAB",
            "KAUSCwoDbnVtGAIgASgFIk0KB1BCX0l0ZW0SEAoIaXRlbUd1aWQYASABKAkS",
            "DgoGaXRlbUlkGAIgASgFEg8KB2l0ZW1Qb3MYAyABKAUSDwoHaXRlbU51bRgE",
            "IAEoBSIvCgtQQl9JdGVtTGlzdBIgCghpdGVtTGlzdBgBIAMoCzIOLlBCYXNl",
            "LlBCX0l0ZW0iOQoOUEJfVGFza0NvdW50ZXISCwoDY0lkGAEgASgFEgwKBGNB",
            "cmcYAiABKAUSDAoEY051bRgDIAEoBSJ9CgdQQl9UYXNrEg4KBnRhc2tJZBgB",
            "IAEoBRIRCgl0YXNrU3RhdGUYAiABKAUSEgoKYWNjZXB0VGltZRgDIAEoBRIS",
            "CgpzdWJtaXRUaW1lGAQgASgFEicKCGNvdW50ZXJzGAUgAygLMhUuUEJhc2Uu",
            "UEJfVGFza0NvdW50ZXIiUQoQUEJfRml2ZUF0dHJpYnV0ZRIMCgR0eXBlGAEg",
            "ASgFEg0KBXBvd2VyGAIgASgFEhAKCGFkZGl0aW9uGAMgASgFEg4KBnJlc2lz",
            "dBgEIAEoBSIvCgtQQl9UYXNrTGlzdBIgCgh0YXNrTGlzdBgBIAMoCzIOLlBC",
            "YXNlLlBCX1Rhc2siSAoKUEJfQ291bnRlchIRCgljb3VudGVySWQYASABKAUS",
            "EgoKY291bnRlck51bRgCIAEoBRITCgtjb3VudGVyQXJncxgDIAMoBSI4Cg5Q",
            "Ql9Db3VudGVyTGlzdBImCgtjb3VudGVyTGlzdBgBIAMoCzIRLlBCYXNlLlBC",
            "X0NvdW50ZXIinQIKC1BCX1VuaW9uT2JqEg8KB3VuaW9uSWQYASABKAUSEQoJ",
            "dW5pb25OYW1lGAIgASgJEhEKCXVuaW9uVHlwZRgDIAEoBRIPCgducGNMaXN0",
            "GAQgAygFEhEKCXNraWxsTGlzdBgFIAMoBRISCgp1bmlvbkxldmVsGAYgASgF",
            "EhAKCHVuaW9uRVhQGAcgASgDEhIKCnVuaW9uTW9uZXkYCCABKAMSEQoJbWF4",
            "TWVtYmVyGAkgASgFEhEKCW1heFZDaGFpchgKIAEoBRIQCghtYXhFbGRlchgL",
            "IAEoBRITCgt1bmlvbk5vdGljZRgMIAEoCRIXCg91bmlvbkNyZWF0ZVRpbWUY",
            "DSABKAUSEwoLY3JlYXRvck5hbWUYDiABKAkiqQEKDlBCX1VuaW9uTWVtYmVy",
            "EgwKBGRiaWQYASABKAUSEQoJdW5pb25EYmlkGAIgASgFEhEKCXBseWVyREJp",
            "ZBgDIAEoBRISCgptZW1iZXJOYW1lGAQgASgJEgwKBHJhbmsYBSABKAUSDQoF",
            "b2ZmZXIYBiABKAUSEAoIam9pblRpbWUYByABKAUSEAoIZXhpdFRpbWUYCCAB",
            "KAUSDgoGb25saW5lGAkgASgFIjoKEVBCX1VuaW9uQXBwbHlJbmZvEhIKCnBs",
            "YXllckRiaWQYASABKAUSEQoJYXBwbHlUaW1lGAIgASgFIi0KD1BCX1VuaW9u",
            "TG9nSW5mbxIMCgR0aW1lGAEgASgFEgwKBHRleHQYAiABKAkiwgEKDFBCX0Jh",
            "dHRsZU9iahINCgVvYmpJZBgBIAEoBRINCgVjZmdJZBgCIAEoBRIPCgdvYmpO",
            "YW1lGAMgASgJEgwKBHBvc3gYBCABKAUSDAoEcG9zeRgFIAEoBRI1CglmaWdo",
            "dEF0cnIYCSADKAsyIi5QQmFzZS5QQl9CYXR0bGVPYmouRmlnaHRBdHJyRW50",
            "cnkaMAoORmlnaHRBdHJyRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIg",
            "ASgDOgI4ASJXCg1QQl9CYXR0bGVUdXJuEg0KBW1hcElkGAEgASgFEhEKCXR1",
            "cm5JbmRleBgCIAEoBRIkCgducGNMaXN0GAMgAygLMhMuUEJhc2UuUEJfQmF0",
            "dGxlT2JqYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PBase.PB_Money), global::PBase.PB_Money.Parser, new[]{ "Type", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBase.PB_Item), global::PBase.PB_Item.Parser, new[]{ "ItemGuid", "ItemId", "ItemPos", "ItemNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBase.PB_ItemList), global::PBase.PB_ItemList.Parser, new[]{ "ItemList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBase.PB_TaskCounter), global::PBase.PB_TaskCounter.Parser, new[]{ "CId", "CArg", "CNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBase.PB_Task), global::PBase.PB_Task.Parser, new[]{ "TaskId", "TaskState", "AcceptTime", "SubmitTime", "Counters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBase.PB_FiveAttribute), global::PBase.PB_FiveAttribute.Parser, new[]{ "Type", "Power", "Addition", "Resist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBase.PB_TaskList), global::PBase.PB_TaskList.Parser, new[]{ "TaskList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBase.PB_Counter), global::PBase.PB_Counter.Parser, new[]{ "CounterId", "CounterNum", "CounterArgs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBase.PB_CounterList), global::PBase.PB_CounterList.Parser, new[]{ "CounterList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBase.PB_UnionObj), global::PBase.PB_UnionObj.Parser, new[]{ "UnionId", "UnionName", "UnionType", "NpcList", "SkillList", "UnionLevel", "UnionEXP", "UnionMoney", "MaxMember", "MaxVChair", "MaxElder", "UnionNotice", "UnionCreateTime", "CreatorName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBase.PB_UnionMember), global::PBase.PB_UnionMember.Parser, new[]{ "Dbid", "UnionDbid", "PlyerDBid", "MemberName", "Rank", "Offer", "JoinTime", "ExitTime", "Online" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBase.PB_UnionApplyInfo), global::PBase.PB_UnionApplyInfo.Parser, new[]{ "PlayerDbid", "ApplyTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBase.PB_UnionLogInfo), global::PBase.PB_UnionLogInfo.Parser, new[]{ "Time", "Text" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBase.PB_BattleObj), global::PBase.PB_BattleObj.Parser, new[]{ "ObjId", "CfgId", "ObjName", "Posx", "Posy", "FightAtrr" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::PBase.PB_BattleTurn), global::PBase.PB_BattleTurn.Parser, new[]{ "MapId", "TurnIndex", "NpcList" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PB_Money : pb::IMessage<PB_Money> {
    private static readonly pb::MessageParser<PB_Money> _parser = new pb::MessageParser<PB_Money>(() => new PB_Money());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_Money> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBase.CommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_Money() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_Money(PB_Money other) : this() {
      type_ = other.type_;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_Money Clone() {
      return new PB_Money(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///货币的类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    /// <summary>
    ///货币数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_Money);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_Money other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_Money other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///物品
  /// </summary>
  public sealed partial class PB_Item : pb::IMessage<PB_Item> {
    private static readonly pb::MessageParser<PB_Item> _parser = new pb::MessageParser<PB_Item>(() => new PB_Item());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_Item> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBase.CommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_Item() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_Item(PB_Item other) : this() {
      itemGuid_ = other.itemGuid_;
      itemId_ = other.itemId_;
      itemPos_ = other.itemPos_;
      itemNum_ = other.itemNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_Item Clone() {
      return new PB_Item(this);
    }

    /// <summary>Field number for the "itemGuid" field.</summary>
    public const int ItemGuidFieldNumber = 1;
    private string itemGuid_ = "";
    /// <summary>
    ///唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemGuid {
      get { return itemGuid_; }
      set {
        itemGuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "itemId" field.</summary>
    public const int ItemIdFieldNumber = 2;
    private int itemId_;
    /// <summary>
    ///配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "itemPos" field.</summary>
    public const int ItemPosFieldNumber = 3;
    private int itemPos_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemPos {
      get { return itemPos_; }
      set {
        itemPos_ = value;
      }
    }

    /// <summary>Field number for the "itemNum" field.</summary>
    public const int ItemNumFieldNumber = 4;
    private int itemNum_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemNum {
      get { return itemNum_; }
      set {
        itemNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_Item);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_Item other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemGuid != other.ItemGuid) return false;
      if (ItemId != other.ItemId) return false;
      if (ItemPos != other.ItemPos) return false;
      if (ItemNum != other.ItemNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemGuid.Length != 0) hash ^= ItemGuid.GetHashCode();
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (ItemPos != 0) hash ^= ItemPos.GetHashCode();
      if (ItemNum != 0) hash ^= ItemNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemGuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ItemGuid);
      }
      if (ItemId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ItemId);
      }
      if (ItemPos != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ItemPos);
      }
      if (ItemNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ItemNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemGuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemGuid);
      }
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      if (ItemPos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemPos);
      }
      if (ItemNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_Item other) {
      if (other == null) {
        return;
      }
      if (other.ItemGuid.Length != 0) {
        ItemGuid = other.ItemGuid;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.ItemPos != 0) {
        ItemPos = other.ItemPos;
      }
      if (other.ItemNum != 0) {
        ItemNum = other.ItemNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ItemGuid = input.ReadString();
            break;
          }
          case 16: {
            ItemId = input.ReadInt32();
            break;
          }
          case 24: {
            ItemPos = input.ReadInt32();
            break;
          }
          case 32: {
            ItemNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PB_ItemList : pb::IMessage<PB_ItemList> {
    private static readonly pb::MessageParser<PB_ItemList> _parser = new pb::MessageParser<PB_ItemList>(() => new PB_ItemList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_ItemList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBase.CommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_ItemList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_ItemList(PB_ItemList other) : this() {
      itemList_ = other.itemList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_ItemList Clone() {
      return new PB_ItemList(this);
    }

    /// <summary>Field number for the "itemList" field.</summary>
    public const int ItemListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PBase.PB_Item> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(10, global::PBase.PB_Item.Parser);
    private readonly pbc::RepeatedField<global::PBase.PB_Item> itemList_ = new pbc::RepeatedField<global::PBase.PB_Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PBase.PB_Item> ItemList {
      get { return itemList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_ItemList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_ItemList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!itemList_.Equals(other.itemList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= itemList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      itemList_.WriteTo(output, _repeated_itemList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_ItemList other) {
      if (other == null) {
        return;
      }
      itemList_.Add(other.itemList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///任务计数器
  /// </summary>
  public sealed partial class PB_TaskCounter : pb::IMessage<PB_TaskCounter> {
    private static readonly pb::MessageParser<PB_TaskCounter> _parser = new pb::MessageParser<PB_TaskCounter>(() => new PB_TaskCounter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_TaskCounter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBase.CommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_TaskCounter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_TaskCounter(PB_TaskCounter other) : this() {
      cId_ = other.cId_;
      cArg_ = other.cArg_;
      cNum_ = other.cNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_TaskCounter Clone() {
      return new PB_TaskCounter(this);
    }

    /// <summary>Field number for the "cId" field.</summary>
    public const int CIdFieldNumber = 1;
    private int cId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CId {
      get { return cId_; }
      set {
        cId_ = value;
      }
    }

    /// <summary>Field number for the "cArg" field.</summary>
    public const int CArgFieldNumber = 2;
    private int cArg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CArg {
      get { return cArg_; }
      set {
        cArg_ = value;
      }
    }

    /// <summary>Field number for the "cNum" field.</summary>
    public const int CNumFieldNumber = 3;
    private int cNum_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CNum {
      get { return cNum_; }
      set {
        cNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_TaskCounter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_TaskCounter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CId != other.CId) return false;
      if (CArg != other.CArg) return false;
      if (CNum != other.CNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CId != 0) hash ^= CId.GetHashCode();
      if (CArg != 0) hash ^= CArg.GetHashCode();
      if (CNum != 0) hash ^= CNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CId);
      }
      if (CArg != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CArg);
      }
      if (CNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CId);
      }
      if (CArg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CArg);
      }
      if (CNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_TaskCounter other) {
      if (other == null) {
        return;
      }
      if (other.CId != 0) {
        CId = other.CId;
      }
      if (other.CArg != 0) {
        CArg = other.CArg;
      }
      if (other.CNum != 0) {
        CNum = other.CNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CId = input.ReadInt32();
            break;
          }
          case 16: {
            CArg = input.ReadInt32();
            break;
          }
          case 24: {
            CNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///任务
  /// </summary>
  public sealed partial class PB_Task : pb::IMessage<PB_Task> {
    private static readonly pb::MessageParser<PB_Task> _parser = new pb::MessageParser<PB_Task>(() => new PB_Task());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_Task> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBase.CommonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_Task() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_Task(PB_Task other) : this() {
      taskId_ = other.taskId_;
      taskState_ = other.taskState_;
      acceptTime_ = other.acceptTime_;
      submitTime_ = other.submitTime_;
      counters_ = other.counters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_Task Clone() {
      return new PB_Task(this);
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    /// <summary>
    ///配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "taskState" field.</summary>
    public const int TaskStateFieldNumber = 2;
    private int taskState_;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskState {
      get { return taskState_; }
      set {
        taskState_ = value;
      }
    }

    /// <summary>Field number for the "acceptTime" field.</summary>
    public const int AcceptTimeFieldNumber = 3;
    private int acceptTime_;
    /// <summary>
    ///接受时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AcceptTime {
      get { return acceptTime_; }
      set {
        acceptTime_ = value;
      }
    }

    /// <summary>Field number for the "submitTime" field.</summary>
    public const int SubmitTimeFieldNumber = 4;
    private int submitTime_;
    /// <summary>
    ///完成时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubmitTime {
      get { return submitTime_; }
      set {
        submitTime_ = value;
      }
    }

    /// <summary>Field number for the "counters" field.</summary>
    public const int CountersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::PBase.PB_TaskCounter> _repeated_counters_codec
        = pb::FieldCodec.ForMessage(42, global::PBase.PB_TaskCounter.Parser);
    private readonly pbc::RepeatedField<global::PBase.PB_TaskCounter> counters_ = new pbc::RepeatedField<global::PBase.PB_TaskCounter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PBase.PB_TaskCounter> Counters {
      get { return counters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_Task);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_Task other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (TaskState != other.TaskState) return false;
      if (AcceptTime != other.AcceptTime) return false;
      if (SubmitTime != other.SubmitTime) return false;
      if(!counters_.Equals(other.counters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId != 0) hash ^= TaskId.GetHashCode();
      if (TaskState != 0) hash ^= TaskState.GetHashCode();
      if (AcceptTime != 0) hash ^= AcceptTime.GetHashCode();
      if (SubmitTime != 0) hash ^= SubmitTime.GetHashCode();
      hash ^= counters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
      if (TaskState != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TaskState);
      }
      if (AcceptTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AcceptTime);
      }
      if (SubmitTime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SubmitTime);
      }
      counters_.WriteTo(output, _repeated_counters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      if (TaskState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskState);
      }
      if (AcceptTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AcceptTime);
      }
      if (SubmitTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubmitTime);
      }
      size += counters_.CalculateSize(_repeated_counters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_Task other) {
      if (other == null) {
        return;
      }
      if (other.TaskId != 0) {
        TaskId = other.TaskId;
      }
      if (other.TaskState != 0) {
        TaskState = other.TaskState;
      }
      if (other.AcceptTime != 0) {
        AcceptTime = other.AcceptTime;
      }
      if (other.SubmitTime != 0) {
        SubmitTime = other.SubmitTime;
      }
      counters_.Add(other.counters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
          case 16: {
            TaskState = input.ReadInt32();
            break;
          }
          case 24: {
            AcceptTime = input.ReadInt32();
            break;
          }
          case 32: {
            SubmitTime = input.ReadInt32();
            break;
          }
          case 42: {
            counters_.AddEntriesFrom(input, _repeated_counters_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///五行属性
  /// </summary>
  public sealed partial class PB_FiveAttribute : pb::IMessage<PB_FiveAttribute> {
    private static readonly pb::MessageParser<PB_FiveAttribute> _parser = new pb::MessageParser<PB_FiveAttribute>(() => new PB_FiveAttribute());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_FiveAttribute> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBase.CommonReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_FiveAttribute() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_FiveAttribute(PB_FiveAttribute other) : this() {
      type_ = other.type_;
      power_ = other.power_;
      addition_ = other.addition_;
      resist_ = other.resist_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_FiveAttribute Clone() {
      return new PB_FiveAttribute(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///属性类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 2;
    private int power_;
    /// <summary>
    ///属性攻击值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "addition" field.</summary>
    public const int AdditionFieldNumber = 3;
    private int addition_;
    /// <summary>
    ///属性攻击加成值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Addition {
      get { return addition_; }
      set {
        addition_ = value;
      }
    }

    /// <summary>Field number for the "resist" field.</summary>
    public const int ResistFieldNumber = 4;
    private int resist_;
    /// <summary>
    ///属性抵抗值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Resist {
      get { return resist_; }
      set {
        resist_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_FiveAttribute);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_FiveAttribute other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Power != other.Power) return false;
      if (Addition != other.Addition) return false;
      if (Resist != other.Resist) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (Addition != 0) hash ^= Addition.GetHashCode();
      if (Resist != 0) hash ^= Resist.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Power != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Power);
      }
      if (Addition != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Addition);
      }
      if (Resist != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Resist);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (Addition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Addition);
      }
      if (Resist != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Resist);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_FiveAttribute other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.Addition != 0) {
        Addition = other.Addition;
      }
      if (other.Resist != 0) {
        Resist = other.Resist;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Power = input.ReadInt32();
            break;
          }
          case 24: {
            Addition = input.ReadInt32();
            break;
          }
          case 32: {
            Resist = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PB_TaskList : pb::IMessage<PB_TaskList> {
    private static readonly pb::MessageParser<PB_TaskList> _parser = new pb::MessageParser<PB_TaskList>(() => new PB_TaskList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_TaskList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBase.CommonReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_TaskList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_TaskList(PB_TaskList other) : this() {
      taskList_ = other.taskList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_TaskList Clone() {
      return new PB_TaskList(this);
    }

    /// <summary>Field number for the "taskList" field.</summary>
    public const int TaskListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PBase.PB_Task> _repeated_taskList_codec
        = pb::FieldCodec.ForMessage(10, global::PBase.PB_Task.Parser);
    private readonly pbc::RepeatedField<global::PBase.PB_Task> taskList_ = new pbc::RepeatedField<global::PBase.PB_Task>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PBase.PB_Task> TaskList {
      get { return taskList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_TaskList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_TaskList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!taskList_.Equals(other.taskList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= taskList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      taskList_.WriteTo(output, _repeated_taskList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += taskList_.CalculateSize(_repeated_taskList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_TaskList other) {
      if (other == null) {
        return;
      }
      taskList_.Add(other.taskList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            taskList_.AddEntriesFrom(input, _repeated_taskList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///普通计数器
  /// </summary>
  public sealed partial class PB_Counter : pb::IMessage<PB_Counter> {
    private static readonly pb::MessageParser<PB_Counter> _parser = new pb::MessageParser<PB_Counter>(() => new PB_Counter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_Counter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBase.CommonReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_Counter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_Counter(PB_Counter other) : this() {
      counterId_ = other.counterId_;
      counterNum_ = other.counterNum_;
      counterArgs_ = other.counterArgs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_Counter Clone() {
      return new PB_Counter(this);
    }

    /// <summary>Field number for the "counterId" field.</summary>
    public const int CounterIdFieldNumber = 1;
    private int counterId_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CounterId {
      get { return counterId_; }
      set {
        counterId_ = value;
      }
    }

    /// <summary>Field number for the "counterNum" field.</summary>
    public const int CounterNumFieldNumber = 2;
    private int counterNum_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CounterNum {
      get { return counterNum_; }
      set {
        counterNum_ = value;
      }
    }

    /// <summary>Field number for the "counterArgs" field.</summary>
    public const int CounterArgsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_counterArgs_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> counterArgs_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CounterArgs {
      get { return counterArgs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_Counter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_Counter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CounterId != other.CounterId) return false;
      if (CounterNum != other.CounterNum) return false;
      if(!counterArgs_.Equals(other.counterArgs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CounterId != 0) hash ^= CounterId.GetHashCode();
      if (CounterNum != 0) hash ^= CounterNum.GetHashCode();
      hash ^= counterArgs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CounterId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CounterId);
      }
      if (CounterNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CounterNum);
      }
      counterArgs_.WriteTo(output, _repeated_counterArgs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CounterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CounterId);
      }
      if (CounterNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CounterNum);
      }
      size += counterArgs_.CalculateSize(_repeated_counterArgs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_Counter other) {
      if (other == null) {
        return;
      }
      if (other.CounterId != 0) {
        CounterId = other.CounterId;
      }
      if (other.CounterNum != 0) {
        CounterNum = other.CounterNum;
      }
      counterArgs_.Add(other.counterArgs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CounterId = input.ReadInt32();
            break;
          }
          case 16: {
            CounterNum = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            counterArgs_.AddEntriesFrom(input, _repeated_counterArgs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PB_CounterList : pb::IMessage<PB_CounterList> {
    private static readonly pb::MessageParser<PB_CounterList> _parser = new pb::MessageParser<PB_CounterList>(() => new PB_CounterList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_CounterList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBase.CommonReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_CounterList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_CounterList(PB_CounterList other) : this() {
      counterList_ = other.counterList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_CounterList Clone() {
      return new PB_CounterList(this);
    }

    /// <summary>Field number for the "counterList" field.</summary>
    public const int CounterListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PBase.PB_Counter> _repeated_counterList_codec
        = pb::FieldCodec.ForMessage(10, global::PBase.PB_Counter.Parser);
    private readonly pbc::RepeatedField<global::PBase.PB_Counter> counterList_ = new pbc::RepeatedField<global::PBase.PB_Counter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PBase.PB_Counter> CounterList {
      get { return counterList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_CounterList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_CounterList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!counterList_.Equals(other.counterList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= counterList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      counterList_.WriteTo(output, _repeated_counterList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += counterList_.CalculateSize(_repeated_counterList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_CounterList other) {
      if (other == null) {
        return;
      }
      counterList_.Add(other.counterList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            counterList_.AddEntriesFrom(input, _repeated_counterList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///工会数据
  /// </summary>
  public sealed partial class PB_UnionObj : pb::IMessage<PB_UnionObj> {
    private static readonly pb::MessageParser<PB_UnionObj> _parser = new pb::MessageParser<PB_UnionObj>(() => new PB_UnionObj());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_UnionObj> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBase.CommonReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_UnionObj() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_UnionObj(PB_UnionObj other) : this() {
      unionId_ = other.unionId_;
      unionName_ = other.unionName_;
      unionType_ = other.unionType_;
      npcList_ = other.npcList_.Clone();
      skillList_ = other.skillList_.Clone();
      unionLevel_ = other.unionLevel_;
      unionEXP_ = other.unionEXP_;
      unionMoney_ = other.unionMoney_;
      maxMember_ = other.maxMember_;
      maxVChair_ = other.maxVChair_;
      maxElder_ = other.maxElder_;
      unionNotice_ = other.unionNotice_;
      unionCreateTime_ = other.unionCreateTime_;
      creatorName_ = other.creatorName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_UnionObj Clone() {
      return new PB_UnionObj(this);
    }

    /// <summary>Field number for the "unionId" field.</summary>
    public const int UnionIdFieldNumber = 1;
    private int unionId_;
    /// <summary>
    ///宗门配置id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnionId {
      get { return unionId_; }
      set {
        unionId_ = value;
      }
    }

    /// <summary>Field number for the "unionName" field.</summary>
    public const int UnionNameFieldNumber = 2;
    private string unionName_ = "";
    /// <summary>
    ///工会名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnionName {
      get { return unionName_; }
      set {
        unionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unionType" field.</summary>
    public const int UnionTypeFieldNumber = 3;
    private int unionType_;
    /// <summary>
    ///工会类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnionType {
      get { return unionType_; }
      set {
        unionType_ = value;
      }
    }

    /// <summary>Field number for the "npcList" field.</summary>
    public const int NpcListFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_npcList_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> npcList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///npc列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> NpcList {
      get { return npcList_; }
    }

    /// <summary>Field number for the "skillList" field.</summary>
    public const int SkillListFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_skillList_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> skillList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///技能列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SkillList {
      get { return skillList_; }
    }

    /// <summary>Field number for the "unionLevel" field.</summary>
    public const int UnionLevelFieldNumber = 6;
    private int unionLevel_;
    /// <summary>
    ///工会等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnionLevel {
      get { return unionLevel_; }
      set {
        unionLevel_ = value;
      }
    }

    /// <summary>Field number for the "unionEXP" field.</summary>
    public const int UnionEXPFieldNumber = 7;
    private long unionEXP_;
    /// <summary>
    ///工会经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnionEXP {
      get { return unionEXP_; }
      set {
        unionEXP_ = value;
      }
    }

    /// <summary>Field number for the "unionMoney" field.</summary>
    public const int UnionMoneyFieldNumber = 8;
    private long unionMoney_;
    /// <summary>
    ///工会资金
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnionMoney {
      get { return unionMoney_; }
      set {
        unionMoney_ = value;
      }
    }

    /// <summary>Field number for the "maxMember" field.</summary>
    public const int MaxMemberFieldNumber = 9;
    private int maxMember_;
    /// <summary>
    ///工会人数上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxMember {
      get { return maxMember_; }
      set {
        maxMember_ = value;
      }
    }

    /// <summary>Field number for the "maxVChair" field.</summary>
    public const int MaxVChairFieldNumber = 10;
    private int maxVChair_;
    /// <summary>
    ///副会长数量上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxVChair {
      get { return maxVChair_; }
      set {
        maxVChair_ = value;
      }
    }

    /// <summary>Field number for the "maxElder" field.</summary>
    public const int MaxElderFieldNumber = 11;
    private int maxElder_;
    /// <summary>
    ///长老数量上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxElder {
      get { return maxElder_; }
      set {
        maxElder_ = value;
      }
    }

    /// <summary>Field number for the "unionNotice" field.</summary>
    public const int UnionNoticeFieldNumber = 12;
    private string unionNotice_ = "";
    /// <summary>
    ///工会公告
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UnionNotice {
      get { return unionNotice_; }
      set {
        unionNotice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unionCreateTime" field.</summary>
    public const int UnionCreateTimeFieldNumber = 13;
    private int unionCreateTime_;
    /// <summary>
    ///工会创建时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnionCreateTime {
      get { return unionCreateTime_; }
      set {
        unionCreateTime_ = value;
      }
    }

    /// <summary>Field number for the "creatorName" field.</summary>
    public const int CreatorNameFieldNumber = 14;
    private string creatorName_ = "";
    /// <summary>
    ///帮主的名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreatorName {
      get { return creatorName_; }
      set {
        creatorName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_UnionObj);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_UnionObj other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnionId != other.UnionId) return false;
      if (UnionName != other.UnionName) return false;
      if (UnionType != other.UnionType) return false;
      if(!npcList_.Equals(other.npcList_)) return false;
      if(!skillList_.Equals(other.skillList_)) return false;
      if (UnionLevel != other.UnionLevel) return false;
      if (UnionEXP != other.UnionEXP) return false;
      if (UnionMoney != other.UnionMoney) return false;
      if (MaxMember != other.MaxMember) return false;
      if (MaxVChair != other.MaxVChair) return false;
      if (MaxElder != other.MaxElder) return false;
      if (UnionNotice != other.UnionNotice) return false;
      if (UnionCreateTime != other.UnionCreateTime) return false;
      if (CreatorName != other.CreatorName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnionId != 0) hash ^= UnionId.GetHashCode();
      if (UnionName.Length != 0) hash ^= UnionName.GetHashCode();
      if (UnionType != 0) hash ^= UnionType.GetHashCode();
      hash ^= npcList_.GetHashCode();
      hash ^= skillList_.GetHashCode();
      if (UnionLevel != 0) hash ^= UnionLevel.GetHashCode();
      if (UnionEXP != 0L) hash ^= UnionEXP.GetHashCode();
      if (UnionMoney != 0L) hash ^= UnionMoney.GetHashCode();
      if (MaxMember != 0) hash ^= MaxMember.GetHashCode();
      if (MaxVChair != 0) hash ^= MaxVChair.GetHashCode();
      if (MaxElder != 0) hash ^= MaxElder.GetHashCode();
      if (UnionNotice.Length != 0) hash ^= UnionNotice.GetHashCode();
      if (UnionCreateTime != 0) hash ^= UnionCreateTime.GetHashCode();
      if (CreatorName.Length != 0) hash ^= CreatorName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UnionId);
      }
      if (UnionName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UnionName);
      }
      if (UnionType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UnionType);
      }
      npcList_.WriteTo(output, _repeated_npcList_codec);
      skillList_.WriteTo(output, _repeated_skillList_codec);
      if (UnionLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(UnionLevel);
      }
      if (UnionEXP != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(UnionEXP);
      }
      if (UnionMoney != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(UnionMoney);
      }
      if (MaxMember != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MaxMember);
      }
      if (MaxVChair != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaxVChair);
      }
      if (MaxElder != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MaxElder);
      }
      if (UnionNotice.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(UnionNotice);
      }
      if (UnionCreateTime != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(UnionCreateTime);
      }
      if (CreatorName.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(CreatorName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnionId);
      }
      if (UnionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnionName);
      }
      if (UnionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnionType);
      }
      size += npcList_.CalculateSize(_repeated_npcList_codec);
      size += skillList_.CalculateSize(_repeated_skillList_codec);
      if (UnionLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnionLevel);
      }
      if (UnionEXP != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnionEXP);
      }
      if (UnionMoney != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnionMoney);
      }
      if (MaxMember != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMember);
      }
      if (MaxVChair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxVChair);
      }
      if (MaxElder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxElder);
      }
      if (UnionNotice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnionNotice);
      }
      if (UnionCreateTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnionCreateTime);
      }
      if (CreatorName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreatorName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_UnionObj other) {
      if (other == null) {
        return;
      }
      if (other.UnionId != 0) {
        UnionId = other.UnionId;
      }
      if (other.UnionName.Length != 0) {
        UnionName = other.UnionName;
      }
      if (other.UnionType != 0) {
        UnionType = other.UnionType;
      }
      npcList_.Add(other.npcList_);
      skillList_.Add(other.skillList_);
      if (other.UnionLevel != 0) {
        UnionLevel = other.UnionLevel;
      }
      if (other.UnionEXP != 0L) {
        UnionEXP = other.UnionEXP;
      }
      if (other.UnionMoney != 0L) {
        UnionMoney = other.UnionMoney;
      }
      if (other.MaxMember != 0) {
        MaxMember = other.MaxMember;
      }
      if (other.MaxVChair != 0) {
        MaxVChair = other.MaxVChair;
      }
      if (other.MaxElder != 0) {
        MaxElder = other.MaxElder;
      }
      if (other.UnionNotice.Length != 0) {
        UnionNotice = other.UnionNotice;
      }
      if (other.UnionCreateTime != 0) {
        UnionCreateTime = other.UnionCreateTime;
      }
      if (other.CreatorName.Length != 0) {
        CreatorName = other.CreatorName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnionId = input.ReadInt32();
            break;
          }
          case 18: {
            UnionName = input.ReadString();
            break;
          }
          case 24: {
            UnionType = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            npcList_.AddEntriesFrom(input, _repeated_npcList_codec);
            break;
          }
          case 42:
          case 40: {
            skillList_.AddEntriesFrom(input, _repeated_skillList_codec);
            break;
          }
          case 48: {
            UnionLevel = input.ReadInt32();
            break;
          }
          case 56: {
            UnionEXP = input.ReadInt64();
            break;
          }
          case 64: {
            UnionMoney = input.ReadInt64();
            break;
          }
          case 72: {
            MaxMember = input.ReadInt32();
            break;
          }
          case 80: {
            MaxVChair = input.ReadInt32();
            break;
          }
          case 88: {
            MaxElder = input.ReadInt32();
            break;
          }
          case 98: {
            UnionNotice = input.ReadString();
            break;
          }
          case 104: {
            UnionCreateTime = input.ReadInt32();
            break;
          }
          case 114: {
            CreatorName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///工会成员数据
  /// </summary>
  public sealed partial class PB_UnionMember : pb::IMessage<PB_UnionMember> {
    private static readonly pb::MessageParser<PB_UnionMember> _parser = new pb::MessageParser<PB_UnionMember>(() => new PB_UnionMember());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_UnionMember> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBase.CommonReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_UnionMember() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_UnionMember(PB_UnionMember other) : this() {
      dbid_ = other.dbid_;
      unionDbid_ = other.unionDbid_;
      plyerDBid_ = other.plyerDBid_;
      memberName_ = other.memberName_;
      rank_ = other.rank_;
      offer_ = other.offer_;
      joinTime_ = other.joinTime_;
      exitTime_ = other.exitTime_;
      online_ = other.online_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_UnionMember Clone() {
      return new PB_UnionMember(this);
    }

    /// <summary>Field number for the "dbid" field.</summary>
    public const int DbidFieldNumber = 1;
    private int dbid_;
    /// <summary>
    ///  db数据id       
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dbid {
      get { return dbid_; }
      set {
        dbid_ = value;
      }
    }

    /// <summary>Field number for the "unionDbid" field.</summary>
    public const int UnionDbidFieldNumber = 2;
    private int unionDbid_;
    /// <summary>
    ///  公会唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UnionDbid {
      get { return unionDbid_; }
      set {
        unionDbid_ = value;
      }
    }

    /// <summary>Field number for the "plyerDBid" field.</summary>
    public const int PlyerDBidFieldNumber = 3;
    private int plyerDBid_;
    /// <summary>
    ///  玩家唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlyerDBid {
      get { return plyerDBid_; }
      set {
        plyerDBid_ = value;
      }
    }

    /// <summary>Field number for the "memberName" field.</summary>
    public const int MemberNameFieldNumber = 4;
    private string memberName_ = "";
    /// <summary>
    ///  玩家名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MemberName {
      get { return memberName_; }
      set {
        memberName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 5;
    private int rank_;
    /// <summary>
    /// 职位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "offer" field.</summary>
    public const int OfferFieldNumber = 6;
    private int offer_;
    /// <summary>
    /// 贡献  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Offer {
      get { return offer_; }
      set {
        offer_ = value;
      }
    }

    /// <summary>Field number for the "joinTime" field.</summary>
    public const int JoinTimeFieldNumber = 7;
    private int joinTime_;
    /// <summary>
    ///  加入时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int JoinTime {
      get { return joinTime_; }
      set {
        joinTime_ = value;
      }
    }

    /// <summary>Field number for the "exitTime" field.</summary>
    public const int ExitTimeFieldNumber = 8;
    private int exitTime_;
    /// <summary>
    ///  退出时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExitTime {
      get { return exitTime_; }
      set {
        exitTime_ = value;
      }
    }

    /// <summary>Field number for the "online" field.</summary>
    public const int OnlineFieldNumber = 9;
    private int online_;
    /// <summary>
    ///  在线
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Online {
      get { return online_; }
      set {
        online_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_UnionMember);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_UnionMember other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dbid != other.Dbid) return false;
      if (UnionDbid != other.UnionDbid) return false;
      if (PlyerDBid != other.PlyerDBid) return false;
      if (MemberName != other.MemberName) return false;
      if (Rank != other.Rank) return false;
      if (Offer != other.Offer) return false;
      if (JoinTime != other.JoinTime) return false;
      if (ExitTime != other.ExitTime) return false;
      if (Online != other.Online) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Dbid != 0) hash ^= Dbid.GetHashCode();
      if (UnionDbid != 0) hash ^= UnionDbid.GetHashCode();
      if (PlyerDBid != 0) hash ^= PlyerDBid.GetHashCode();
      if (MemberName.Length != 0) hash ^= MemberName.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (Offer != 0) hash ^= Offer.GetHashCode();
      if (JoinTime != 0) hash ^= JoinTime.GetHashCode();
      if (ExitTime != 0) hash ^= ExitTime.GetHashCode();
      if (Online != 0) hash ^= Online.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Dbid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Dbid);
      }
      if (UnionDbid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UnionDbid);
      }
      if (PlyerDBid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlyerDBid);
      }
      if (MemberName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MemberName);
      }
      if (Rank != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Rank);
      }
      if (Offer != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Offer);
      }
      if (JoinTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(JoinTime);
      }
      if (ExitTime != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ExitTime);
      }
      if (Online != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Online);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Dbid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dbid);
      }
      if (UnionDbid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnionDbid);
      }
      if (PlyerDBid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlyerDBid);
      }
      if (MemberName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MemberName);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (Offer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offer);
      }
      if (JoinTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JoinTime);
      }
      if (ExitTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExitTime);
      }
      if (Online != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Online);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_UnionMember other) {
      if (other == null) {
        return;
      }
      if (other.Dbid != 0) {
        Dbid = other.Dbid;
      }
      if (other.UnionDbid != 0) {
        UnionDbid = other.UnionDbid;
      }
      if (other.PlyerDBid != 0) {
        PlyerDBid = other.PlyerDBid;
      }
      if (other.MemberName.Length != 0) {
        MemberName = other.MemberName;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.Offer != 0) {
        Offer = other.Offer;
      }
      if (other.JoinTime != 0) {
        JoinTime = other.JoinTime;
      }
      if (other.ExitTime != 0) {
        ExitTime = other.ExitTime;
      }
      if (other.Online != 0) {
        Online = other.Online;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Dbid = input.ReadInt32();
            break;
          }
          case 16: {
            UnionDbid = input.ReadInt32();
            break;
          }
          case 24: {
            PlyerDBid = input.ReadInt32();
            break;
          }
          case 34: {
            MemberName = input.ReadString();
            break;
          }
          case 40: {
            Rank = input.ReadInt32();
            break;
          }
          case 48: {
            Offer = input.ReadInt32();
            break;
          }
          case 56: {
            JoinTime = input.ReadInt32();
            break;
          }
          case 64: {
            ExitTime = input.ReadInt32();
            break;
          }
          case 72: {
            Online = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///工会申请列表数据
  /// </summary>
  public sealed partial class PB_UnionApplyInfo : pb::IMessage<PB_UnionApplyInfo> {
    private static readonly pb::MessageParser<PB_UnionApplyInfo> _parser = new pb::MessageParser<PB_UnionApplyInfo>(() => new PB_UnionApplyInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_UnionApplyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBase.CommonReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_UnionApplyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_UnionApplyInfo(PB_UnionApplyInfo other) : this() {
      playerDbid_ = other.playerDbid_;
      applyTime_ = other.applyTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_UnionApplyInfo Clone() {
      return new PB_UnionApplyInfo(this);
    }

    /// <summary>Field number for the "playerDbid" field.</summary>
    public const int PlayerDbidFieldNumber = 1;
    private int playerDbid_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerDbid {
      get { return playerDbid_; }
      set {
        playerDbid_ = value;
      }
    }

    /// <summary>Field number for the "applyTime" field.</summary>
    public const int ApplyTimeFieldNumber = 2;
    private int applyTime_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ApplyTime {
      get { return applyTime_; }
      set {
        applyTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_UnionApplyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_UnionApplyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerDbid != other.PlayerDbid) return false;
      if (ApplyTime != other.ApplyTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerDbid != 0) hash ^= PlayerDbid.GetHashCode();
      if (ApplyTime != 0) hash ^= ApplyTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerDbid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerDbid);
      }
      if (ApplyTime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ApplyTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerDbid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerDbid);
      }
      if (ApplyTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ApplyTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_UnionApplyInfo other) {
      if (other == null) {
        return;
      }
      if (other.PlayerDbid != 0) {
        PlayerDbid = other.PlayerDbid;
      }
      if (other.ApplyTime != 0) {
        ApplyTime = other.ApplyTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerDbid = input.ReadInt32();
            break;
          }
          case 16: {
            ApplyTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///工会日志数据
  /// </summary>
  public sealed partial class PB_UnionLogInfo : pb::IMessage<PB_UnionLogInfo> {
    private static readonly pb::MessageParser<PB_UnionLogInfo> _parser = new pb::MessageParser<PB_UnionLogInfo>(() => new PB_UnionLogInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_UnionLogInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBase.CommonReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_UnionLogInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_UnionLogInfo(PB_UnionLogInfo other) : this() {
      time_ = other.time_;
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_UnionLogInfo Clone() {
      return new PB_UnionLogInfo(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private int time_;
    /// <summary>
    ///时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    private string text_ = "";
    /// <summary>
    ///文本(例如:xxx加入工会)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_UnionLogInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_UnionLogInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0) hash ^= Time.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Time);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_UnionLogInfo other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadInt32();
            break;
          }
          case 18: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PB_BattleObj : pb::IMessage<PB_BattleObj> {
    private static readonly pb::MessageParser<PB_BattleObj> _parser = new pb::MessageParser<PB_BattleObj>(() => new PB_BattleObj());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_BattleObj> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBase.CommonReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_BattleObj() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_BattleObj(PB_BattleObj other) : this() {
      objId_ = other.objId_;
      cfgId_ = other.cfgId_;
      objName_ = other.objName_;
      posx_ = other.posx_;
      posy_ = other.posy_;
      fightAtrr_ = other.fightAtrr_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_BattleObj Clone() {
      return new PB_BattleObj(this);
    }

    /// <summary>Field number for the "objId" field.</summary>
    public const int ObjIdFieldNumber = 1;
    private int objId_;
    /// <summary>
    ///    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ObjId {
      get { return objId_; }
      set {
        objId_ = value;
      }
    }

    /// <summary>Field number for the "cfgId" field.</summary>
    public const int CfgIdFieldNumber = 2;
    private int cfgId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CfgId {
      get { return cfgId_; }
      set {
        cfgId_ = value;
      }
    }

    /// <summary>Field number for the "objName" field.</summary>
    public const int ObjNameFieldNumber = 3;
    private string objName_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ObjName {
      get { return objName_; }
      set {
        objName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "posx" field.</summary>
    public const int PosxFieldNumber = 4;
    private int posx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Posx {
      get { return posx_; }
      set {
        posx_ = value;
      }
    }

    /// <summary>Field number for the "posy" field.</summary>
    public const int PosyFieldNumber = 5;
    private int posy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Posy {
      get { return posy_; }
      set {
        posy_ = value;
      }
    }

    /// <summary>Field number for the "fightAtrr" field.</summary>
    public const int FightAtrrFieldNumber = 9;
    private static readonly pbc::MapField<int, long>.Codec _map_fightAtrr_codec
        = new pbc::MapField<int, long>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt64(16), 74);
    private readonly pbc::MapField<int, long> fightAtrr_ = new pbc::MapField<int, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, long> FightAtrr {
      get { return fightAtrr_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_BattleObj);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_BattleObj other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjId != other.ObjId) return false;
      if (CfgId != other.CfgId) return false;
      if (ObjName != other.ObjName) return false;
      if (Posx != other.Posx) return false;
      if (Posy != other.Posy) return false;
      if (!FightAtrr.Equals(other.FightAtrr)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObjId != 0) hash ^= ObjId.GetHashCode();
      if (CfgId != 0) hash ^= CfgId.GetHashCode();
      if (ObjName.Length != 0) hash ^= ObjName.GetHashCode();
      if (Posx != 0) hash ^= Posx.GetHashCode();
      if (Posy != 0) hash ^= Posy.GetHashCode();
      hash ^= FightAtrr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ObjId);
      }
      if (CfgId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CfgId);
      }
      if (ObjName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ObjName);
      }
      if (Posx != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Posx);
      }
      if (Posy != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Posy);
      }
      fightAtrr_.WriteTo(output, _map_fightAtrr_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObjId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObjId);
      }
      if (CfgId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CfgId);
      }
      if (ObjName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjName);
      }
      if (Posx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Posx);
      }
      if (Posy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Posy);
      }
      size += fightAtrr_.CalculateSize(_map_fightAtrr_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_BattleObj other) {
      if (other == null) {
        return;
      }
      if (other.ObjId != 0) {
        ObjId = other.ObjId;
      }
      if (other.CfgId != 0) {
        CfgId = other.CfgId;
      }
      if (other.ObjName.Length != 0) {
        ObjName = other.ObjName;
      }
      if (other.Posx != 0) {
        Posx = other.Posx;
      }
      if (other.Posy != 0) {
        Posy = other.Posy;
      }
      fightAtrr_.Add(other.fightAtrr_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ObjId = input.ReadInt32();
            break;
          }
          case 16: {
            CfgId = input.ReadInt32();
            break;
          }
          case 26: {
            ObjName = input.ReadString();
            break;
          }
          case 32: {
            Posx = input.ReadInt32();
            break;
          }
          case 40: {
            Posy = input.ReadInt32();
            break;
          }
          case 74: {
            fightAtrr_.AddEntriesFrom(input, _map_fightAtrr_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PB_BattleTurn : pb::IMessage<PB_BattleTurn> {
    private static readonly pb::MessageParser<PB_BattleTurn> _parser = new pb::MessageParser<PB_BattleTurn>(() => new PB_BattleTurn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PB_BattleTurn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PBase.CommonReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_BattleTurn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_BattleTurn(PB_BattleTurn other) : this() {
      mapId_ = other.mapId_;
      turnIndex_ = other.turnIndex_;
      npcList_ = other.npcList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PB_BattleTurn Clone() {
      return new PB_BattleTurn(this);
    }

    /// <summary>Field number for the "mapId" field.</summary>
    public const int MapIdFieldNumber = 1;
    private int mapId_;
    /// <summary>
    ///       
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    /// <summary>Field number for the "turnIndex" field.</summary>
    public const int TurnIndexFieldNumber = 2;
    private int turnIndex_;
    /// <summary>
    ///    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TurnIndex {
      get { return turnIndex_; }
      set {
        turnIndex_ = value;
      }
    }

    /// <summary>Field number for the "npcList" field.</summary>
    public const int NpcListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::PBase.PB_BattleObj> _repeated_npcList_codec
        = pb::FieldCodec.ForMessage(26, global::PBase.PB_BattleObj.Parser);
    private readonly pbc::RepeatedField<global::PBase.PB_BattleObj> npcList_ = new pbc::RepeatedField<global::PBase.PB_BattleObj>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PBase.PB_BattleObj> NpcList {
      get { return npcList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PB_BattleTurn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PB_BattleTurn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapId != other.MapId) return false;
      if (TurnIndex != other.TurnIndex) return false;
      if(!npcList_.Equals(other.npcList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapId != 0) hash ^= MapId.GetHashCode();
      if (TurnIndex != 0) hash ^= TurnIndex.GetHashCode();
      hash ^= npcList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MapId);
      }
      if (TurnIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TurnIndex);
      }
      npcList_.WriteTo(output, _repeated_npcList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapId);
      }
      if (TurnIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TurnIndex);
      }
      size += npcList_.CalculateSize(_repeated_npcList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PB_BattleTurn other) {
      if (other == null) {
        return;
      }
      if (other.MapId != 0) {
        MapId = other.MapId;
      }
      if (other.TurnIndex != 0) {
        TurnIndex = other.TurnIndex;
      }
      npcList_.Add(other.npcList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MapId = input.ReadInt32();
            break;
          }
          case 16: {
            TurnIndex = input.ReadInt32();
            break;
          }
          case 26: {
            npcList_.AddEntriesFrom(input, _repeated_npcList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
