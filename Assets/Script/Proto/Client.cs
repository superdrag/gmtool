// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: client.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PClient {

  /// <summary>Holder for reflection information generated from client.proto</summary>
  public static partial class ClientReflection {

    #region Descriptor
    /// <summary>File descriptor for client.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClientReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxjbGllbnQucHJvdG8SB1BDbGllbnQaDGNvbW1vbi5wcm90byIgCg1TMkNf",
            "RXJyb3JDb2RlEg8KB2VycmNvZGUYASABKAUiDwoNQzJTX1NvY2tldEhpdCIg",
            "Cg1TMkNfU29ja2V0SGl0Eg8KB2N1cnRpbWUYASABKAUiHwoMUzJDX1NodXRE",
            "d29uEg8KB2xlZnRzZWMYASABKAUiEQoPUzJDX1JlbG9naW5LaWNrIp4CCglD",
            "MlNfTG9naW4SDwoHYWNjb3VudBgBIAEoCRIOCgZwYXNzd2QYAiABKAkSDwoH",
            "dmVyc2lvbhgDIAEoCRIQCghoZWFkaWNvbhgEIAEoCRINCgVndWVzdBgFIAEo",
            "BRIOCgZyZWNvbm4YBiABKAUSEAoIcGxhdGZvcm0YCyABKAkSDwoHY291bnRy",
            "eRgMIAEoCRIMCgRzaWduGA0gASgJEgwKBHRpbWUYDiABKAUSDQoFdG9rZW4Y",
            "DyABKAkSDAoEbWFpbBgQIAEoCRIPCgdhY2N0eXBlGBEgASgJEgwKBGJvcm4Y",
            "FSABKAkSDwoHYWRkcmVzcxgWIAEoCRIQCghwaG9uZXVpZBgXIAEoCRIQCghu",
            "aWNrbmFtZRgYIAEoCSLlAQoJUzJDX0xvZ2luEg8KB2FjY291bnQYASABKAkS",
            "DwoHYWNjZGJpZBgCIAEoBRIMCgRzaWduGAMgASgJEg4KBmdhdGVpcBgEIAEo",
            "CRIQCghnYXRlcG9ydBgFIAEoBRIMCgR0aW1lGAYgASgFEg8KB2FjY2NvZGUY",
            "ByABKAkSCwoDcmV0GAggASgFEg4KBnJldGFyZxgJIAEoBRISCgp1cHNhdmV0",
            "aW1lGAogASgFEg8KB25ld3VzZXIYCyABKAgSEAoIc3RhcnRtaW4YDCABKAUS",
            "EwoLcGxhdGFjY291bnQYDSABKAkijgEKDUMyU19Mb2dpbkdhdGUSDwoHYWNj",
            "b3VudBgBIAEoCRIMCgRuYW1lGAIgASgJEg8KB2FjY2RiaWQYAyABKAUSDAoE",
            "c2lnbhgEIAEoCRIMCgR0aW1lGAUgASgFEg8KB3ZlcnNpb24YBiABKAkSDgoG",
            "cmVjb25uGAcgASgFEhAKCGRvd25zYXZlGAkgASgFIscBCg1TMkNfTG9naW5H",
            "YXRlEg8KB2FjY291bnQYASABKAkSDwoHYWNjZGJpZBgCIAEoBRIOCgZyb2xl",
            "aWQYAyABKAUSCgoCaXAYBCABKAkSEAoIaGVhZGljb24YBSABKAkSDgoGcmVj",
            "b25uGAYgASgFEhIKCmZpcnN0bG9naW4YCSABKAgSDwoHY3VydGltZRgKIAEo",
            "BRISCgpkYXlSZWZyZXNoGAsgASgIEhAKCG5pY2tuYW1lGAwgASgJEgsKA3Jl",
            "dBgNIAEoBSLcCAoRUzJDX0xvZ2luUm9sZURhdGESDgoGcmVjb25uGAEgASgF",
            "Eg8KB2RpYW1vbmQYAiABKAUSDwoHbmV3bWFpbBgDIAEoCBIVCg1kcmF3Y2Fy",
            "ZGNvdW50GAQgASgFEhAKCGxlYWZsZXQyGAUgASgFEhAKCGxlYWZsZXQzGAYg",
            "ASgFEiwKDHRlYW1jYXJkbGlzdBgLIAMoCzIWLlBCYXNlLlBCX1RlYW1DYXJk",
            "SW5mbxJECg1maXJzdGdpZnRsaXN0GAwgAygLMi0uUENsaWVudC5TMkNfTG9n",
            "aW5Sb2xlRGF0YS5GaXJzdGdpZnRsaXN0RW50cnkSFgoOcmFuZG9tY2FyZGxp",
            "c3QYDSADKAUSFwoPcmFuZG9tY2FyZGNvdW50GA4gASgFEhIKCnNldmVubG9n",
            "aW4YDyABKAUSEQoJc2V2ZW5nYWluGBAgASgIEkQKDW1vbnRoY2FyZGluZm8Y",
            "ESADKAsyLS5QQ2xpZW50LlMyQ19Mb2dpblJvbGVEYXRhLk1vbnRoY2FyZGlu",
            "Zm9FbnRyeRIQCghwYXlsZXZlbBgSIAEoBRJGCg5hY3RpdmVnaXRmbGlzdBgT",
            "IAMoCzIuLlBDbGllbnQuUzJDX0xvZ2luUm9sZURhdGEuQWN0aXZlZ2l0Zmxp",
            "c3RFbnRyeRITCgtiaWd0YXNrbGlzdBgUIAMoBRIQCgh6ZXJvdGltZRgVIAEo",
            "BRITCgtyYW5rZ3JvdXBpZBgWIAEoCRIUCgxhcmVhc3RlcGxpc3QYFyADKAUS",
            "EAoIaGVhZGljb24YGCABKAkSFgoOYmF0dGxlcGFzc3RpbWUYHiABKAUSFwoP",
            "YmF0dGxlcGFzc2NvdW50GB8gASgFEhUKDWJhdHRsZXBhc3NleHAYICABKAUS",
            "FwoPYmF0dGxlcGFzc2xldmVsGCEgASgFEhYKDmJhdHRsZXBhc3Njb2luGCIg",
            "ASgFEhUKDWJhdHRsZXBhc3NzcGwYIyABKAUSFwoPYmF0dGxlcGFzc3NnYWlu",
            "GCQgAygFEkoKEGJhdHRsZXBhc3NzbGltaXQYJSADKAsyMC5QQ2xpZW50LlMy",
            "Q19Mb2dpblJvbGVEYXRhLkJhdHRsZXBhc3NzbGltaXRFbnRyeRIRCglnYW1l",
            "c2hhcmUYJiABKAUaSAoSRmlyc3RnaWZ0bGlzdEVudHJ5EgsKA2tleRgBIAEo",
            "BRIhCgV2YWx1ZRgCIAEoCzISLlBCYXNlLlBCX0dpZnRQYWNrOgI4ARo0ChJN",
            "b250aGNhcmRpbmZvRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgF",
            "OgI4ARpJChNBY3RpdmVnaXRmbGlzdEVudHJ5EgsKA2tleRgBIAEoBRIhCgV2",
            "YWx1ZRgCIAEoCzISLlBCYXNlLlBCX0dpZnRQYWNrOgI4ARo3ChVCYXR0bGVw",
            "YXNzc2xpbWl0RW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4",
            "ASJHChFDMlNfVXBkYXRlQWNjSW5mbxIPCgdhY2NvdW50GAEgASgJEhAKCHBs",
            "YXRmb3JtGAIgASgJEg8KB2NvdW50cnkYAyABKAkiVAoRUzJDX1VwZGF0ZUFj",
            "Y0luZm8SCwoDcmV0GAEgASgFEg8KB2FjY291bnQYAiABKAkSEAoIcGxhdGZv",
            "cm0YAyABKAkSDwoHY291bnRyeRgEIAEoCSIfCg9TMkNfWmVyb1JlZnJlc2gS",
            "DAoEdGltZRgBIAEoBSIfCg9TMkNfV2Vla1JlZnJlc2gSDAoEdGltZRgBIAEo",
            "BSIgChBTMkNfTW9udGhSZWZyZXNoEgwKBHRpbWUYASABKAUiMgoOUzJDX1N0",
            "b3BTZXJ2ZXISEAoIY29uZmlnaWQYASABKAUSDgoGcGFyYW1zGAIgAygFIiUK",
            "EFMyQ19VcGRhdGVEaWFtb2QSEQoJZGlhbW9kbnVtGAEgASgFIi8KElMyQ19V",
            "cGRhdGVDdXJyZW5jeRIMCgR0eXBlGAEgASgJEgsKA251bRgCIAEoBSJMCg1D",
            "MlNfVXNlRGlhbW9kEgsKA251bRgBIAEoBRINCgVldmVudBgCIAEoBRIOCgZw",
            "YXJhbXMYAyADKAUSDwoHZ29vZHNpZBgEIAEoBSJZCg1TMkNfVXNlRGlhbW9k",
            "EgsKA3JldBgBIAEoBRILCgNudW0YAiABKAUSDQoFZXZlbnQYAyABKAUSDgoG",
            "cGFyYW1zGAQgAygFEg8KB2dvb2RzaWQYBSABKAUiLQoMQzJTX1dhdGNoQWR2",
            "Eg0KBWV2ZW50GAEgASgFEg4KBnBhcmFtcxgCIAMoBSItCgxTMkNfV2F0Y2hB",
            "ZHYSDQoFZXZlbnQYASABKAUSDgoGcGFyYW1zGAIgAygFIh8KD0MyU19TZXRO",
            "aWNrTmFtZRIMCgRuYW1lGAEgASgJIiwKD1MyQ19TZXROaWNrTmFtZRILCgNy",
            "ZXQYASABKAUSDAoEbmFtZRgCIAEoCSIfCg9DMlNfU2V0SGVhZEljb24SDAoE",
            "aWNvbhgBIAEoCSIsCg9TMkNfU2V0SGVhZEljb24SCwoDcmV0GAEgASgFEgwK",
            "BGljb24YAiABKAkiEAoOQzJTX0dldE1haWxOZXciIQoOUzJDX0dldE1haWxO",
            "ZXcSDwoHbmV3bWFpbBgBIAEoCCISChBDMlNfU2hvd01haWxMaXN0IjgKEFMy",
            "Q19TaG93TWFpbExpc3QSJAoIbWFpbGxpc3QYASADKAsyEi5QQmFzZS5QQl9N",
            "YWlsSXRlbSIeCgxDMlNfUmVhZE1haWwSDgoGbWFpbGlkGAEgASgJIj4KDFMy",
            "Q19SZWFkTWFpbBILCgNyZXQYASABKAUSDgoGbWFpbGlkGAIgASgJEhEKCW1h",
            "aWxzdGF0ZRgDIAEoBSIhCg9DMlNfTWFpbEdldEl0ZW0SDgoGbWFpbGlkGAEg",
            "ASgJIlMKD1MyQ19NYWlsR2V0SXRlbRILCgNyZXQYASABKAUSDgoGbWFpbGlk",
            "GAIgASgJEhEKCW1haWxzdGF0ZRgDIAEoBRIQCghjYXJkbGlzdBgEIAMoCSIU",
            "ChJDMlNfTWFpbERlbGV0ZVJlYWQiJQoSUzJDX01haWxEZWxldGVSZWFkEg8K",
            "B2RlbGxpc3QYASADKAkiEQoPQzJTX01haWxBbGxSZWFkIiMKD1MyQ19NYWls",
            "QWxsUmVhZBIQCghyZWFkbGlzdBgBIAMoCSIWChRDMlNfU2hvd1RlYW1DYXJk",
            "TGlzdCJEChRTMkNfU2hvd1RlYW1DYXJkTGlzdBIsCgx0ZWFtY2FyZGxpc3QY",
            "ASADKAsyFi5QQmFzZS5QQl9UZWFtQ2FyZEluZm8iEgoQQzJTX0RyYXdDYXJk",
            "SW5mbyKCAgoQUzJDX0RyYXdDYXJkSW5mbxIUCgxkcmF3ZnJlZXRpbWUYASAB",
            "KAUSEgoKdW5sb2NrdGltZRgCIAEoBRIZChFkcmF3Y291bnRsZWFmbGV0MRgF",
            "IAEoBRIZChFkcmF3Y291bnRsZWFmbGV0MhgGIAEoBRIZChFkcmF3Y291bnRs",
            "ZWFmbGV0MxgHIAEoBRIYChBkcmF3Z2FpbmxlYWZsZXQxGAsgASgFEhgKEGRy",
            "YXdnYWlubGVhZmxldDIYDCABKAUSGAoQZHJhd2dhaW5sZWFmbGV0MxgNIAEo",
            "BRIQCghsZWZ0dGltZRgUIAEoBRITCgtsZWFmbGV0MnNlYxgVIAEoBSItCgxD",
            "MlNfRHJhd0NhcmQSDQoFYm94aWQYASABKAUSDgoGY2FyZGlkGAIgASgFIksK",
            "DFMyQ19EcmF3Q2FyZBILCgNyZXQYASABKAUSDQoFYm94aWQYAiABKAUSDgoG",
            "Y2FyZGlkGAMgASgFEg8KB3Jld2FyZHMYBCADKAkiNAoPQzJTX1VwTGV2ZWxD",
            "YXJkEg4KBmNhcmRpZBgBIAEoBRIRCgljYXJkbGV2ZWwYAiABKAUiQQoPUzJD",
            "X1VwTGV2ZWxDYXJkEgsKA3JldBgBIAEoBRIOCgZjYXJkaWQYAiABKAUSEQoJ",
            "Y2FyZGxldmVsGAMgASgFIiQKEkMyU19SZXNldExldmVsQ2FyZBIOCgZjYXJk",
            "aWQYASABKAUiMQoSUzJDX1Jlc2V0TGV2ZWxDYXJkEgsKA3JldBgBIAEoBRIO",
            "CgZjYXJkaWQYAiABKAUiEAoOQzJTX1VwZGF0ZUNhcmQiEAoOUzJDX1VwZGF0",
            "ZUNhcmQiJAoSQzJTX0Z1bmRUYXNrRmluaXNoEg4KBnRhc2tpZBgBIAEoBSIx",
            "ChJTMkNfRnVuZFRhc2tGaW5pc2gSCwoDcmV0GAEgASgFEg4KBnRhc2tpZBgC",
            "IAEoBSIVChNDMlNfR2V0RnVuZFRhc2tMaXN0IjkKE1MyQ19HZXRGdW5kVGFz",
            "a0xpc3QSEAoIZnVuZHBhc3MYASABKAUSEAoIZnVuZGxpc3QYAiADKAUiDgoM",
            "QzJTX1Bhc3NJbmZvIrcCCgxTMkNfUGFzc0luZm8SFgoOYmF0dGxlcGFzc3Rp",
            "bWUYASABKAUSFwoPYmF0dGxlcGFzc2NvdW50GAIgASgFEhUKDWJhdHRsZXBh",
            "c3NleHAYAyABKAUSFwoPYmF0dGxlcGFzc2xldmVsGAQgASgFEhYKDmJhdHRs",
            "ZXBhc3Njb2luGAUgASgFEhUKDWJhdHRsZXBhc3NzcGwYBiABKAUSFwoPYmF0",
            "dGxlcGFzc3NnYWluGAcgAygFEkUKEGJhdHRsZXBhc3NzbGltaXQYCCADKAsy",
            "Ky5QQ2xpZW50LlMyQ19QYXNzSW5mby5CYXR0bGVwYXNzc2xpbWl0RW50cnka",
            "NwoVQmF0dGxlcGFzc3NsaW1pdEVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1",
            "ZRgCIAEoBToCOAEiDQoLQzJTX0J1eVBhc3MiGgoLUzJDX0J1eVBhc3MSCwoD",
            "cmV0GAEgASgFIiEKD0MyU19HZXRQYXNzSXRlbRIOCgZnaWZ0aWQYASABKAUi",
            "PwoPUzJDX0dldFBhc3NJdGVtEgsKA3JldBgBIAEoBRIOCgZnaWZ0aWQYAiAB",
            "KAUSDwoHcmV3YXJkcxgDIAMoCSIhCg9DMlNfQnV5UGFzc1Nob3ASDgoGZ2lm",
            "dGlkGAEgASgFIrEBCg9TMkNfQnV5UGFzc1Nob3ASCwoDcmV0GAEgASgFEg4K",
            "BmdpZnRpZBgCIAEoBRJIChBiYXR0bGVwYXNzc2xpbWl0GAMgAygLMi4uUENs",
            "aWVudC5TMkNfQnV5UGFzc1Nob3AuQmF0dGxlcGFzc3NsaW1pdEVudHJ5GjcK",
            "FUJhdHRsZXBhc3NzbGltaXRFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUY",
            "AiABKAU6AjgBIiMKEEMyU19CdXlQYXNzTGV2ZWwSDwoHbGV2ZWxpZBgBIAEo",
            "BSJJChBTMkNfQnV5UGFzc0xldmVsEgsKA3JldBgBIAEoBRIPCgdsZXZlbGlk",
            "GAIgASgFEhcKD2JhdHRsZXBhc3NsZXZlbBgDIAEoBSIRCg9DMlNfR2V0U2hv",
            "cEluZm8i3wUKD1MyQ19HZXRTaG9wSW5mbxIPCgdjdXJ0aW1lGAEgASgFEhYK",
            "DmRheXJlZnJlc2h0aW1lGAIgASgFEhcKD3dlZWtyZWZyZXNodGltZRgDIAEo",
            "BRIYChBtb250aHJlZnJlc2h0aW1lGAQgASgFEhUKDWRyYXdjYXJkY291bnQY",
            "BSABKAUSQgoNZmlyc3RnaWZ0bGlzdBgLIAMoCzIrLlBDbGllbnQuUzJDX0dl",
            "dFNob3BJbmZvLkZpcnN0Z2lmdGxpc3RFbnRyeRI+CgtkYXlnaWZ0bGlzdBgM",
            "IAMoCzIpLlBDbGllbnQuUzJDX0dldFNob3BJbmZvLkRheWdpZnRsaXN0RW50",
            "cnkSQAoMd2Vla2dpZnRsaXN0GA0gAygLMiouUENsaWVudC5TMkNfR2V0U2hv",
            "cEluZm8uV2Vla2dpZnRsaXN0RW50cnkSQgoNbW9udGhnaWZ0bGlzdBgOIAMo",
            "CzIrLlBDbGllbnQuUzJDX0dldFNob3BJbmZvLk1vbnRoZ2lmdGxpc3RFbnRy",
            "eRIqCg9zaG9wcmFuY2FyZGxpc3QYDyADKAsyES5QQmFzZS5QQl9SYW5DYXJk",
            "GkgKEkZpcnN0Z2lmdGxpc3RFbnRyeRILCgNrZXkYASABKAUSIQoFdmFsdWUY",
            "AiABKAsyEi5QQmFzZS5QQl9HaWZ0UGFjazoCOAEaRgoQRGF5Z2lmdGxpc3RF",
            "bnRyeRILCgNrZXkYASABKAUSIQoFdmFsdWUYAiABKAsyEi5QQmFzZS5QQl9H",
            "aWZ0UGFjazoCOAEaRwoRV2Vla2dpZnRsaXN0RW50cnkSCwoDa2V5GAEgASgF",
            "EiEKBXZhbHVlGAIgASgLMhIuUEJhc2UuUEJfR2lmdFBhY2s6AjgBGkgKEk1v",
            "bnRoZ2lmdGxpc3RFbnRyeRILCgNrZXkYASABKAUSIQoFdmFsdWUYAiABKAsy",
            "Ei5QQmFzZS5QQl9HaWZ0UGFjazoCOAEiOgoSUzJDX1VwZGF0ZVNob3BHaWZ0",
            "EiQKCGdpZnRpbmZvGAEgASgLMhIuUEJhc2UuUEJfR2lmdFBhY2siFgoUQzJT",
            "X0dldE1vbnRoQ2FyZEluZm8ilAIKFFMyQ19HZXRNb250aENhcmRJbmZvEkcK",
            "DW1vbnRoY2FyZGluZm8YASADKAsyMC5QQ2xpZW50LlMyQ19HZXRNb250aENh",
            "cmRJbmZvLk1vbnRoY2FyZGluZm9FbnRyeRJHCg1tb250aGNhcmR0aW1lGAIg",
            "AygLMjAuUENsaWVudC5TMkNfR2V0TW9udGhDYXJkSW5mby5Nb250aGNhcmR0",
            "aW1lRW50cnkaNAoSTW9udGhjYXJkaW5mb0VudHJ5EgsKA2tleRgBIAEoBRIN",
            "CgV2YWx1ZRgCIAEoBToCOAEaNAoSTW9udGhjYXJkdGltZUVudHJ5EgsKA2tl",
            "eRgBIAEoBRINCgV2YWx1ZRgCIAEoBToCOAEiLAoVQzJTX0dhaW5Nb250aENh",
            "cmRJdGVtEhMKC21vbnRoY2FyZGlkGAEgASgFIjkKFVMyQ19HYWluTW9udGhD",
            "YXJkSXRlbRILCgNyZXQYASABKAUSEwoLbW9udGhjYXJkaWQYAiABKAUiNAoR",
            "QzJTX0dhaW5JdGVtRGFpbHkSDgoGdGFza2lkGAEgASgFEg8KB3ZpcGNhcmQY",
            "AiABKAUiQQoRUzJDX0dhaW5JdGVtRGFpbHkSCwoDcmV0GAEgASgFEg4KBnRh",
            "c2tpZBgCIAEoBRIPCgd2aXBjYXJkGAMgASgFIhMKEUMyU19UYXNrRGFsaXlJ",
            "bmZvIiUKEVMyQ19UYXNrRGFsaXlJbmZvEhAKCGdhaW5saXN0GAEgAygFIiAK",
            "EUMyU19TZXZlbkxvZ2luR2V0EgsKA2RheRgBIAEoBSI+ChFTMkNfU2V2ZW5M",
            "b2dpbkdldBILCgNyZXQYASABKAUSCwoDZGF5GAIgASgFEg8KB3Jld2FyZHMY",
            "AyABKAkiDwoNQzJTX0dhaW5TaGFyZSItCg1TMkNfR2FpblNoYXJlEgsKA3Jl",
            "dBgBIAEoBRIPCgdyZXdhcmRzGAIgASgJIiwKD0MyU19HYWluTGVhZmV0MhIL",
            "CgNudW0YASABKAUSDAoEdHlwZRgCIAEoBSI5Cg9TMkNfR2FpbkxlYWZldDIS",
            "CwoDcmV0GAEgASgFEgsKA251bRgCIAEoBRIMCgR0eXBlGAMgASgFIh8KD0My",
            "U19HZXRHaWZ0SW5mbxIMCgR0eXBlGAEgASgFIp4BCg9TMkNfR2V0R2lmdElu",
            "Zm8SDAoEdHlwZRgBIAEoBRI4CghnaWZ0bGlzdBgCIAMoCzImLlBDbGllbnQu",
            "UzJDX0dldEdpZnRJbmZvLkdpZnRsaXN0RW50cnkaQwoNR2lmdGxpc3RFbnRy",
            "eRILCgNrZXkYASABKAUSIQoFdmFsdWUYAiABKAsyEi5QQmFzZS5QQl9HaWZ0",
            "UGFjazoCOAEiMgoPQzJTX0dldFJhbmROYW1lEhIKCnBsYXllcmRiaWQYASAB",
            "KAUSCwoDbnVtGAIgASgFIjAKD1MyQ19HZXRSYW5kTmFtZRILCgNyZXQYASAB",
            "KAUSEAoIbmFtZWxpc3QYAiADKAkiJAoQQzJTX0NsaWVudFVubG9jaxIQCgh1",
            "bmxvY2tpZBgBIAEoBSJFChBTMkNfQ2xpZW50VW5sb2NrEgsKA3JldBgBIAEo",
            "BRIQCgh1bmxvY2tpZBgCIAEoBRISCgp1bmxvY2t0aW1lGAMgASgFIiQKFkMy",
            "U19HYWluRHJhd1N1bVJld2FyZHMSCgoCaWQYASABKAUiQgoWUzJDX0dhaW5E",
            "cmF3U3VtUmV3YXJkcxILCgNyZXQYASABKAUSCgoCaWQYAiABKAUSDwoHcmV3",
            "YXJkcxgDIAMoCSJRCgxDMlNfVGltZVRhc2sSDgoGdGFza2lkGAEgASgFEg4K",
            "BnZwY2FyZBgCIAEoBRIQCghpc2RvdWJsZRgDIAEoCBIPCgd0aW1lb3V0GAQg",
            "ASgIIk8KDFMyQ19UaW1lVGFzaxILCgNyZXQYASABKAUSDwoHcmV3YXJkcxgC",
            "IAMoCRIQCghpc2RvdWJsZRgDIAEoCBIPCgd0aW1lb3V0GAQgASgIIhEKD0My",
            "U19HZXRSYW5rTGlzdCKiAQoPUzJDX0dldFJhbmtMaXN0EiYKC3JhbmtvYmps",
            "aXN0GAEgAygLMhEuUEJhc2UuUEJfUmFua09iahIRCglyZXdhcmRzZWMYAiAB",
            "KAUSEwoLcmV3YXJkY291bnQYAyABKAUSEQoJcmFua2Nsb3NlGAQgASgFEhYK",
            "DnJld2FyZGZpbmFsc2VjGAUgASgFEhQKDHJld2FyZGVuZHNlYxgGIAEoBSIn",
            "ChBTMkNfSm9pblJhbmtMaXN0EhMKC3Jhbmtncm91cGlkGAEgASgJIiQKEkMy",
            "U19BcmVhU3RlcFJld2FyZBIOCgZ0YXNraWQYASABKAUiMQoSUzJDX0FyZWFT",
            "dGVwUmV3YXJkEgsKA3JldBgBIAEoBRIOCgZ0YXNraWQYAiABKAUiZQoPQzJT",
            "X0lPU1BheUNoZWNrEg0KBXBheWlkGAEgASgFEg8KB3BheWNvZGUYAiABKAkS",
            "EAoIcGxhdGZvcm0YCSABKAkSEAoIcGF5b3JkZXIYCiABKAkSDgoGcmVwYWly",
            "GAsgASgFIpkBCg9TMkNfSU9TUGF5Q2hlY2sSCwoDcmV0GAEgASgFEg0KBXBh",
            "eWlkGAIgASgFEg8KB3BheXR5cGUYAyABKAUSEAoIcGxhdGZvcm0YCSABKAkS",
            "EAoIcGF5b3JkZXIYCiABKAkSDgoGcmVwYWlyGAsgASgFEg8KB3BheWNvZGUY",
            "DCABKAkSFAoMcHVyY2hhc2V0eXBlGA0gASgFImUKDkMyU19JT1NQYXlGYWls",
            "Eg8KB2FjY291bnQYASABKAkSDQoFcGF5aWQYAiABKAUSDwoHcGF5Y29kZRgD",
            "IAEoCRIQCghwbGF0Zm9ybRgEIAEoCRIQCghwYXlvcmRlchgFIAEoCSJyCg5T",
            "MkNfSU9TUGF5RmFpbBILCgNyZXQYASABKAUSDwoHYWNjb3VudBgCIAEoCRIN",
            "CgVwYXlpZBgDIAEoBRIPCgdwYXljb2RlGAQgASgJEhAKCHBsYXRmb3JtGAUg",
            "ASgJEhAKCHBheW9yZGVyGAYgASgJIjEKDkMyU19JT1NQYXlGcmVlEg0KBXBh",
            "eWlkGAEgASgFEhAKCHBsYXRmb3JtGAMgASgJIj0KDlMyQ19JT1NQYXlGcmVl",
            "EgsKA3JldBgBIAEoBRINCgVwYXlpZBgCIAEoBRIPCgdwYXl0eXBlGAMgASgF",
            "IlQKEVMyQ19QYXlOb1VzZVRva2VuEg8KB2FjY291bnQYASABKAkSEAoIcGF5",
            "b3JkZXIYAiABKAkSDQoFdG9rZW4YAyABKAkSDQoFcGF5aWQYBCABKAUiVwoR",
            "QzJTX1BheUNoZWNrT3JkZXISEAoIcGF5b3JkZXIYASABKAkSDQoFcGF5aWQY",
            "AiABKAUSDQoFdG9rZW4YAyABKAkSEgoKcGxheWVyZGJpZBgJIAEoBSJQChFT",
            "MkNfUGF5Q2hlY2tPcmRlchILCgNyZXQYASABKAUSEAoIcGF5b3JkZXIYAiAB",
            "KAkSDQoFcGF5aWQYAyABKAUSDQoFdG9rZW4YBCABKAkiNgoTQzJTX0lPU1Bh",
            "eUNvbmRpdGlvbhINCgVwYXlpZBgBIAEoBRIQCghwbGF0Zm9ybRgCIAEoCSJC",
            "ChNTMkNfSU9TUGF5Q29uZGl0aW9uEgsKA3JldBgBIAEoBRINCgVwYXlpZBgC",
            "IAEoBRIPCgdwYXl0eXBlGAMgASgFIiAKDUMyU19EZWxldGVBY2MSDwoHYWNj",
            "b3VudBgBIAEoCSItCg1TMkNfRGVsZXRlQWNjEgsKA3JldBgBIAEoBRIPCgdh",
            "Y2NvdW50GAIgASgJIkEKDkMyU19TYXZlVXBsb2FkEhAKCGZpbGVuYW1lGAEg",
            "ASgJEgwKBGRhdGEYAiABKAwSDwoHZGF0YXN0chgDIAEoCSI9Cg5TMkNfU2F2",
            "ZVVwbG9hZBILCgNyZXQYASABKAUSEAoIZmlsZW5hbWUYAiABKAkSDAoEdGlt",
            "ZRgDIAEoBSIkChBDMlNfU2F2ZURvd25sb2FkEhAKCGZpbGVuYW1lGAEgASgJ",
            "IlAKEFMyQ19TYXZlRG93bmxvYWQSCwoDcmV0GAEgASgFEhAKCGZpbGVuYW1l",
            "GAIgASgJEgwKBGRhdGEYAyABKAwSDwoHZGF0YXN0chgEIAEoCSI1ChJDMlNf",
            "VXBsb2FkTWFpblRhc2sSDgoGdGFza2lkGAEgASgFEg8KB3Rhc2thcmcYAiAB",
            "KAUiQgoSUzJDX1VwbG9hZE1haW5UYXNrEgsKA3JldBgBIAEoBRIOCgZ0YXNr",
            "aWQYAiABKAUSDwoHdGFza2FyZxgDIAEoBSI0ChFDMlNfVXBsb2FkQmlnVGFz",
            "axIOCgZ0YXNraWQYASABKAUSDwoHdGFza2FyZxgCIAEoBSJBChFTMkNfVXBs",
            "b2FkQmlnVGFzaxILCgNyZXQYASABKAUSDgoGdGFza2lkGAIgASgFEg8KB3Rh",
            "c2thcmcYAyABKAUiOQoUQzJTX1VwbG9hZFBsYXllckluZm8SDgoGdHlwZWlk",
            "GAEgASgFEhEKCXBhcmFtbGlzdBgCIAMoBSJGChRTMkNfVXBsb2FkUGxheWVy",
            "SW5mbxILCgNyZXQYASABKAUSDgoGdHlwZWlkGAIgASgFEhEKCXBhcmFtbGlz",
            "dBgDIAMoBSJACg1DMlNfQ2hlc3REYXRhEgwKBHR5cGUYASABKAUSDQoFcGFy",
            "YW0YAiABKAkSEgoKcGxheWVyZGJpZBgLIAEoBSIdCg1TMkNfQ2hlc3REYXRh",
            "EgwKBHR5cGUYASABKAUiDQoLQzJTX1Rlc3RNc2ciGgoLUzJDX1Rlc3RNc2cS",
            "CwoDcmV0GAEgASgFIi0KEEMyU19UZXN0UmVjaGFyZ2USDAoEdHlwZRgBIAEo",
            "BRILCgNudW0YAiABKAUiLQoQUzJDX1Rlc3RSZWNoYXJnZRIMCgR0eXBlGAEg",
            "ASgFEgsKA251bRgCIAEoBSI2ChNDMlNfVGVzdEdldFRlYW1DYXJkEg4KBmNh",
            "cmRpZBgBIAEoBRIPCgdjYXJkbnVtGAIgASgFIjYKE1MyQ19UZXN0R2V0VGVh",
            "bUNhcmQSDgoGY2FyZGlkGAEgASgFEg8KB2NhcmRudW0YAiABKAUiHwoPQzJT",
            "X0dldFRhc2tMaXN0EgwKBHR5cGUYASABKAUiQgoQUzJDX0JhY2tUYXNrTGlz",
            "dBIMCgR0eXBlGAEgASgFEiAKCHRhc2tMaXN0GAIgAygLMg4uUEJhc2UuUEJf",
            "VGFzayIUChJDMlNfR2V0Q291bnRlckxpc3QiPQoTUzJDX0JhY2tDb3VudGVy",
            "TGlzdBImCgtjb3VudGVyTGlzdBgBIAMoCzIRLlBCYXNlLlBCX0NvdW50ZXJi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::PBase.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_ErrorCode), global::PClient.S2C_ErrorCode.Parser, new[]{ "Errcode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_SocketHit), global::PClient.C2S_SocketHit.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_SocketHit), global::PClient.S2C_SocketHit.Parser, new[]{ "Curtime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_ShutDwon), global::PClient.S2C_ShutDwon.Parser, new[]{ "Leftsec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_ReloginKick), global::PClient.S2C_ReloginKick.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_Login), global::PClient.C2S_Login.Parser, new[]{ "Account", "Passwd", "Version", "Headicon", "Guest", "Reconn", "Platform", "Country", "Sign", "Time", "Token", "Mail", "Acctype", "Born", "Address", "Phoneuid", "Nickname" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_Login), global::PClient.S2C_Login.Parser, new[]{ "Account", "Accdbid", "Sign", "Gateip", "Gateport", "Time", "Acccode", "Ret", "Retarg", "Upsavetime", "Newuser", "Startmin", "Plataccount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_LoginGate), global::PClient.C2S_LoginGate.Parser, new[]{ "Account", "Name", "Accdbid", "Sign", "Time", "Version", "Reconn", "Downsave" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_LoginGate), global::PClient.S2C_LoginGate.Parser, new[]{ "Account", "Accdbid", "Roleid", "Ip", "Headicon", "Reconn", "Firstlogin", "Curtime", "DayRefresh", "Nickname", "Ret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_LoginRoleData), global::PClient.S2C_LoginRoleData.Parser, new[]{ "Reconn", "Diamond", "Newmail", "Drawcardcount", "Leaflet2", "Leaflet3", "Teamcardlist", "Firstgiftlist", "Randomcardlist", "Randomcardcount", "Sevenlogin", "Sevengain", "Monthcardinfo", "Paylevel", "Activegitflist", "Bigtasklist", "Zerotime", "Rankgroupid", "Areasteplist", "Headicon", "Battlepasstime", "Battlepasscount", "Battlepassexp", "Battlepasslevel", "Battlepasscoin", "Battlepassspl", "Battlepasssgain", "Battlepassslimit", "Gameshare" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_UpdateAccInfo), global::PClient.C2S_UpdateAccInfo.Parser, new[]{ "Account", "Platform", "Country" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_UpdateAccInfo), global::PClient.S2C_UpdateAccInfo.Parser, new[]{ "Ret", "Account", "Platform", "Country" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_ZeroRefresh), global::PClient.S2C_ZeroRefresh.Parser, new[]{ "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_WeekRefresh), global::PClient.S2C_WeekRefresh.Parser, new[]{ "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_MonthRefresh), global::PClient.S2C_MonthRefresh.Parser, new[]{ "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_StopServer), global::PClient.S2C_StopServer.Parser, new[]{ "Configid", "Params" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_UpdateDiamod), global::PClient.S2C_UpdateDiamod.Parser, new[]{ "Diamodnum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_UpdateCurrency), global::PClient.S2C_UpdateCurrency.Parser, new[]{ "Type", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_UseDiamod), global::PClient.C2S_UseDiamod.Parser, new[]{ "Num", "Event", "Params", "Goodsid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_UseDiamod), global::PClient.S2C_UseDiamod.Parser, new[]{ "Ret", "Num", "Event", "Params", "Goodsid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_WatchAdv), global::PClient.C2S_WatchAdv.Parser, new[]{ "Event", "Params" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_WatchAdv), global::PClient.S2C_WatchAdv.Parser, new[]{ "Event", "Params" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_SetNickName), global::PClient.C2S_SetNickName.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_SetNickName), global::PClient.S2C_SetNickName.Parser, new[]{ "Ret", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_SetHeadIcon), global::PClient.C2S_SetHeadIcon.Parser, new[]{ "Icon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_SetHeadIcon), global::PClient.S2C_SetHeadIcon.Parser, new[]{ "Ret", "Icon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_GetMailNew), global::PClient.C2S_GetMailNew.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_GetMailNew), global::PClient.S2C_GetMailNew.Parser, new[]{ "Newmail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_ShowMailList), global::PClient.C2S_ShowMailList.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_ShowMailList), global::PClient.S2C_ShowMailList.Parser, new[]{ "Maillist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_ReadMail), global::PClient.C2S_ReadMail.Parser, new[]{ "Mailid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_ReadMail), global::PClient.S2C_ReadMail.Parser, new[]{ "Ret", "Mailid", "Mailstate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_MailGetItem), global::PClient.C2S_MailGetItem.Parser, new[]{ "Mailid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_MailGetItem), global::PClient.S2C_MailGetItem.Parser, new[]{ "Ret", "Mailid", "Mailstate", "Cardlist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_MailDeleteRead), global::PClient.C2S_MailDeleteRead.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_MailDeleteRead), global::PClient.S2C_MailDeleteRead.Parser, new[]{ "Dellist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_MailAllRead), global::PClient.C2S_MailAllRead.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_MailAllRead), global::PClient.S2C_MailAllRead.Parser, new[]{ "Readlist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_ShowTeamCardList), global::PClient.C2S_ShowTeamCardList.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_ShowTeamCardList), global::PClient.S2C_ShowTeamCardList.Parser, new[]{ "Teamcardlist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_DrawCardInfo), global::PClient.C2S_DrawCardInfo.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_DrawCardInfo), global::PClient.S2C_DrawCardInfo.Parser, new[]{ "Drawfreetime", "Unlocktime", "Drawcountleaflet1", "Drawcountleaflet2", "Drawcountleaflet3", "Drawgainleaflet1", "Drawgainleaflet2", "Drawgainleaflet3", "Lefttime", "Leaflet2Sec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_DrawCard), global::PClient.C2S_DrawCard.Parser, new[]{ "Boxid", "Cardid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_DrawCard), global::PClient.S2C_DrawCard.Parser, new[]{ "Ret", "Boxid", "Cardid", "Rewards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_UpLevelCard), global::PClient.C2S_UpLevelCard.Parser, new[]{ "Cardid", "Cardlevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_UpLevelCard), global::PClient.S2C_UpLevelCard.Parser, new[]{ "Ret", "Cardid", "Cardlevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_ResetLevelCard), global::PClient.C2S_ResetLevelCard.Parser, new[]{ "Cardid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_ResetLevelCard), global::PClient.S2C_ResetLevelCard.Parser, new[]{ "Ret", "Cardid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_UpdateCard), global::PClient.C2S_UpdateCard.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_UpdateCard), global::PClient.S2C_UpdateCard.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_FundTaskFinish), global::PClient.C2S_FundTaskFinish.Parser, new[]{ "Taskid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_FundTaskFinish), global::PClient.S2C_FundTaskFinish.Parser, new[]{ "Ret", "Taskid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_GetFundTaskList), global::PClient.C2S_GetFundTaskList.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_GetFundTaskList), global::PClient.S2C_GetFundTaskList.Parser, new[]{ "Fundpass", "Fundlist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_PassInfo), global::PClient.C2S_PassInfo.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_PassInfo), global::PClient.S2C_PassInfo.Parser, new[]{ "Battlepasstime", "Battlepasscount", "Battlepassexp", "Battlepasslevel", "Battlepasscoin", "Battlepassspl", "Battlepasssgain", "Battlepassslimit" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_BuyPass), global::PClient.C2S_BuyPass.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_BuyPass), global::PClient.S2C_BuyPass.Parser, new[]{ "Ret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_GetPassItem), global::PClient.C2S_GetPassItem.Parser, new[]{ "Giftid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_GetPassItem), global::PClient.S2C_GetPassItem.Parser, new[]{ "Ret", "Giftid", "Rewards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_BuyPassShop), global::PClient.C2S_BuyPassShop.Parser, new[]{ "Giftid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_BuyPassShop), global::PClient.S2C_BuyPassShop.Parser, new[]{ "Ret", "Giftid", "Battlepassslimit" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_BuyPassLevel), global::PClient.C2S_BuyPassLevel.Parser, new[]{ "Levelid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_BuyPassLevel), global::PClient.S2C_BuyPassLevel.Parser, new[]{ "Ret", "Levelid", "Battlepasslevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_GetShopInfo), global::PClient.C2S_GetShopInfo.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_GetShopInfo), global::PClient.S2C_GetShopInfo.Parser, new[]{ "Curtime", "Dayrefreshtime", "Weekrefreshtime", "Monthrefreshtime", "Drawcardcount", "Firstgiftlist", "Daygiftlist", "Weekgiftlist", "Monthgiftlist", "Shoprancardlist" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_UpdateShopGift), global::PClient.S2C_UpdateShopGift.Parser, new[]{ "Giftinfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_GetMonthCardInfo), global::PClient.C2S_GetMonthCardInfo.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_GetMonthCardInfo), global::PClient.S2C_GetMonthCardInfo.Parser, new[]{ "Monthcardinfo", "Monthcardtime" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_GainMonthCardItem), global::PClient.C2S_GainMonthCardItem.Parser, new[]{ "Monthcardid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_GainMonthCardItem), global::PClient.S2C_GainMonthCardItem.Parser, new[]{ "Ret", "Monthcardid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_GainItemDaily), global::PClient.C2S_GainItemDaily.Parser, new[]{ "Taskid", "Vipcard" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_GainItemDaily), global::PClient.S2C_GainItemDaily.Parser, new[]{ "Ret", "Taskid", "Vipcard" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_TaskDaliyInfo), global::PClient.C2S_TaskDaliyInfo.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_TaskDaliyInfo), global::PClient.S2C_TaskDaliyInfo.Parser, new[]{ "Gainlist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_SevenLoginGet), global::PClient.C2S_SevenLoginGet.Parser, new[]{ "Day" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_SevenLoginGet), global::PClient.S2C_SevenLoginGet.Parser, new[]{ "Ret", "Day", "Rewards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_GainShare), global::PClient.C2S_GainShare.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_GainShare), global::PClient.S2C_GainShare.Parser, new[]{ "Ret", "Rewards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_GainLeafet2), global::PClient.C2S_GainLeafet2.Parser, new[]{ "Num", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_GainLeafet2), global::PClient.S2C_GainLeafet2.Parser, new[]{ "Ret", "Num", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_GetGiftInfo), global::PClient.C2S_GetGiftInfo.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_GetGiftInfo), global::PClient.S2C_GetGiftInfo.Parser, new[]{ "Type", "Giftlist" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_GetRandName), global::PClient.C2S_GetRandName.Parser, new[]{ "Playerdbid", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_GetRandName), global::PClient.S2C_GetRandName.Parser, new[]{ "Ret", "Namelist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_ClientUnlock), global::PClient.C2S_ClientUnlock.Parser, new[]{ "Unlockid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_ClientUnlock), global::PClient.S2C_ClientUnlock.Parser, new[]{ "Ret", "Unlockid", "Unlocktime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_GainDrawSumRewards), global::PClient.C2S_GainDrawSumRewards.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_GainDrawSumRewards), global::PClient.S2C_GainDrawSumRewards.Parser, new[]{ "Ret", "Id", "Rewards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_TimeTask), global::PClient.C2S_TimeTask.Parser, new[]{ "Taskid", "Vpcard", "Isdouble", "Timeout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_TimeTask), global::PClient.S2C_TimeTask.Parser, new[]{ "Ret", "Rewards", "Isdouble", "Timeout" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_GetRankList), global::PClient.C2S_GetRankList.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_GetRankList), global::PClient.S2C_GetRankList.Parser, new[]{ "Rankobjlist", "Rewardsec", "Rewardcount", "Rankclose", "Rewardfinalsec", "Rewardendsec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_JoinRankList), global::PClient.S2C_JoinRankList.Parser, new[]{ "Rankgroupid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_AreaStepReward), global::PClient.C2S_AreaStepReward.Parser, new[]{ "Taskid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_AreaStepReward), global::PClient.S2C_AreaStepReward.Parser, new[]{ "Ret", "Taskid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_IOSPayCheck), global::PClient.C2S_IOSPayCheck.Parser, new[]{ "Payid", "Paycode", "Platform", "Payorder", "Repair" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_IOSPayCheck), global::PClient.S2C_IOSPayCheck.Parser, new[]{ "Ret", "Payid", "Paytype", "Platform", "Payorder", "Repair", "Paycode", "Purchasetype" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_IOSPayFail), global::PClient.C2S_IOSPayFail.Parser, new[]{ "Account", "Payid", "Paycode", "Platform", "Payorder" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_IOSPayFail), global::PClient.S2C_IOSPayFail.Parser, new[]{ "Ret", "Account", "Payid", "Paycode", "Platform", "Payorder" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_IOSPayFree), global::PClient.C2S_IOSPayFree.Parser, new[]{ "Payid", "Platform" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_IOSPayFree), global::PClient.S2C_IOSPayFree.Parser, new[]{ "Ret", "Payid", "Paytype" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_PayNoUseToken), global::PClient.S2C_PayNoUseToken.Parser, new[]{ "Account", "Payorder", "Token", "Payid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_PayCheckOrder), global::PClient.C2S_PayCheckOrder.Parser, new[]{ "Payorder", "Payid", "Token", "Playerdbid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_PayCheckOrder), global::PClient.S2C_PayCheckOrder.Parser, new[]{ "Ret", "Payorder", "Payid", "Token" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_IOSPayCondition), global::PClient.C2S_IOSPayCondition.Parser, new[]{ "Payid", "Platform" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_IOSPayCondition), global::PClient.S2C_IOSPayCondition.Parser, new[]{ "Ret", "Payid", "Paytype" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_DeleteAcc), global::PClient.C2S_DeleteAcc.Parser, new[]{ "Account" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_DeleteAcc), global::PClient.S2C_DeleteAcc.Parser, new[]{ "Ret", "Account" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_SaveUpload), global::PClient.C2S_SaveUpload.Parser, new[]{ "Filename", "Data", "Datastr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_SaveUpload), global::PClient.S2C_SaveUpload.Parser, new[]{ "Ret", "Filename", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_SaveDownload), global::PClient.C2S_SaveDownload.Parser, new[]{ "Filename" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_SaveDownload), global::PClient.S2C_SaveDownload.Parser, new[]{ "Ret", "Filename", "Data", "Datastr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_UploadMainTask), global::PClient.C2S_UploadMainTask.Parser, new[]{ "Taskid", "Taskarg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_UploadMainTask), global::PClient.S2C_UploadMainTask.Parser, new[]{ "Ret", "Taskid", "Taskarg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_UploadBigTask), global::PClient.C2S_UploadBigTask.Parser, new[]{ "Taskid", "Taskarg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_UploadBigTask), global::PClient.S2C_UploadBigTask.Parser, new[]{ "Ret", "Taskid", "Taskarg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_UploadPlayerInfo), global::PClient.C2S_UploadPlayerInfo.Parser, new[]{ "Typeid", "Paramlist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_UploadPlayerInfo), global::PClient.S2C_UploadPlayerInfo.Parser, new[]{ "Ret", "Typeid", "Paramlist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_ChestData), global::PClient.C2S_ChestData.Parser, new[]{ "Type", "Param", "Playerdbid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_ChestData), global::PClient.S2C_ChestData.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_TestMsg), global::PClient.C2S_TestMsg.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_TestMsg), global::PClient.S2C_TestMsg.Parser, new[]{ "Ret" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_TestRecharge), global::PClient.C2S_TestRecharge.Parser, new[]{ "Type", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_TestRecharge), global::PClient.S2C_TestRecharge.Parser, new[]{ "Type", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_TestGetTeamCard), global::PClient.C2S_TestGetTeamCard.Parser, new[]{ "Cardid", "Cardnum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_TestGetTeamCard), global::PClient.S2C_TestGetTeamCard.Parser, new[]{ "Cardid", "Cardnum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_GetTaskList), global::PClient.C2S_GetTaskList.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_BackTaskList), global::PClient.S2C_BackTaskList.Parser, new[]{ "Type", "TaskList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.C2S_GetCounterList), global::PClient.C2S_GetCounterList.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PClient.S2C_BackCounterList), global::PClient.S2C_BackCounterList.Parser, new[]{ "CounterList" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///错误码 2000
  /// </summary>
  public sealed partial class S2C_ErrorCode : pb::IMessage<S2C_ErrorCode> {
    private static readonly pb::MessageParser<S2C_ErrorCode> _parser = new pb::MessageParser<S2C_ErrorCode>(() => new S2C_ErrorCode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ErrorCode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ErrorCode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ErrorCode(S2C_ErrorCode other) : this() {
      errcode_ = other.errcode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ErrorCode Clone() {
      return new S2C_ErrorCode(this);
    }

    /// <summary>Field number for the "errcode" field.</summary>
    public const int ErrcodeFieldNumber = 1;
    private int errcode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Errcode {
      get { return errcode_; }
      set {
        errcode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ErrorCode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ErrorCode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Errcode != other.Errcode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Errcode != 0) hash ^= Errcode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Errcode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Errcode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Errcode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Errcode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ErrorCode other) {
      if (other == null) {
        return;
      }
      if (other.Errcode != 0) {
        Errcode = other.Errcode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Errcode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MSG_CL2GT_SOCKETHIT         1999     //客户端心跳包
  /// </summary>
  public sealed partial class C2S_SocketHit : pb::IMessage<C2S_SocketHit> {
    private static readonly pb::MessageParser<C2S_SocketHit> _parser = new pb::MessageParser<C2S_SocketHit>(() => new C2S_SocketHit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_SocketHit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_SocketHit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_SocketHit(C2S_SocketHit other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_SocketHit Clone() {
      return new C2S_SocketHit(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_SocketHit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_SocketHit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_SocketHit other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///MSG_GT2CL_SOCKETHIT         2999     //客户端心跳包
  /// </summary>
  public sealed partial class S2C_SocketHit : pb::IMessage<S2C_SocketHit> {
    private static readonly pb::MessageParser<S2C_SocketHit> _parser = new pb::MessageParser<S2C_SocketHit>(() => new S2C_SocketHit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_SocketHit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SocketHit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SocketHit(S2C_SocketHit other) : this() {
      curtime_ = other.curtime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SocketHit Clone() {
      return new S2C_SocketHit(this);
    }

    /// <summary>Field number for the "curtime" field.</summary>
    public const int CurtimeFieldNumber = 1;
    private int curtime_;
    /// <summary>
    ///时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Curtime {
      get { return curtime_; }
      set {
        curtime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_SocketHit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_SocketHit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Curtime != other.Curtime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Curtime != 0) hash ^= Curtime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Curtime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Curtime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Curtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Curtime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_SocketHit other) {
      if (other == null) {
        return;
      }
      if (other.Curtime != 0) {
        Curtime = other.Curtime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Curtime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///准备关闭服务器
  /// </summary>
  public sealed partial class S2C_ShutDwon : pb::IMessage<S2C_ShutDwon> {
    private static readonly pb::MessageParser<S2C_ShutDwon> _parser = new pb::MessageParser<S2C_ShutDwon>(() => new S2C_ShutDwon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ShutDwon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ShutDwon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ShutDwon(S2C_ShutDwon other) : this() {
      leftsec_ = other.leftsec_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ShutDwon Clone() {
      return new S2C_ShutDwon(this);
    }

    /// <summary>Field number for the "leftsec" field.</summary>
    public const int LeftsecFieldNumber = 1;
    private int leftsec_;
    /// <summary>
    ///倒计时秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Leftsec {
      get { return leftsec_; }
      set {
        leftsec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ShutDwon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ShutDwon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Leftsec != other.Leftsec) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Leftsec != 0) hash ^= Leftsec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Leftsec != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Leftsec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Leftsec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leftsec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ShutDwon other) {
      if (other == null) {
        return;
      }
      if (other.Leftsec != 0) {
        Leftsec = other.Leftsec;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Leftsec = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///你的帐号在另外设备登录，被踢下线
  /// </summary>
  public sealed partial class S2C_ReloginKick : pb::IMessage<S2C_ReloginKick> {
    private static readonly pb::MessageParser<S2C_ReloginKick> _parser = new pb::MessageParser<S2C_ReloginKick>(() => new S2C_ReloginKick());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ReloginKick> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ReloginKick() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ReloginKick(S2C_ReloginKick other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ReloginKick Clone() {
      return new S2C_ReloginKick(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ReloginKick);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ReloginKick other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ReloginKick other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///MSG_CL2LN_LOGINACCOUNT          = 1011,     //账号登陆
  /// </summary>
  public sealed partial class C2S_Login : pb::IMessage<C2S_Login> {
    private static readonly pb::MessageParser<C2S_Login> _parser = new pb::MessageParser<C2S_Login>(() => new C2S_Login());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_Login> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_Login() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_Login(C2S_Login other) : this() {
      account_ = other.account_;
      passwd_ = other.passwd_;
      version_ = other.version_;
      headicon_ = other.headicon_;
      guest_ = other.guest_;
      reconn_ = other.reconn_;
      platform_ = other.platform_;
      country_ = other.country_;
      sign_ = other.sign_;
      time_ = other.time_;
      token_ = other.token_;
      mail_ = other.mail_;
      acctype_ = other.acctype_;
      born_ = other.born_;
      address_ = other.address_;
      phoneuid_ = other.phoneuid_;
      nickname_ = other.nickname_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_Login Clone() {
      return new C2S_Login(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    ///登录账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passwd" field.</summary>
    public const int PasswdFieldNumber = 2;
    private string passwd_ = "";
    /// <summary>
    ///用户密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Passwd {
      get { return passwd_; }
      set {
        passwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private string version_ = "";
    /// <summary>
    ///版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headicon" field.</summary>
    public const int HeadiconFieldNumber = 4;
    private string headicon_ = "";
    /// <summary>
    ///用户头像Url
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Headicon {
      get { return headicon_; }
      set {
        headicon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "guest" field.</summary>
    public const int GuestFieldNumber = 5;
    private int guest_;
    /// <summary>
    ///1游客 0非游客 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Guest {
      get { return guest_; }
      set {
        guest_ = value;
      }
    }

    /// <summary>Field number for the "reconn" field.</summary>
    public const int ReconnFieldNumber = 6;
    private int reconn_;
    /// <summary>
    ///断线重连
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reconn {
      get { return reconn_; }
      set {
        reconn_ = value;
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 11;
    private string platform_ = "";
    /// <summary>
    ///平台ios,android
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country" field.</summary>
    public const int CountryFieldNumber = 12;
    private string country_ = "";
    /// <summary>
    ///国家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Country {
      get { return country_; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sign" field.</summary>
    public const int SignFieldNumber = 13;
    private string sign_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sign {
      get { return sign_; }
      set {
        sign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 14;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 15;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mail" field.</summary>
    public const int MailFieldNumber = 16;
    private string mail_ = "";
    /// <summary>
    ///邮箱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mail {
      get { return mail_; }
      set {
        mail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "acctype" field.</summary>
    public const int AcctypeFieldNumber = 17;
    private string acctype_ = "";
    /// <summary>
    ///登录的账号种类，google，facbook，gamecenter等等
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Acctype {
      get { return acctype_; }
      set {
        acctype_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "born" field.</summary>
    public const int BornFieldNumber = 21;
    private string born_ = "";
    /// <summary>
    ///生日
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Born {
      get { return born_; }
      set {
        born_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 22;
    private string address_ = "";
    /// <summary>
    ///住址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "phoneuid" field.</summary>
    public const int PhoneuidFieldNumber = 23;
    private string phoneuid_ = "";
    /// <summary>
    ///手机唯一标识符
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Phoneuid {
      get { return phoneuid_; }
      set {
        phoneuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 24;
    private string nickname_ = "";
    /// <summary>
    ///昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_Login);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_Login other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Passwd != other.Passwd) return false;
      if (Version != other.Version) return false;
      if (Headicon != other.Headicon) return false;
      if (Guest != other.Guest) return false;
      if (Reconn != other.Reconn) return false;
      if (Platform != other.Platform) return false;
      if (Country != other.Country) return false;
      if (Sign != other.Sign) return false;
      if (Time != other.Time) return false;
      if (Token != other.Token) return false;
      if (Mail != other.Mail) return false;
      if (Acctype != other.Acctype) return false;
      if (Born != other.Born) return false;
      if (Address != other.Address) return false;
      if (Phoneuid != other.Phoneuid) return false;
      if (Nickname != other.Nickname) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Passwd.Length != 0) hash ^= Passwd.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Headicon.Length != 0) hash ^= Headicon.GetHashCode();
      if (Guest != 0) hash ^= Guest.GetHashCode();
      if (Reconn != 0) hash ^= Reconn.GetHashCode();
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (Sign.Length != 0) hash ^= Sign.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (Mail.Length != 0) hash ^= Mail.GetHashCode();
      if (Acctype.Length != 0) hash ^= Acctype.GetHashCode();
      if (Born.Length != 0) hash ^= Born.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Phoneuid.Length != 0) hash ^= Phoneuid.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Passwd.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Passwd);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Version);
      }
      if (Headicon.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Headicon);
      }
      if (Guest != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Guest);
      }
      if (Reconn != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Reconn);
      }
      if (Platform.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Platform);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Country);
      }
      if (Sign.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Sign);
      }
      if (Time != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Time);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Token);
      }
      if (Mail.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Mail);
      }
      if (Acctype.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Acctype);
      }
      if (Born.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(Born);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Address);
      }
      if (Phoneuid.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(Phoneuid);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(Nickname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Passwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passwd);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Headicon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Headicon);
      }
      if (Guest != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Guest);
      }
      if (Reconn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reconn);
      }
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (Sign.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sign);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (Mail.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Mail);
      }
      if (Acctype.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Acctype);
      }
      if (Born.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Born);
      }
      if (Address.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Phoneuid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Phoneuid);
      }
      if (Nickname.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_Login other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Passwd.Length != 0) {
        Passwd = other.Passwd;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Headicon.Length != 0) {
        Headicon = other.Headicon;
      }
      if (other.Guest != 0) {
        Guest = other.Guest;
      }
      if (other.Reconn != 0) {
        Reconn = other.Reconn;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      if (other.Sign.Length != 0) {
        Sign = other.Sign;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.Mail.Length != 0) {
        Mail = other.Mail;
      }
      if (other.Acctype.Length != 0) {
        Acctype = other.Acctype;
      }
      if (other.Born.Length != 0) {
        Born = other.Born;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Phoneuid.Length != 0) {
        Phoneuid = other.Phoneuid;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Passwd = input.ReadString();
            break;
          }
          case 26: {
            Version = input.ReadString();
            break;
          }
          case 34: {
            Headicon = input.ReadString();
            break;
          }
          case 40: {
            Guest = input.ReadInt32();
            break;
          }
          case 48: {
            Reconn = input.ReadInt32();
            break;
          }
          case 90: {
            Platform = input.ReadString();
            break;
          }
          case 98: {
            Country = input.ReadString();
            break;
          }
          case 106: {
            Sign = input.ReadString();
            break;
          }
          case 112: {
            Time = input.ReadInt32();
            break;
          }
          case 122: {
            Token = input.ReadString();
            break;
          }
          case 130: {
            Mail = input.ReadString();
            break;
          }
          case 138: {
            Acctype = input.ReadString();
            break;
          }
          case 170: {
            Born = input.ReadString();
            break;
          }
          case 178: {
            Address = input.ReadString();
            break;
          }
          case 186: {
            Phoneuid = input.ReadString();
            break;
          }
          case 194: {
            Nickname = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MSG_LN2CL_GATEIPANDPORT         = 2011,     //成功登陆返回gate链接信息
  /// </summary>
  public sealed partial class S2C_Login : pb::IMessage<S2C_Login> {
    private static readonly pb::MessageParser<S2C_Login> _parser = new pb::MessageParser<S2C_Login>(() => new S2C_Login());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_Login> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_Login() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_Login(S2C_Login other) : this() {
      account_ = other.account_;
      accdbid_ = other.accdbid_;
      sign_ = other.sign_;
      gateip_ = other.gateip_;
      gateport_ = other.gateport_;
      time_ = other.time_;
      acccode_ = other.acccode_;
      ret_ = other.ret_;
      retarg_ = other.retarg_;
      upsavetime_ = other.upsavetime_;
      newuser_ = other.newuser_;
      startmin_ = other.startmin_;
      plataccount_ = other.plataccount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_Login Clone() {
      return new S2C_Login(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    ///游戏帐号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accdbid" field.</summary>
    public const int AccdbidFieldNumber = 2;
    private int accdbid_;
    /// <summary>
    ///帐号dbid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Accdbid {
      get { return accdbid_; }
      set {
        accdbid_ = value;
      }
    }

    /// <summary>Field number for the "sign" field.</summary>
    public const int SignFieldNumber = 3;
    private string sign_ = "";
    /// <summary>
    ///签名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sign {
      get { return sign_; }
      set {
        sign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gateip" field.</summary>
    public const int GateipFieldNumber = 4;
    private string gateip_ = "";
    /// <summary>
    ///服务器地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Gateip {
      get { return gateip_; }
      set {
        gateip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gateport" field.</summary>
    public const int GateportFieldNumber = 5;
    private int gateport_;
    /// <summary>
    ///服务器端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gateport {
      get { return gateport_; }
      set {
        gateport_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 6;
    private int time_;
    /// <summary>
    ///登录时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "acccode" field.</summary>
    public const int AcccodeFieldNumber = 7;
    private string acccode_ = "";
    /// <summary>
    ///账号绑定加密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Acccode {
      get { return acccode_; }
      set {
        acccode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 8;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "retarg" field.</summary>
    public const int RetargFieldNumber = 9;
    private int retarg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Retarg {
      get { return retarg_; }
      set {
        retarg_ = value;
      }
    }

    /// <summary>Field number for the "upsavetime" field.</summary>
    public const int UpsavetimeFieldNumber = 10;
    private int upsavetime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Upsavetime {
      get { return upsavetime_; }
      set {
        upsavetime_ = value;
      }
    }

    /// <summary>Field number for the "newuser" field.</summary>
    public const int NewuserFieldNumber = 11;
    private bool newuser_;
    /// <summary>
    ///新账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Newuser {
      get { return newuser_; }
      set {
        newuser_ = value;
      }
    }

    /// <summary>Field number for the "startmin" field.</summary>
    public const int StartminFieldNumber = 12;
    private int startmin_;
    /// <summary>
    ///服务器还有少分钟开启登录  0为已经开启
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Startmin {
      get { return startmin_; }
      set {
        startmin_ = value;
      }
    }

    /// <summary>Field number for the "plataccount" field.</summary>
    public const int PlataccountFieldNumber = 13;
    private string plataccount_ = "";
    /// <summary>
    ///平台账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Plataccount {
      get { return plataccount_; }
      set {
        plataccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_Login);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_Login other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Accdbid != other.Accdbid) return false;
      if (Sign != other.Sign) return false;
      if (Gateip != other.Gateip) return false;
      if (Gateport != other.Gateport) return false;
      if (Time != other.Time) return false;
      if (Acccode != other.Acccode) return false;
      if (Ret != other.Ret) return false;
      if (Retarg != other.Retarg) return false;
      if (Upsavetime != other.Upsavetime) return false;
      if (Newuser != other.Newuser) return false;
      if (Startmin != other.Startmin) return false;
      if (Plataccount != other.Plataccount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Accdbid != 0) hash ^= Accdbid.GetHashCode();
      if (Sign.Length != 0) hash ^= Sign.GetHashCode();
      if (Gateip.Length != 0) hash ^= Gateip.GetHashCode();
      if (Gateport != 0) hash ^= Gateport.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (Acccode.Length != 0) hash ^= Acccode.GetHashCode();
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Retarg != 0) hash ^= Retarg.GetHashCode();
      if (Upsavetime != 0) hash ^= Upsavetime.GetHashCode();
      if (Newuser != false) hash ^= Newuser.GetHashCode();
      if (Startmin != 0) hash ^= Startmin.GetHashCode();
      if (Plataccount.Length != 0) hash ^= Plataccount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Accdbid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Accdbid);
      }
      if (Sign.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Sign);
      }
      if (Gateip.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Gateip);
      }
      if (Gateport != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Gateport);
      }
      if (Time != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Time);
      }
      if (Acccode.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Acccode);
      }
      if (Ret != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Ret);
      }
      if (Retarg != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Retarg);
      }
      if (Upsavetime != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Upsavetime);
      }
      if (Newuser != false) {
        output.WriteRawTag(88);
        output.WriteBool(Newuser);
      }
      if (Startmin != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Startmin);
      }
      if (Plataccount.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Plataccount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Accdbid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Accdbid);
      }
      if (Sign.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sign);
      }
      if (Gateip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gateip);
      }
      if (Gateport != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gateport);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (Acccode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Acccode);
      }
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Retarg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Retarg);
      }
      if (Upsavetime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Upsavetime);
      }
      if (Newuser != false) {
        size += 1 + 1;
      }
      if (Startmin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Startmin);
      }
      if (Plataccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Plataccount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_Login other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Accdbid != 0) {
        Accdbid = other.Accdbid;
      }
      if (other.Sign.Length != 0) {
        Sign = other.Sign;
      }
      if (other.Gateip.Length != 0) {
        Gateip = other.Gateip;
      }
      if (other.Gateport != 0) {
        Gateport = other.Gateport;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.Acccode.Length != 0) {
        Acccode = other.Acccode;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Retarg != 0) {
        Retarg = other.Retarg;
      }
      if (other.Upsavetime != 0) {
        Upsavetime = other.Upsavetime;
      }
      if (other.Newuser != false) {
        Newuser = other.Newuser;
      }
      if (other.Startmin != 0) {
        Startmin = other.Startmin;
      }
      if (other.Plataccount.Length != 0) {
        Plataccount = other.Plataccount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 16: {
            Accdbid = input.ReadInt32();
            break;
          }
          case 26: {
            Sign = input.ReadString();
            break;
          }
          case 34: {
            Gateip = input.ReadString();
            break;
          }
          case 40: {
            Gateport = input.ReadInt32();
            break;
          }
          case 48: {
            Time = input.ReadInt32();
            break;
          }
          case 58: {
            Acccode = input.ReadString();
            break;
          }
          case 64: {
            Ret = input.ReadInt32();
            break;
          }
          case 72: {
            Retarg = input.ReadInt32();
            break;
          }
          case 80: {
            Upsavetime = input.ReadInt32();
            break;
          }
          case 88: {
            Newuser = input.ReadBool();
            break;
          }
          case 96: {
            Startmin = input.ReadInt32();
            break;
          }
          case 106: {
            Plataccount = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MSG_CL2GT_LOGINGATE             = 1012,     //连接网关gate验证签名
  /// </summary>
  public sealed partial class C2S_LoginGate : pb::IMessage<C2S_LoginGate> {
    private static readonly pb::MessageParser<C2S_LoginGate> _parser = new pb::MessageParser<C2S_LoginGate>(() => new C2S_LoginGate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_LoginGate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_LoginGate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_LoginGate(C2S_LoginGate other) : this() {
      account_ = other.account_;
      name_ = other.name_;
      accdbid_ = other.accdbid_;
      sign_ = other.sign_;
      time_ = other.time_;
      version_ = other.version_;
      reconn_ = other.reconn_;
      downsave_ = other.downsave_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_LoginGate Clone() {
      return new C2S_LoginGate(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    ///账号用户唯一标识。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///用户昵称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accdbid" field.</summary>
    public const int AccdbidFieldNumber = 3;
    private int accdbid_;
    /// <summary>
    ///账号dbid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Accdbid {
      get { return accdbid_; }
      set {
        accdbid_ = value;
      }
    }

    /// <summary>Field number for the "sign" field.</summary>
    public const int SignFieldNumber = 4;
    private string sign_ = "";
    /// <summary>
    ///签名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sign {
      get { return sign_; }
      set {
        sign_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 5;
    private int time_;
    /// <summary>
    ///登录时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 6;
    private string version_ = "";
    /// <summary>
    ///版本号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reconn" field.</summary>
    public const int ReconnFieldNumber = 7;
    private int reconn_;
    /// <summary>
    ///断线重连
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reconn {
      get { return reconn_; }
      set {
        reconn_ = value;
      }
    }

    /// <summary>Field number for the "downsave" field.</summary>
    public const int DownsaveFieldNumber = 9;
    private int downsave_;
    /// <summary>
    ///拉取全部存档
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Downsave {
      get { return downsave_; }
      set {
        downsave_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_LoginGate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_LoginGate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Name != other.Name) return false;
      if (Accdbid != other.Accdbid) return false;
      if (Sign != other.Sign) return false;
      if (Time != other.Time) return false;
      if (Version != other.Version) return false;
      if (Reconn != other.Reconn) return false;
      if (Downsave != other.Downsave) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Accdbid != 0) hash ^= Accdbid.GetHashCode();
      if (Sign.Length != 0) hash ^= Sign.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Reconn != 0) hash ^= Reconn.GetHashCode();
      if (Downsave != 0) hash ^= Downsave.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Accdbid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Accdbid);
      }
      if (Sign.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Sign);
      }
      if (Time != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Time);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Version);
      }
      if (Reconn != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Reconn);
      }
      if (Downsave != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Downsave);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Accdbid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Accdbid);
      }
      if (Sign.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sign);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Reconn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reconn);
      }
      if (Downsave != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Downsave);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_LoginGate other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Accdbid != 0) {
        Accdbid = other.Accdbid;
      }
      if (other.Sign.Length != 0) {
        Sign = other.Sign;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Reconn != 0) {
        Reconn = other.Reconn;
      }
      if (other.Downsave != 0) {
        Downsave = other.Downsave;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Accdbid = input.ReadInt32();
            break;
          }
          case 34: {
            Sign = input.ReadString();
            break;
          }
          case 40: {
            Time = input.ReadInt32();
            break;
          }
          case 50: {
            Version = input.ReadString();
            break;
          }
          case 56: {
            Reconn = input.ReadInt32();
            break;
          }
          case 72: {
            Downsave = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MSG_LG2CL_LOGINGATE      = 2012,     //登录网关返回
  /// </summary>
  public sealed partial class S2C_LoginGate : pb::IMessage<S2C_LoginGate> {
    private static readonly pb::MessageParser<S2C_LoginGate> _parser = new pb::MessageParser<S2C_LoginGate>(() => new S2C_LoginGate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_LoginGate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LoginGate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LoginGate(S2C_LoginGate other) : this() {
      account_ = other.account_;
      accdbid_ = other.accdbid_;
      roleid_ = other.roleid_;
      ip_ = other.ip_;
      headicon_ = other.headicon_;
      reconn_ = other.reconn_;
      firstlogin_ = other.firstlogin_;
      curtime_ = other.curtime_;
      dayRefresh_ = other.dayRefresh_;
      nickname_ = other.nickname_;
      ret_ = other.ret_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LoginGate Clone() {
      return new S2C_LoginGate(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    ///账号名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accdbid" field.</summary>
    public const int AccdbidFieldNumber = 2;
    private int accdbid_;
    /// <summary>
    ///账号id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Accdbid {
      get { return accdbid_; }
      set {
        accdbid_ = value;
      }
    }

    /// <summary>Field number for the "roleid" field.</summary>
    public const int RoleidFieldNumber = 3;
    private int roleid_;
    /// <summary>
    ///角色id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Roleid {
      get { return roleid_; }
      set {
        roleid_ = value;
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 4;
    private string ip_ = "";
    /// <summary>
    ///ip地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "headicon" field.</summary>
    public const int HeadiconFieldNumber = 5;
    private string headicon_ = "";
    /// <summary>
    ///头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Headicon {
      get { return headicon_; }
      set {
        headicon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reconn" field.</summary>
    public const int ReconnFieldNumber = 6;
    private int reconn_;
    /// <summary>
    ///断线重连
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reconn {
      get { return reconn_; }
      set {
        reconn_ = value;
      }
    }

    /// <summary>Field number for the "firstlogin" field.</summary>
    public const int FirstloginFieldNumber = 9;
    private bool firstlogin_;
    /// <summary>
    ///第一次登录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Firstlogin {
      get { return firstlogin_; }
      set {
        firstlogin_ = value;
      }
    }

    /// <summary>Field number for the "curtime" field.</summary>
    public const int CurtimeFieldNumber = 10;
    private int curtime_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Curtime {
      get { return curtime_; }
      set {
        curtime_ = value;
      }
    }

    /// <summary>Field number for the "dayRefresh" field.</summary>
    public const int DayRefreshFieldNumber = 11;
    private bool dayRefresh_;
    /// <summary>
    ///隔天刷新
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DayRefresh {
      get { return dayRefresh_; }
      set {
        dayRefresh_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 12;
    private string nickname_ = "";
    /// <summary>
    ///昵称名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 13;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_LoginGate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_LoginGate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Accdbid != other.Accdbid) return false;
      if (Roleid != other.Roleid) return false;
      if (Ip != other.Ip) return false;
      if (Headicon != other.Headicon) return false;
      if (Reconn != other.Reconn) return false;
      if (Firstlogin != other.Firstlogin) return false;
      if (Curtime != other.Curtime) return false;
      if (DayRefresh != other.DayRefresh) return false;
      if (Nickname != other.Nickname) return false;
      if (Ret != other.Ret) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Accdbid != 0) hash ^= Accdbid.GetHashCode();
      if (Roleid != 0) hash ^= Roleid.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Headicon.Length != 0) hash ^= Headicon.GetHashCode();
      if (Reconn != 0) hash ^= Reconn.GetHashCode();
      if (Firstlogin != false) hash ^= Firstlogin.GetHashCode();
      if (Curtime != 0) hash ^= Curtime.GetHashCode();
      if (DayRefresh != false) hash ^= DayRefresh.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Accdbid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Accdbid);
      }
      if (Roleid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Roleid);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Ip);
      }
      if (Headicon.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Headicon);
      }
      if (Reconn != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Reconn);
      }
      if (Firstlogin != false) {
        output.WriteRawTag(72);
        output.WriteBool(Firstlogin);
      }
      if (Curtime != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Curtime);
      }
      if (DayRefresh != false) {
        output.WriteRawTag(88);
        output.WriteBool(DayRefresh);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Nickname);
      }
      if (Ret != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Ret);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Accdbid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Accdbid);
      }
      if (Roleid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Roleid);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Headicon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Headicon);
      }
      if (Reconn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reconn);
      }
      if (Firstlogin != false) {
        size += 1 + 1;
      }
      if (Curtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Curtime);
      }
      if (DayRefresh != false) {
        size += 1 + 1;
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_LoginGate other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Accdbid != 0) {
        Accdbid = other.Accdbid;
      }
      if (other.Roleid != 0) {
        Roleid = other.Roleid;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Headicon.Length != 0) {
        Headicon = other.Headicon;
      }
      if (other.Reconn != 0) {
        Reconn = other.Reconn;
      }
      if (other.Firstlogin != false) {
        Firstlogin = other.Firstlogin;
      }
      if (other.Curtime != 0) {
        Curtime = other.Curtime;
      }
      if (other.DayRefresh != false) {
        DayRefresh = other.DayRefresh;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 16: {
            Accdbid = input.ReadInt32();
            break;
          }
          case 24: {
            Roleid = input.ReadInt32();
            break;
          }
          case 34: {
            Ip = input.ReadString();
            break;
          }
          case 42: {
            Headicon = input.ReadString();
            break;
          }
          case 48: {
            Reconn = input.ReadInt32();
            break;
          }
          case 72: {
            Firstlogin = input.ReadBool();
            break;
          }
          case 80: {
            Curtime = input.ReadInt32();
            break;
          }
          case 88: {
            DayRefresh = input.ReadBool();
            break;
          }
          case 98: {
            Nickname = input.ReadString();
            break;
          }
          case 104: {
            Ret = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_LG2CL_LOGINROLEDATA               = 2013      --返回登录基本数据
  /// </summary>
  public sealed partial class S2C_LoginRoleData : pb::IMessage<S2C_LoginRoleData> {
    private static readonly pb::MessageParser<S2C_LoginRoleData> _parser = new pb::MessageParser<S2C_LoginRoleData>(() => new S2C_LoginRoleData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_LoginRoleData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LoginRoleData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LoginRoleData(S2C_LoginRoleData other) : this() {
      reconn_ = other.reconn_;
      diamond_ = other.diamond_;
      newmail_ = other.newmail_;
      drawcardcount_ = other.drawcardcount_;
      leaflet2_ = other.leaflet2_;
      leaflet3_ = other.leaflet3_;
      teamcardlist_ = other.teamcardlist_.Clone();
      firstgiftlist_ = other.firstgiftlist_.Clone();
      randomcardlist_ = other.randomcardlist_.Clone();
      randomcardcount_ = other.randomcardcount_;
      sevenlogin_ = other.sevenlogin_;
      sevengain_ = other.sevengain_;
      monthcardinfo_ = other.monthcardinfo_.Clone();
      paylevel_ = other.paylevel_;
      activegitflist_ = other.activegitflist_.Clone();
      bigtasklist_ = other.bigtasklist_.Clone();
      zerotime_ = other.zerotime_;
      rankgroupid_ = other.rankgroupid_;
      areasteplist_ = other.areasteplist_.Clone();
      headicon_ = other.headicon_;
      battlepasstime_ = other.battlepasstime_;
      battlepasscount_ = other.battlepasscount_;
      battlepassexp_ = other.battlepassexp_;
      battlepasslevel_ = other.battlepasslevel_;
      battlepasscoin_ = other.battlepasscoin_;
      battlepassspl_ = other.battlepassspl_;
      battlepasssgain_ = other.battlepasssgain_.Clone();
      battlepassslimit_ = other.battlepassslimit_.Clone();
      gameshare_ = other.gameshare_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_LoginRoleData Clone() {
      return new S2C_LoginRoleData(this);
    }

    /// <summary>Field number for the "reconn" field.</summary>
    public const int ReconnFieldNumber = 1;
    private int reconn_;
    /// <summary>
    ///断线重连
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reconn {
      get { return reconn_; }
      set {
        reconn_ = value;
      }
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int DiamondFieldNumber = 2;
    private int diamond_;
    /// <summary>
    ///钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "newmail" field.</summary>
    public const int NewmailFieldNumber = 3;
    private bool newmail_;
    /// <summary>
    ///新邮件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Newmail {
      get { return newmail_; }
      set {
        newmail_ = value;
      }
    }

    /// <summary>Field number for the "drawcardcount" field.</summary>
    public const int DrawcardcountFieldNumber = 4;
    private int drawcardcount_;
    /// <summary>
    ///总抽卡次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Drawcardcount {
      get { return drawcardcount_; }
      set {
        drawcardcount_ = value;
      }
    }

    /// <summary>Field number for the "leaflet2" field.</summary>
    public const int Leaflet2FieldNumber = 5;
    private int leaflet2_;
    /// <summary>
    /// 报纸
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Leaflet2 {
      get { return leaflet2_; }
      set {
        leaflet2_ = value;
      }
    }

    /// <summary>Field number for the "leaflet3" field.</summary>
    public const int Leaflet3FieldNumber = 6;
    private int leaflet3_;
    /// <summary>
    /// 收音机
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Leaflet3 {
      get { return leaflet3_; }
      set {
        leaflet3_ = value;
      }
    }

    /// <summary>Field number for the "teamcardlist" field.</summary>
    public const int TeamcardlistFieldNumber = 11;
    private static readonly pb::FieldCodec<global::PBase.PB_TeamCardInfo> _repeated_teamcardlist_codec
        = pb::FieldCodec.ForMessage(90, global::PBase.PB_TeamCardInfo.Parser);
    private readonly pbc::RepeatedField<global::PBase.PB_TeamCardInfo> teamcardlist_ = new pbc::RepeatedField<global::PBase.PB_TeamCardInfo>();
    /// <summary>
    ///卡牌信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PBase.PB_TeamCardInfo> Teamcardlist {
      get { return teamcardlist_; }
    }

    /// <summary>Field number for the "firstgiftlist" field.</summary>
    public const int FirstgiftlistFieldNumber = 12;
    private static readonly pbc::MapField<int, global::PBase.PB_GiftPack>.Codec _map_firstgiftlist_codec
        = new pbc::MapField<int, global::PBase.PB_GiftPack>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::PBase.PB_GiftPack.Parser), 98);
    private readonly pbc::MapField<int, global::PBase.PB_GiftPack> firstgiftlist_ = new pbc::MapField<int, global::PBase.PB_GiftPack>();
    /// <summary>
    ///礼包信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::PBase.PB_GiftPack> Firstgiftlist {
      get { return firstgiftlist_; }
    }

    /// <summary>Field number for the "randomcardlist" field.</summary>
    public const int RandomcardlistFieldNumber = 13;
    private static readonly pb::FieldCodec<int> _repeated_randomcardlist_codec
        = pb::FieldCodec.ForInt32(106);
    private readonly pbc::RepeatedField<int> randomcardlist_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///每日5张随机卡牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Randomcardlist {
      get { return randomcardlist_; }
    }

    /// <summary>Field number for the "randomcardcount" field.</summary>
    public const int RandomcardcountFieldNumber = 14;
    private int randomcardcount_;
    /// <summary>
    ///随机卡牌次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Randomcardcount {
      get { return randomcardcount_; }
      set {
        randomcardcount_ = value;
      }
    }

    /// <summary>Field number for the "sevenlogin" field.</summary>
    public const int SevenloginFieldNumber = 15;
    private int sevenlogin_;
    /// <summary>
    ///七天领取天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sevenlogin {
      get { return sevenlogin_; }
      set {
        sevenlogin_ = value;
      }
    }

    /// <summary>Field number for the "sevengain" field.</summary>
    public const int SevengainFieldNumber = 16;
    private bool sevengain_;
    /// <summary>
    ///七天能否领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Sevengain {
      get { return sevengain_; }
      set {
        sevengain_ = value;
      }
    }

    /// <summary>Field number for the "monthcardinfo" field.</summary>
    public const int MonthcardinfoFieldNumber = 17;
    private static readonly pbc::MapField<int, int>.Codec _map_monthcardinfo_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 138);
    private readonly pbc::MapField<int, int> monthcardinfo_ = new pbc::MapField<int, int>();
    /// <summary>
    ///月卡信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Monthcardinfo {
      get { return monthcardinfo_; }
    }

    /// <summary>Field number for the "paylevel" field.</summary>
    public const int PaylevelFieldNumber = 18;
    private int paylevel_;
    /// <summary>
    ///充值水平 1小r 2中r 3大r
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Paylevel {
      get { return paylevel_; }
      set {
        paylevel_ = value;
      }
    }

    /// <summary>Field number for the "activegitflist" field.</summary>
    public const int ActivegitflistFieldNumber = 19;
    private static readonly pbc::MapField<int, global::PBase.PB_GiftPack>.Codec _map_activegitflist_codec
        = new pbc::MapField<int, global::PBase.PB_GiftPack>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::PBase.PB_GiftPack.Parser), 154);
    private readonly pbc::MapField<int, global::PBase.PB_GiftPack> activegitflist_ = new pbc::MapField<int, global::PBase.PB_GiftPack>();
    /// <summary>
    ///   --活动礼包 { 1配置id 2时间 3购买次数 }
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::PBase.PB_GiftPack> Activegitflist {
      get { return activegitflist_; }
    }

    /// <summary>Field number for the "bigtasklist" field.</summary>
    public const int BigtasklistFieldNumber = 20;
    private static readonly pb::FieldCodec<int> _repeated_bigtasklist_codec
        = pb::FieldCodec.ForInt32(162);
    private readonly pbc::RepeatedField<int> bigtasklist_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///成就任务列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Bigtasklist {
      get { return bigtasklist_; }
    }

    /// <summary>Field number for the "zerotime" field.</summary>
    public const int ZerotimeFieldNumber = 21;
    private int zerotime_;
    /// <summary>
    /// 当天的零点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Zerotime {
      get { return zerotime_; }
      set {
        zerotime_ = value;
      }
    }

    /// <summary>Field number for the "rankgroupid" field.</summary>
    public const int RankgroupidFieldNumber = 22;
    private string rankgroupid_ = "";
    /// <summary>
    ///排行榜id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Rankgroupid {
      get { return rankgroupid_; }
      set {
        rankgroupid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "areasteplist" field.</summary>
    public const int AreasteplistFieldNumber = 23;
    private static readonly pb::FieldCodec<int> _repeated_areasteplist_codec
        = pb::FieldCodec.ForInt32(186);
    private readonly pbc::RepeatedField<int> areasteplist_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///竞技场阶段奖励列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Areasteplist {
      get { return areasteplist_; }
    }

    /// <summary>Field number for the "headicon" field.</summary>
    public const int HeadiconFieldNumber = 24;
    private string headicon_ = "";
    /// <summary>
    ///头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Headicon {
      get { return headicon_; }
      set {
        headicon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "battlepasstime" field.</summary>
    public const int BattlepasstimeFieldNumber = 30;
    private int battlepasstime_;
    /// <summary>
    ///通行证时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Battlepasstime {
      get { return battlepasstime_; }
      set {
        battlepasstime_ = value;
      }
    }

    /// <summary>Field number for the "battlepasscount" field.</summary>
    public const int BattlepasscountFieldNumber = 31;
    private int battlepasscount_;
    /// <summary>
    ///通行证周期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Battlepasscount {
      get { return battlepasscount_; }
      set {
        battlepasscount_ = value;
      }
    }

    /// <summary>Field number for the "battlepassexp" field.</summary>
    public const int BattlepassexpFieldNumber = 32;
    private int battlepassexp_;
    /// <summary>
    ///通行证经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Battlepassexp {
      get { return battlepassexp_; }
      set {
        battlepassexp_ = value;
      }
    }

    /// <summary>Field number for the "battlepasslevel" field.</summary>
    public const int BattlepasslevelFieldNumber = 33;
    private int battlepasslevel_;
    /// <summary>
    /// 通行证等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Battlepasslevel {
      get { return battlepasslevel_; }
      set {
        battlepasslevel_ = value;
      }
    }

    /// <summary>Field number for the "battlepasscoin" field.</summary>
    public const int BattlepasscoinFieldNumber = 34;
    private int battlepasscoin_;
    /// <summary>
    ///通行证货币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Battlepasscoin {
      get { return battlepasscoin_; }
      set {
        battlepasscoin_ = value;
      }
    }

    /// <summary>Field number for the "battlepassspl" field.</summary>
    public const int BattlepasssplFieldNumber = 35;
    private int battlepassspl_;
    /// <summary>
    ///通行证特殊权限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Battlepassspl {
      get { return battlepassspl_; }
      set {
        battlepassspl_ = value;
      }
    }

    /// <summary>Field number for the "battlepasssgain" field.</summary>
    public const int BattlepasssgainFieldNumber = 36;
    private static readonly pb::FieldCodec<int> _repeated_battlepasssgain_codec
        = pb::FieldCodec.ForInt32(290);
    private readonly pbc::RepeatedField<int> battlepasssgain_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///通行证已经领取的  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Battlepasssgain {
      get { return battlepasssgain_; }
    }

    /// <summary>Field number for the "battlepassslimit" field.</summary>
    public const int BattlepassslimitFieldNumber = 37;
    private static readonly pbc::MapField<int, int>.Codec _map_battlepassslimit_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 298);
    private readonly pbc::MapField<int, int> battlepassslimit_ = new pbc::MapField<int, int>();
    /// <summary>
    ///通行证限购
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Battlepassslimit {
      get { return battlepassslimit_; }
    }

    /// <summary>Field number for the "gameshare" field.</summary>
    public const int GameshareFieldNumber = 38;
    private int gameshare_;
    /// <summary>
    ///游戏分享次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gameshare {
      get { return gameshare_; }
      set {
        gameshare_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_LoginRoleData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_LoginRoleData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reconn != other.Reconn) return false;
      if (Diamond != other.Diamond) return false;
      if (Newmail != other.Newmail) return false;
      if (Drawcardcount != other.Drawcardcount) return false;
      if (Leaflet2 != other.Leaflet2) return false;
      if (Leaflet3 != other.Leaflet3) return false;
      if(!teamcardlist_.Equals(other.teamcardlist_)) return false;
      if (!Firstgiftlist.Equals(other.Firstgiftlist)) return false;
      if(!randomcardlist_.Equals(other.randomcardlist_)) return false;
      if (Randomcardcount != other.Randomcardcount) return false;
      if (Sevenlogin != other.Sevenlogin) return false;
      if (Sevengain != other.Sevengain) return false;
      if (!Monthcardinfo.Equals(other.Monthcardinfo)) return false;
      if (Paylevel != other.Paylevel) return false;
      if (!Activegitflist.Equals(other.Activegitflist)) return false;
      if(!bigtasklist_.Equals(other.bigtasklist_)) return false;
      if (Zerotime != other.Zerotime) return false;
      if (Rankgroupid != other.Rankgroupid) return false;
      if(!areasteplist_.Equals(other.areasteplist_)) return false;
      if (Headicon != other.Headicon) return false;
      if (Battlepasstime != other.Battlepasstime) return false;
      if (Battlepasscount != other.Battlepasscount) return false;
      if (Battlepassexp != other.Battlepassexp) return false;
      if (Battlepasslevel != other.Battlepasslevel) return false;
      if (Battlepasscoin != other.Battlepasscoin) return false;
      if (Battlepassspl != other.Battlepassspl) return false;
      if(!battlepasssgain_.Equals(other.battlepasssgain_)) return false;
      if (!Battlepassslimit.Equals(other.Battlepassslimit)) return false;
      if (Gameshare != other.Gameshare) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reconn != 0) hash ^= Reconn.GetHashCode();
      if (Diamond != 0) hash ^= Diamond.GetHashCode();
      if (Newmail != false) hash ^= Newmail.GetHashCode();
      if (Drawcardcount != 0) hash ^= Drawcardcount.GetHashCode();
      if (Leaflet2 != 0) hash ^= Leaflet2.GetHashCode();
      if (Leaflet3 != 0) hash ^= Leaflet3.GetHashCode();
      hash ^= teamcardlist_.GetHashCode();
      hash ^= Firstgiftlist.GetHashCode();
      hash ^= randomcardlist_.GetHashCode();
      if (Randomcardcount != 0) hash ^= Randomcardcount.GetHashCode();
      if (Sevenlogin != 0) hash ^= Sevenlogin.GetHashCode();
      if (Sevengain != false) hash ^= Sevengain.GetHashCode();
      hash ^= Monthcardinfo.GetHashCode();
      if (Paylevel != 0) hash ^= Paylevel.GetHashCode();
      hash ^= Activegitflist.GetHashCode();
      hash ^= bigtasklist_.GetHashCode();
      if (Zerotime != 0) hash ^= Zerotime.GetHashCode();
      if (Rankgroupid.Length != 0) hash ^= Rankgroupid.GetHashCode();
      hash ^= areasteplist_.GetHashCode();
      if (Headicon.Length != 0) hash ^= Headicon.GetHashCode();
      if (Battlepasstime != 0) hash ^= Battlepasstime.GetHashCode();
      if (Battlepasscount != 0) hash ^= Battlepasscount.GetHashCode();
      if (Battlepassexp != 0) hash ^= Battlepassexp.GetHashCode();
      if (Battlepasslevel != 0) hash ^= Battlepasslevel.GetHashCode();
      if (Battlepasscoin != 0) hash ^= Battlepasscoin.GetHashCode();
      if (Battlepassspl != 0) hash ^= Battlepassspl.GetHashCode();
      hash ^= battlepasssgain_.GetHashCode();
      hash ^= Battlepassslimit.GetHashCode();
      if (Gameshare != 0) hash ^= Gameshare.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reconn != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Reconn);
      }
      if (Diamond != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Diamond);
      }
      if (Newmail != false) {
        output.WriteRawTag(24);
        output.WriteBool(Newmail);
      }
      if (Drawcardcount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Drawcardcount);
      }
      if (Leaflet2 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Leaflet2);
      }
      if (Leaflet3 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Leaflet3);
      }
      teamcardlist_.WriteTo(output, _repeated_teamcardlist_codec);
      firstgiftlist_.WriteTo(output, _map_firstgiftlist_codec);
      randomcardlist_.WriteTo(output, _repeated_randomcardlist_codec);
      if (Randomcardcount != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Randomcardcount);
      }
      if (Sevenlogin != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Sevenlogin);
      }
      if (Sevengain != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Sevengain);
      }
      monthcardinfo_.WriteTo(output, _map_monthcardinfo_codec);
      if (Paylevel != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Paylevel);
      }
      activegitflist_.WriteTo(output, _map_activegitflist_codec);
      bigtasklist_.WriteTo(output, _repeated_bigtasklist_codec);
      if (Zerotime != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Zerotime);
      }
      if (Rankgroupid.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Rankgroupid);
      }
      areasteplist_.WriteTo(output, _repeated_areasteplist_codec);
      if (Headicon.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(Headicon);
      }
      if (Battlepasstime != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(Battlepasstime);
      }
      if (Battlepasscount != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(Battlepasscount);
      }
      if (Battlepassexp != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(Battlepassexp);
      }
      if (Battlepasslevel != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(Battlepasslevel);
      }
      if (Battlepasscoin != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(Battlepasscoin);
      }
      if (Battlepassspl != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(Battlepassspl);
      }
      battlepasssgain_.WriteTo(output, _repeated_battlepasssgain_codec);
      battlepassslimit_.WriteTo(output, _map_battlepassslimit_codec);
      if (Gameshare != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(Gameshare);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reconn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reconn);
      }
      if (Diamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamond);
      }
      if (Newmail != false) {
        size += 1 + 1;
      }
      if (Drawcardcount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Drawcardcount);
      }
      if (Leaflet2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leaflet2);
      }
      if (Leaflet3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Leaflet3);
      }
      size += teamcardlist_.CalculateSize(_repeated_teamcardlist_codec);
      size += firstgiftlist_.CalculateSize(_map_firstgiftlist_codec);
      size += randomcardlist_.CalculateSize(_repeated_randomcardlist_codec);
      if (Randomcardcount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Randomcardcount);
      }
      if (Sevenlogin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sevenlogin);
      }
      if (Sevengain != false) {
        size += 2 + 1;
      }
      size += monthcardinfo_.CalculateSize(_map_monthcardinfo_codec);
      if (Paylevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Paylevel);
      }
      size += activegitflist_.CalculateSize(_map_activegitflist_codec);
      size += bigtasklist_.CalculateSize(_repeated_bigtasklist_codec);
      if (Zerotime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Zerotime);
      }
      if (Rankgroupid.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Rankgroupid);
      }
      size += areasteplist_.CalculateSize(_repeated_areasteplist_codec);
      if (Headicon.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Headicon);
      }
      if (Battlepasstime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Battlepasstime);
      }
      if (Battlepasscount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Battlepasscount);
      }
      if (Battlepassexp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Battlepassexp);
      }
      if (Battlepasslevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Battlepasslevel);
      }
      if (Battlepasscoin != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Battlepasscoin);
      }
      if (Battlepassspl != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Battlepassspl);
      }
      size += battlepasssgain_.CalculateSize(_repeated_battlepasssgain_codec);
      size += battlepassslimit_.CalculateSize(_map_battlepassslimit_codec);
      if (Gameshare != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Gameshare);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_LoginRoleData other) {
      if (other == null) {
        return;
      }
      if (other.Reconn != 0) {
        Reconn = other.Reconn;
      }
      if (other.Diamond != 0) {
        Diamond = other.Diamond;
      }
      if (other.Newmail != false) {
        Newmail = other.Newmail;
      }
      if (other.Drawcardcount != 0) {
        Drawcardcount = other.Drawcardcount;
      }
      if (other.Leaflet2 != 0) {
        Leaflet2 = other.Leaflet2;
      }
      if (other.Leaflet3 != 0) {
        Leaflet3 = other.Leaflet3;
      }
      teamcardlist_.Add(other.teamcardlist_);
      firstgiftlist_.Add(other.firstgiftlist_);
      randomcardlist_.Add(other.randomcardlist_);
      if (other.Randomcardcount != 0) {
        Randomcardcount = other.Randomcardcount;
      }
      if (other.Sevenlogin != 0) {
        Sevenlogin = other.Sevenlogin;
      }
      if (other.Sevengain != false) {
        Sevengain = other.Sevengain;
      }
      monthcardinfo_.Add(other.monthcardinfo_);
      if (other.Paylevel != 0) {
        Paylevel = other.Paylevel;
      }
      activegitflist_.Add(other.activegitflist_);
      bigtasklist_.Add(other.bigtasklist_);
      if (other.Zerotime != 0) {
        Zerotime = other.Zerotime;
      }
      if (other.Rankgroupid.Length != 0) {
        Rankgroupid = other.Rankgroupid;
      }
      areasteplist_.Add(other.areasteplist_);
      if (other.Headicon.Length != 0) {
        Headicon = other.Headicon;
      }
      if (other.Battlepasstime != 0) {
        Battlepasstime = other.Battlepasstime;
      }
      if (other.Battlepasscount != 0) {
        Battlepasscount = other.Battlepasscount;
      }
      if (other.Battlepassexp != 0) {
        Battlepassexp = other.Battlepassexp;
      }
      if (other.Battlepasslevel != 0) {
        Battlepasslevel = other.Battlepasslevel;
      }
      if (other.Battlepasscoin != 0) {
        Battlepasscoin = other.Battlepasscoin;
      }
      if (other.Battlepassspl != 0) {
        Battlepassspl = other.Battlepassspl;
      }
      battlepasssgain_.Add(other.battlepasssgain_);
      battlepassslimit_.Add(other.battlepassslimit_);
      if (other.Gameshare != 0) {
        Gameshare = other.Gameshare;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Reconn = input.ReadInt32();
            break;
          }
          case 16: {
            Diamond = input.ReadInt32();
            break;
          }
          case 24: {
            Newmail = input.ReadBool();
            break;
          }
          case 32: {
            Drawcardcount = input.ReadInt32();
            break;
          }
          case 40: {
            Leaflet2 = input.ReadInt32();
            break;
          }
          case 48: {
            Leaflet3 = input.ReadInt32();
            break;
          }
          case 90: {
            teamcardlist_.AddEntriesFrom(input, _repeated_teamcardlist_codec);
            break;
          }
          case 98: {
            firstgiftlist_.AddEntriesFrom(input, _map_firstgiftlist_codec);
            break;
          }
          case 106:
          case 104: {
            randomcardlist_.AddEntriesFrom(input, _repeated_randomcardlist_codec);
            break;
          }
          case 112: {
            Randomcardcount = input.ReadInt32();
            break;
          }
          case 120: {
            Sevenlogin = input.ReadInt32();
            break;
          }
          case 128: {
            Sevengain = input.ReadBool();
            break;
          }
          case 138: {
            monthcardinfo_.AddEntriesFrom(input, _map_monthcardinfo_codec);
            break;
          }
          case 144: {
            Paylevel = input.ReadInt32();
            break;
          }
          case 154: {
            activegitflist_.AddEntriesFrom(input, _map_activegitflist_codec);
            break;
          }
          case 162:
          case 160: {
            bigtasklist_.AddEntriesFrom(input, _repeated_bigtasklist_codec);
            break;
          }
          case 168: {
            Zerotime = input.ReadInt32();
            break;
          }
          case 178: {
            Rankgroupid = input.ReadString();
            break;
          }
          case 186:
          case 184: {
            areasteplist_.AddEntriesFrom(input, _repeated_areasteplist_codec);
            break;
          }
          case 194: {
            Headicon = input.ReadString();
            break;
          }
          case 240: {
            Battlepasstime = input.ReadInt32();
            break;
          }
          case 248: {
            Battlepasscount = input.ReadInt32();
            break;
          }
          case 256: {
            Battlepassexp = input.ReadInt32();
            break;
          }
          case 264: {
            Battlepasslevel = input.ReadInt32();
            break;
          }
          case 272: {
            Battlepasscoin = input.ReadInt32();
            break;
          }
          case 280: {
            Battlepassspl = input.ReadInt32();
            break;
          }
          case 290:
          case 288: {
            battlepasssgain_.AddEntriesFrom(input, _repeated_battlepasssgain_codec);
            break;
          }
          case 298: {
            battlepassslimit_.AddEntriesFrom(input, _map_battlepassslimit_codec);
            break;
          }
          case 304: {
            Gameshare = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_UPDATEACCINFO           = 1016      --[[更新账号信息]]   
  /// </summary>
  public sealed partial class C2S_UpdateAccInfo : pb::IMessage<C2S_UpdateAccInfo> {
    private static readonly pb::MessageParser<C2S_UpdateAccInfo> _parser = new pb::MessageParser<C2S_UpdateAccInfo>(() => new C2S_UpdateAccInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_UpdateAccInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UpdateAccInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UpdateAccInfo(C2S_UpdateAccInfo other) : this() {
      account_ = other.account_;
      platform_ = other.platform_;
      country_ = other.country_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UpdateAccInfo Clone() {
      return new C2S_UpdateAccInfo(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    ///客户端不用填
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 2;
    private string platform_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country" field.</summary>
    public const int CountryFieldNumber = 3;
    private string country_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Country {
      get { return country_; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_UpdateAccInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_UpdateAccInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Platform != other.Platform) return false;
      if (Country != other.Country) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Platform.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Platform);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Country);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_UpdateAccInfo other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Platform = input.ReadString();
            break;
          }
          case 26: {
            Country = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2CL_UPDATEACCINFO           = 2016      --[[更新账号信息]]   
  /// </summary>
  public sealed partial class S2C_UpdateAccInfo : pb::IMessage<S2C_UpdateAccInfo> {
    private static readonly pb::MessageParser<S2C_UpdateAccInfo> _parser = new pb::MessageParser<S2C_UpdateAccInfo>(() => new S2C_UpdateAccInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_UpdateAccInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpdateAccInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpdateAccInfo(S2C_UpdateAccInfo other) : this() {
      ret_ = other.ret_;
      account_ = other.account_;
      platform_ = other.platform_;
      country_ = other.country_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpdateAccInfo Clone() {
      return new S2C_UpdateAccInfo(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 3;
    private string platform_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country" field.</summary>
    public const int CountryFieldNumber = 4;
    private string country_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Country {
      get { return country_; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_UpdateAccInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_UpdateAccInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Account != other.Account) return false;
      if (Platform != other.Platform) return false;
      if (Country != other.Country) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (Platform.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Platform);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Country);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_UpdateAccInfo other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
          case 26: {
            Platform = input.ReadString();
            break;
          }
          case 34: {
            Country = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_WD2CL_ZEROREFRESH             = 2101      --零点刷新
  /// </summary>
  public sealed partial class S2C_ZeroRefresh : pb::IMessage<S2C_ZeroRefresh> {
    private static readonly pb::MessageParser<S2C_ZeroRefresh> _parser = new pb::MessageParser<S2C_ZeroRefresh>(() => new S2C_ZeroRefresh());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ZeroRefresh> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ZeroRefresh() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ZeroRefresh(S2C_ZeroRefresh other) : this() {
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ZeroRefresh Clone() {
      return new S2C_ZeroRefresh(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ZeroRefresh);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ZeroRefresh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ZeroRefresh other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_WD2CL_WEEKREFRESH             = 2102      --[[每周刷新]]  
  /// </summary>
  public sealed partial class S2C_WeekRefresh : pb::IMessage<S2C_WeekRefresh> {
    private static readonly pb::MessageParser<S2C_WeekRefresh> _parser = new pb::MessageParser<S2C_WeekRefresh>(() => new S2C_WeekRefresh());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_WeekRefresh> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_WeekRefresh() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_WeekRefresh(S2C_WeekRefresh other) : this() {
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_WeekRefresh Clone() {
      return new S2C_WeekRefresh(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_WeekRefresh);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_WeekRefresh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_WeekRefresh other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_WD2CL_MONTHREFRESH            = 2103      --[[每月刷新]] 
  /// </summary>
  public sealed partial class S2C_MonthRefresh : pb::IMessage<S2C_MonthRefresh> {
    private static readonly pb::MessageParser<S2C_MonthRefresh> _parser = new pb::MessageParser<S2C_MonthRefresh>(() => new S2C_MonthRefresh());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_MonthRefresh> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MonthRefresh() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MonthRefresh(S2C_MonthRefresh other) : this() {
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MonthRefresh Clone() {
      return new S2C_MonthRefresh(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_MonthRefresh);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_MonthRefresh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_MonthRefresh other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_WD2CL_STOPSERVER              = 2108      --[[停止服务器通知]]  
  /// </summary>
  public sealed partial class S2C_StopServer : pb::IMessage<S2C_StopServer> {
    private static readonly pb::MessageParser<S2C_StopServer> _parser = new pb::MessageParser<S2C_StopServer>(() => new S2C_StopServer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_StopServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_StopServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_StopServer(S2C_StopServer other) : this() {
      configid_ = other.configid_;
      params_ = other.params_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_StopServer Clone() {
      return new S2C_StopServer(this);
    }

    /// <summary>Field number for the "configid" field.</summary>
    public const int ConfigidFieldNumber = 1;
    private int configid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Configid {
      get { return configid_; }
      set {
        configid_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_params_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> params_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Params {
      get { return params_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_StopServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_StopServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Configid != other.Configid) return false;
      if(!params_.Equals(other.params_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Configid != 0) hash ^= Configid.GetHashCode();
      hash ^= params_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Configid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Configid);
      }
      params_.WriteTo(output, _repeated_params_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Configid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Configid);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_StopServer other) {
      if (other == null) {
        return;
      }
      if (other.Configid != 0) {
        Configid = other.Configid;
      }
      params_.Add(other.params_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Configid = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_WD2CL_UPATEDIAMOD             = 2500      --更新钻石数量
  /// </summary>
  public sealed partial class S2C_UpdateDiamod : pb::IMessage<S2C_UpdateDiamod> {
    private static readonly pb::MessageParser<S2C_UpdateDiamod> _parser = new pb::MessageParser<S2C_UpdateDiamod>(() => new S2C_UpdateDiamod());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_UpdateDiamod> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpdateDiamod() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpdateDiamod(S2C_UpdateDiamod other) : this() {
      diamodnum_ = other.diamodnum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpdateDiamod Clone() {
      return new S2C_UpdateDiamod(this);
    }

    /// <summary>Field number for the "diamodnum" field.</summary>
    public const int DiamodnumFieldNumber = 1;
    private int diamodnum_;
    /// <summary>
    ///钻石数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Diamodnum {
      get { return diamodnum_; }
      set {
        diamodnum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_UpdateDiamod);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_UpdateDiamod other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Diamodnum != other.Diamodnum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Diamodnum != 0) hash ^= Diamodnum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Diamodnum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Diamodnum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Diamodnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamodnum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_UpdateDiamod other) {
      if (other == null) {
        return;
      }
      if (other.Diamodnum != 0) {
        Diamodnum = other.Diamodnum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Diamodnum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_WD2CL_CURRENCY                = 2503      --[[更新货币数量]]  
  /// </summary>
  public sealed partial class S2C_UpdateCurrency : pb::IMessage<S2C_UpdateCurrency> {
    private static readonly pb::MessageParser<S2C_UpdateCurrency> _parser = new pb::MessageParser<S2C_UpdateCurrency>(() => new S2C_UpdateCurrency());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_UpdateCurrency> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpdateCurrency() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpdateCurrency(S2C_UpdateCurrency other) : this() {
      type_ = other.type_;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpdateCurrency Clone() {
      return new S2C_UpdateCurrency(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    /// <summary>
    ///货币类型  leaflet3 paylevel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_UpdateCurrency);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_UpdateCurrency other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_UpdateCurrency other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_USEDIAMOD               = 1501      --使用钻石
  /// </summary>
  public sealed partial class C2S_UseDiamod : pb::IMessage<C2S_UseDiamod> {
    private static readonly pb::MessageParser<C2S_UseDiamod> _parser = new pb::MessageParser<C2S_UseDiamod>(() => new C2S_UseDiamod());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_UseDiamod> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UseDiamod() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UseDiamod(C2S_UseDiamod other) : this() {
      num_ = other.num_;
      event_ = other.event_;
      params_ = other.params_.Clone();
      goodsid_ = other.goodsid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UseDiamod Clone() {
      return new C2S_UseDiamod(this);
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 1;
    private int num_;
    /// <summary>
    ///使用钻石数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 2;
    private int event_;
    /// <summary>
    ///参考 event.lua
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_params_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> params_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "goodsid" field.</summary>
    public const int GoodsidFieldNumber = 4;
    private int goodsid_;
    /// <summary>
    ///商品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Goodsid {
      get { return goodsid_; }
      set {
        goodsid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_UseDiamod);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_UseDiamod other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Num != other.Num) return false;
      if (Event != other.Event) return false;
      if(!params_.Equals(other.params_)) return false;
      if (Goodsid != other.Goodsid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Num != 0) hash ^= Num.GetHashCode();
      if (Event != 0) hash ^= Event.GetHashCode();
      hash ^= params_.GetHashCode();
      if (Goodsid != 0) hash ^= Goodsid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Num != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Num);
      }
      if (Event != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Event);
      }
      params_.WriteTo(output, _repeated_params_codec);
      if (Goodsid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Goodsid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (Event != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Event);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      if (Goodsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goodsid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_UseDiamod other) {
      if (other == null) {
        return;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.Event != 0) {
        Event = other.Event;
      }
      params_.Add(other.params_);
      if (other.Goodsid != 0) {
        Goodsid = other.Goodsid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Num = input.ReadInt32();
            break;
          }
          case 16: {
            Event = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
          case 32: {
            Goodsid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2CL_USEDIAMOD               = 2501      --使用钻石
  /// </summary>
  public sealed partial class S2C_UseDiamod : pb::IMessage<S2C_UseDiamod> {
    private static readonly pb::MessageParser<S2C_UseDiamod> _parser = new pb::MessageParser<S2C_UseDiamod>(() => new S2C_UseDiamod());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_UseDiamod> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UseDiamod() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UseDiamod(S2C_UseDiamod other) : this() {
      ret_ = other.ret_;
      num_ = other.num_;
      event_ = other.event_;
      params_ = other.params_.Clone();
      goodsid_ = other.goodsid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UseDiamod Clone() {
      return new S2C_UseDiamod(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    ///结果0成功  1失败   
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    /// <summary>
    ///剩下钻石数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 3;
    private int event_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_params_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> params_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Params {
      get { return params_; }
    }

    /// <summary>Field number for the "goodsid" field.</summary>
    public const int GoodsidFieldNumber = 5;
    private int goodsid_;
    /// <summary>
    ///商品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Goodsid {
      get { return goodsid_; }
      set {
        goodsid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_UseDiamod);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_UseDiamod other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Num != other.Num) return false;
      if (Event != other.Event) return false;
      if(!params_.Equals(other.params_)) return false;
      if (Goodsid != other.Goodsid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (Event != 0) hash ^= Event.GetHashCode();
      hash ^= params_.GetHashCode();
      if (Goodsid != 0) hash ^= Goodsid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (Event != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Event);
      }
      params_.WriteTo(output, _repeated_params_codec);
      if (Goodsid != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Goodsid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (Event != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Event);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      if (Goodsid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Goodsid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_UseDiamod other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.Event != 0) {
        Event = other.Event;
      }
      params_.Add(other.params_);
      if (other.Goodsid != 0) {
        Goodsid = other.Goodsid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
          case 24: {
            Event = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
          case 40: {
            Goodsid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_WATCHADV               = 1502      --[[看广告]]  
  /// </summary>
  public sealed partial class C2S_WatchAdv : pb::IMessage<C2S_WatchAdv> {
    private static readonly pb::MessageParser<C2S_WatchAdv> _parser = new pb::MessageParser<C2S_WatchAdv>(() => new C2S_WatchAdv());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_WatchAdv> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_WatchAdv() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_WatchAdv(C2S_WatchAdv other) : this() {
      event_ = other.event_;
      params_ = other.params_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_WatchAdv Clone() {
      return new C2S_WatchAdv(this);
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 1;
    private int event_;
    /// <summary>
    ///  参考 event.lua
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_params_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> params_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Params {
      get { return params_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_WatchAdv);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_WatchAdv other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Event != other.Event) return false;
      if(!params_.Equals(other.params_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Event != 0) hash ^= Event.GetHashCode();
      hash ^= params_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Event != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Event);
      }
      params_.WriteTo(output, _repeated_params_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Event != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Event);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_WatchAdv other) {
      if (other == null) {
        return;
      }
      if (other.Event != 0) {
        Event = other.Event;
      }
      params_.Add(other.params_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Event = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2CL_WATCHADV               = 2502      --[[看广告]]
  /// </summary>
  public sealed partial class S2C_WatchAdv : pb::IMessage<S2C_WatchAdv> {
    private static readonly pb::MessageParser<S2C_WatchAdv> _parser = new pb::MessageParser<S2C_WatchAdv>(() => new S2C_WatchAdv());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_WatchAdv> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_WatchAdv() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_WatchAdv(S2C_WatchAdv other) : this() {
      event_ = other.event_;
      params_ = other.params_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_WatchAdv Clone() {
      return new S2C_WatchAdv(this);
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 1;
    private int event_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_params_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> params_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Params {
      get { return params_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_WatchAdv);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_WatchAdv other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Event != other.Event) return false;
      if(!params_.Equals(other.params_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Event != 0) hash ^= Event.GetHashCode();
      hash ^= params_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Event != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Event);
      }
      params_.WriteTo(output, _repeated_params_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Event != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Event);
      }
      size += params_.CalculateSize(_repeated_params_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_WatchAdv other) {
      if (other == null) {
        return;
      }
      if (other.Event != 0) {
        Event = other.Event;
      }
      params_.Add(other.params_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Event = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            params_.AddEntriesFrom(input, _repeated_params_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_SETNICKNAME             = 1505      --[[改昵称]]  
  /// </summary>
  public sealed partial class C2S_SetNickName : pb::IMessage<C2S_SetNickName> {
    private static readonly pb::MessageParser<C2S_SetNickName> _parser = new pb::MessageParser<C2S_SetNickName>(() => new C2S_SetNickName());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_SetNickName> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_SetNickName() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_SetNickName(C2S_SetNickName other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_SetNickName Clone() {
      return new C2S_SetNickName(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_SetNickName);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_SetNickName other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_SetNickName other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2CL_SETNICKNAME             = 2505      --[[改昵称]] 
  /// </summary>
  public sealed partial class S2C_SetNickName : pb::IMessage<S2C_SetNickName> {
    private static readonly pb::MessageParser<S2C_SetNickName> _parser = new pb::MessageParser<S2C_SetNickName>(() => new S2C_SetNickName());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_SetNickName> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SetNickName() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SetNickName(S2C_SetNickName other) : this() {
      ret_ = other.ret_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SetNickName Clone() {
      return new S2C_SetNickName(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_SetNickName);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_SetNickName other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_SetNickName other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_CL2WD_SETHEADICON             = 1507      --[[改头像]]  
  /// </summary>
  public sealed partial class C2S_SetHeadIcon : pb::IMessage<C2S_SetHeadIcon> {
    private static readonly pb::MessageParser<C2S_SetHeadIcon> _parser = new pb::MessageParser<C2S_SetHeadIcon>(() => new C2S_SetHeadIcon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_SetHeadIcon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_SetHeadIcon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_SetHeadIcon(C2S_SetHeadIcon other) : this() {
      icon_ = other.icon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_SetHeadIcon Clone() {
      return new C2S_SetHeadIcon(this);
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 1;
    private string icon_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_SetHeadIcon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_SetHeadIcon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Icon != other.Icon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Icon.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Icon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_SetHeadIcon other) {
      if (other == null) {
        return;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Icon = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_WD2CL_SETHEADICON             = 2507      --[[改头像]]  
  /// </summary>
  public sealed partial class S2C_SetHeadIcon : pb::IMessage<S2C_SetHeadIcon> {
    private static readonly pb::MessageParser<S2C_SetHeadIcon> _parser = new pb::MessageParser<S2C_SetHeadIcon>(() => new S2C_SetHeadIcon());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_SetHeadIcon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SetHeadIcon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SetHeadIcon(S2C_SetHeadIcon other) : this() {
      ret_ = other.ret_;
      icon_ = other.icon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SetHeadIcon Clone() {
      return new S2C_SetHeadIcon(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 2;
    private string icon_ = "";
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_SetHeadIcon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_SetHeadIcon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Icon != other.Icon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Icon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_SetHeadIcon other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 18: {
            Icon = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_GETMAILNEW              = 1510      --请求是否有新邮件
  /// </summary>
  public sealed partial class C2S_GetMailNew : pb::IMessage<C2S_GetMailNew> {
    private static readonly pb::MessageParser<C2S_GetMailNew> _parser = new pb::MessageParser<C2S_GetMailNew>(() => new C2S_GetMailNew());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GetMailNew> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetMailNew() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetMailNew(C2S_GetMailNew other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetMailNew Clone() {
      return new C2S_GetMailNew(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GetMailNew);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GetMailNew other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GetMailNew other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2CL_GETMAILNEW              = 2510      --请求是否有新邮件
  /// </summary>
  public sealed partial class S2C_GetMailNew : pb::IMessage<S2C_GetMailNew> {
    private static readonly pb::MessageParser<S2C_GetMailNew> _parser = new pb::MessageParser<S2C_GetMailNew>(() => new S2C_GetMailNew());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GetMailNew> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetMailNew() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetMailNew(S2C_GetMailNew other) : this() {
      newmail_ = other.newmail_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetMailNew Clone() {
      return new S2C_GetMailNew(this);
    }

    /// <summary>Field number for the "newmail" field.</summary>
    public const int NewmailFieldNumber = 1;
    private bool newmail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Newmail {
      get { return newmail_; }
      set {
        newmail_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GetMailNew);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GetMailNew other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Newmail != other.Newmail) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Newmail != false) hash ^= Newmail.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Newmail != false) {
        output.WriteRawTag(8);
        output.WriteBool(Newmail);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Newmail != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GetMailNew other) {
      if (other == null) {
        return;
      }
      if (other.Newmail != false) {
        Newmail = other.Newmail;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Newmail = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_CL2WD_GETMAILLIST             = 1511      --请求邮件列表
  /// </summary>
  public sealed partial class C2S_ShowMailList : pb::IMessage<C2S_ShowMailList> {
    private static readonly pb::MessageParser<C2S_ShowMailList> _parser = new pb::MessageParser<C2S_ShowMailList>(() => new C2S_ShowMailList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_ShowMailList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ShowMailList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ShowMailList(C2S_ShowMailList other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ShowMailList Clone() {
      return new C2S_ShowMailList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_ShowMailList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_ShowMailList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_ShowMailList other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_WD2CL_GETMAILLIST             = 2511      --请求邮件列表
  /// </summary>
  public sealed partial class S2C_ShowMailList : pb::IMessage<S2C_ShowMailList> {
    private static readonly pb::MessageParser<S2C_ShowMailList> _parser = new pb::MessageParser<S2C_ShowMailList>(() => new S2C_ShowMailList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ShowMailList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ShowMailList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ShowMailList(S2C_ShowMailList other) : this() {
      maillist_ = other.maillist_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ShowMailList Clone() {
      return new S2C_ShowMailList(this);
    }

    /// <summary>Field number for the "maillist" field.</summary>
    public const int MaillistFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PBase.PB_MailItem> _repeated_maillist_codec
        = pb::FieldCodec.ForMessage(10, global::PBase.PB_MailItem.Parser);
    private readonly pbc::RepeatedField<global::PBase.PB_MailItem> maillist_ = new pbc::RepeatedField<global::PBase.PB_MailItem>();
    /// <summary>
    ///邮件列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PBase.PB_MailItem> Maillist {
      get { return maillist_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ShowMailList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ShowMailList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!maillist_.Equals(other.maillist_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= maillist_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      maillist_.WriteTo(output, _repeated_maillist_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += maillist_.CalculateSize(_repeated_maillist_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ShowMailList other) {
      if (other == null) {
        return;
      }
      maillist_.Add(other.maillist_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            maillist_.AddEntriesFrom(input, _repeated_maillist_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_CL2WD_READMAIL                = 1512      --读邮件
  /// </summary>
  public sealed partial class C2S_ReadMail : pb::IMessage<C2S_ReadMail> {
    private static readonly pb::MessageParser<C2S_ReadMail> _parser = new pb::MessageParser<C2S_ReadMail>(() => new C2S_ReadMail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_ReadMail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ReadMail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ReadMail(C2S_ReadMail other) : this() {
      mailid_ = other.mailid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ReadMail Clone() {
      return new C2S_ReadMail(this);
    }

    /// <summary>Field number for the "mailid" field.</summary>
    public const int MailidFieldNumber = 1;
    private string mailid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mailid {
      get { return mailid_; }
      set {
        mailid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_ReadMail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_ReadMail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mailid != other.Mailid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mailid.Length != 0) hash ^= Mailid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mailid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Mailid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mailid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mailid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_ReadMail other) {
      if (other == null) {
        return;
      }
      if (other.Mailid.Length != 0) {
        Mailid = other.Mailid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Mailid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_WD2CL_READMAIL                = 2512      --读邮件
  /// </summary>
  public sealed partial class S2C_ReadMail : pb::IMessage<S2C_ReadMail> {
    private static readonly pb::MessageParser<S2C_ReadMail> _parser = new pb::MessageParser<S2C_ReadMail>(() => new S2C_ReadMail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ReadMail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ReadMail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ReadMail(S2C_ReadMail other) : this() {
      ret_ = other.ret_;
      mailid_ = other.mailid_;
      mailstate_ = other.mailstate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ReadMail Clone() {
      return new S2C_ReadMail(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "mailid" field.</summary>
    public const int MailidFieldNumber = 2;
    private string mailid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mailid {
      get { return mailid_; }
      set {
        mailid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mailstate" field.</summary>
    public const int MailstateFieldNumber = 3;
    private int mailstate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mailstate {
      get { return mailstate_; }
      set {
        mailstate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ReadMail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ReadMail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Mailid != other.Mailid) return false;
      if (Mailstate != other.Mailstate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Mailid.Length != 0) hash ^= Mailid.GetHashCode();
      if (Mailstate != 0) hash ^= Mailstate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Mailid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Mailid);
      }
      if (Mailstate != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Mailstate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Mailid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mailid);
      }
      if (Mailstate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mailstate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ReadMail other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Mailid.Length != 0) {
        Mailid = other.Mailid;
      }
      if (other.Mailstate != 0) {
        Mailstate = other.Mailstate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 18: {
            Mailid = input.ReadString();
            break;
          }
          case 24: {
            Mailstate = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_MAILGETITEM             = 1513      --领取邮件物品
  /// </summary>
  public sealed partial class C2S_MailGetItem : pb::IMessage<C2S_MailGetItem> {
    private static readonly pb::MessageParser<C2S_MailGetItem> _parser = new pb::MessageParser<C2S_MailGetItem>(() => new C2S_MailGetItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_MailGetItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_MailGetItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_MailGetItem(C2S_MailGetItem other) : this() {
      mailid_ = other.mailid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_MailGetItem Clone() {
      return new C2S_MailGetItem(this);
    }

    /// <summary>Field number for the "mailid" field.</summary>
    public const int MailidFieldNumber = 1;
    private string mailid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mailid {
      get { return mailid_; }
      set {
        mailid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_MailGetItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_MailGetItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mailid != other.Mailid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mailid.Length != 0) hash ^= Mailid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mailid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Mailid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mailid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mailid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_MailGetItem other) {
      if (other == null) {
        return;
      }
      if (other.Mailid.Length != 0) {
        Mailid = other.Mailid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Mailid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2CL_MAILGETITEM             = 2513      --领取邮件物品
  /// </summary>
  public sealed partial class S2C_MailGetItem : pb::IMessage<S2C_MailGetItem> {
    private static readonly pb::MessageParser<S2C_MailGetItem> _parser = new pb::MessageParser<S2C_MailGetItem>(() => new S2C_MailGetItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_MailGetItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MailGetItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MailGetItem(S2C_MailGetItem other) : this() {
      ret_ = other.ret_;
      mailid_ = other.mailid_;
      mailstate_ = other.mailstate_;
      cardlist_ = other.cardlist_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MailGetItem Clone() {
      return new S2C_MailGetItem(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "mailid" field.</summary>
    public const int MailidFieldNumber = 2;
    private string mailid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mailid {
      get { return mailid_; }
      set {
        mailid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mailstate" field.</summary>
    public const int MailstateFieldNumber = 3;
    private int mailstate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mailstate {
      get { return mailstate_; }
      set {
        mailstate_ = value;
      }
    }

    /// <summary>Field number for the "cardlist" field.</summary>
    public const int CardlistFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_cardlist_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> cardlist_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Cardlist {
      get { return cardlist_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_MailGetItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_MailGetItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Mailid != other.Mailid) return false;
      if (Mailstate != other.Mailstate) return false;
      if(!cardlist_.Equals(other.cardlist_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Mailid.Length != 0) hash ^= Mailid.GetHashCode();
      if (Mailstate != 0) hash ^= Mailstate.GetHashCode();
      hash ^= cardlist_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Mailid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Mailid);
      }
      if (Mailstate != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Mailstate);
      }
      cardlist_.WriteTo(output, _repeated_cardlist_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Mailid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mailid);
      }
      if (Mailstate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mailstate);
      }
      size += cardlist_.CalculateSize(_repeated_cardlist_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_MailGetItem other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Mailid.Length != 0) {
        Mailid = other.Mailid;
      }
      if (other.Mailstate != 0) {
        Mailstate = other.Mailstate;
      }
      cardlist_.Add(other.cardlist_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 18: {
            Mailid = input.ReadString();
            break;
          }
          case 24: {
            Mailstate = input.ReadInt32();
            break;
          }
          case 34: {
            cardlist_.AddEntriesFrom(input, _repeated_cardlist_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_MAILDELETEREAD              = 1514      --一键删除邮件
  /// </summary>
  public sealed partial class C2S_MailDeleteRead : pb::IMessage<C2S_MailDeleteRead> {
    private static readonly pb::MessageParser<C2S_MailDeleteRead> _parser = new pb::MessageParser<C2S_MailDeleteRead>(() => new C2S_MailDeleteRead());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_MailDeleteRead> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_MailDeleteRead() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_MailDeleteRead(C2S_MailDeleteRead other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_MailDeleteRead Clone() {
      return new C2S_MailDeleteRead(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_MailDeleteRead);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_MailDeleteRead other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_MailDeleteRead other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2CL_MAILDELETEREAD              = 2514      --一键删除邮件
  /// </summary>
  public sealed partial class S2C_MailDeleteRead : pb::IMessage<S2C_MailDeleteRead> {
    private static readonly pb::MessageParser<S2C_MailDeleteRead> _parser = new pb::MessageParser<S2C_MailDeleteRead>(() => new S2C_MailDeleteRead());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_MailDeleteRead> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MailDeleteRead() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MailDeleteRead(S2C_MailDeleteRead other) : this() {
      dellist_ = other.dellist_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MailDeleteRead Clone() {
      return new S2C_MailDeleteRead(this);
    }

    /// <summary>Field number for the "dellist" field.</summary>
    public const int DellistFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_dellist_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> dellist_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///被删除的列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Dellist {
      get { return dellist_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_MailDeleteRead);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_MailDeleteRead other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dellist_.Equals(other.dellist_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dellist_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dellist_.WriteTo(output, _repeated_dellist_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dellist_.CalculateSize(_repeated_dellist_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_MailDeleteRead other) {
      if (other == null) {
        return;
      }
      dellist_.Add(other.dellist_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dellist_.AddEntriesFrom(input, _repeated_dellist_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_MAILALLREAD             = 1515   --[[一键读邮件]]
  /// </summary>
  public sealed partial class C2S_MailAllRead : pb::IMessage<C2S_MailAllRead> {
    private static readonly pb::MessageParser<C2S_MailAllRead> _parser = new pb::MessageParser<C2S_MailAllRead>(() => new C2S_MailAllRead());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_MailAllRead> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_MailAllRead() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_MailAllRead(C2S_MailAllRead other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_MailAllRead Clone() {
      return new C2S_MailAllRead(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_MailAllRead);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_MailAllRead other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_MailAllRead other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2CL_MAILALLREAD             = 2515   --[[一键读邮件]]
  /// </summary>
  public sealed partial class S2C_MailAllRead : pb::IMessage<S2C_MailAllRead> {
    private static readonly pb::MessageParser<S2C_MailAllRead> _parser = new pb::MessageParser<S2C_MailAllRead>(() => new S2C_MailAllRead());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_MailAllRead> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MailAllRead() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MailAllRead(S2C_MailAllRead other) : this() {
      readlist_ = other.readlist_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_MailAllRead Clone() {
      return new S2C_MailAllRead(this);
    }

    /// <summary>Field number for the "readlist" field.</summary>
    public const int ReadlistFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_readlist_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> readlist_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Readlist {
      get { return readlist_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_MailAllRead);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_MailAllRead other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!readlist_.Equals(other.readlist_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= readlist_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      readlist_.WriteTo(output, _repeated_readlist_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += readlist_.CalculateSize(_repeated_readlist_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_MailAllRead other) {
      if (other == null) {
        return;
      }
      readlist_.Add(other.readlist_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            readlist_.AddEntriesFrom(input, _repeated_readlist_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_GETTEAMCARDLIST         = 1521      --请求卡牌列表
  /// </summary>
  public sealed partial class C2S_ShowTeamCardList : pb::IMessage<C2S_ShowTeamCardList> {
    private static readonly pb::MessageParser<C2S_ShowTeamCardList> _parser = new pb::MessageParser<C2S_ShowTeamCardList>(() => new C2S_ShowTeamCardList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_ShowTeamCardList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ShowTeamCardList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ShowTeamCardList(C2S_ShowTeamCardList other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ShowTeamCardList Clone() {
      return new C2S_ShowTeamCardList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_ShowTeamCardList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_ShowTeamCardList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_ShowTeamCardList other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2CL_GETTEAMCARDLIST         = 2521      --请求卡牌列表
  /// </summary>
  public sealed partial class S2C_ShowTeamCardList : pb::IMessage<S2C_ShowTeamCardList> {
    private static readonly pb::MessageParser<S2C_ShowTeamCardList> _parser = new pb::MessageParser<S2C_ShowTeamCardList>(() => new S2C_ShowTeamCardList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ShowTeamCardList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ShowTeamCardList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ShowTeamCardList(S2C_ShowTeamCardList other) : this() {
      teamcardlist_ = other.teamcardlist_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ShowTeamCardList Clone() {
      return new S2C_ShowTeamCardList(this);
    }

    /// <summary>Field number for the "teamcardlist" field.</summary>
    public const int TeamcardlistFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PBase.PB_TeamCardInfo> _repeated_teamcardlist_codec
        = pb::FieldCodec.ForMessage(10, global::PBase.PB_TeamCardInfo.Parser);
    private readonly pbc::RepeatedField<global::PBase.PB_TeamCardInfo> teamcardlist_ = new pbc::RepeatedField<global::PBase.PB_TeamCardInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PBase.PB_TeamCardInfo> Teamcardlist {
      get { return teamcardlist_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ShowTeamCardList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ShowTeamCardList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!teamcardlist_.Equals(other.teamcardlist_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= teamcardlist_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      teamcardlist_.WriteTo(output, _repeated_teamcardlist_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += teamcardlist_.CalculateSize(_repeated_teamcardlist_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ShowTeamCardList other) {
      if (other == null) {
        return;
      }
      teamcardlist_.Add(other.teamcardlist_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            teamcardlist_.AddEntriesFrom(input, _repeated_teamcardlist_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_DRAWCARDINFO            = 1520      --[[喇叭界面信息]]
  /// </summary>
  public sealed partial class C2S_DrawCardInfo : pb::IMessage<C2S_DrawCardInfo> {
    private static readonly pb::MessageParser<C2S_DrawCardInfo> _parser = new pb::MessageParser<C2S_DrawCardInfo>(() => new C2S_DrawCardInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_DrawCardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_DrawCardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_DrawCardInfo(C2S_DrawCardInfo other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_DrawCardInfo Clone() {
      return new C2S_DrawCardInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_DrawCardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_DrawCardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_DrawCardInfo other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2CL_DRAWCARDINFO            = 2520      --[[喇叭界面信息]]  
  /// </summary>
  public sealed partial class S2C_DrawCardInfo : pb::IMessage<S2C_DrawCardInfo> {
    private static readonly pb::MessageParser<S2C_DrawCardInfo> _parser = new pb::MessageParser<S2C_DrawCardInfo>(() => new S2C_DrawCardInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_DrawCardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_DrawCardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_DrawCardInfo(S2C_DrawCardInfo other) : this() {
      drawfreetime_ = other.drawfreetime_;
      unlocktime_ = other.unlocktime_;
      drawcountleaflet1_ = other.drawcountleaflet1_;
      drawcountleaflet2_ = other.drawcountleaflet2_;
      drawcountleaflet3_ = other.drawcountleaflet3_;
      drawgainleaflet1_ = other.drawgainleaflet1_;
      drawgainleaflet2_ = other.drawgainleaflet2_;
      drawgainleaflet3_ = other.drawgainleaflet3_;
      lefttime_ = other.lefttime_;
      leaflet2Sec_ = other.leaflet2Sec_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_DrawCardInfo Clone() {
      return new S2C_DrawCardInfo(this);
    }

    /// <summary>Field number for the "drawfreetime" field.</summary>
    public const int DrawfreetimeFieldNumber = 1;
    private int drawfreetime_;
    /// <summary>
    ///广播抽卡免费剩余时间秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Drawfreetime {
      get { return drawfreetime_; }
      set {
        drawfreetime_ = value;
      }
    }

    /// <summary>Field number for the "unlocktime" field.</summary>
    public const int UnlocktimeFieldNumber = 2;
    private int unlocktime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unlocktime {
      get { return unlocktime_; }
      set {
        unlocktime_ = value;
      }
    }

    /// <summary>Field number for the "drawcountleaflet1" field.</summary>
    public const int Drawcountleaflet1FieldNumber = 5;
    private int drawcountleaflet1_;
    /// <summary>
    ///喇叭界面抽卡次数1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Drawcountleaflet1 {
      get { return drawcountleaflet1_; }
      set {
        drawcountleaflet1_ = value;
      }
    }

    /// <summary>Field number for the "drawcountleaflet2" field.</summary>
    public const int Drawcountleaflet2FieldNumber = 6;
    private int drawcountleaflet2_;
    /// <summary>
    ///喇叭界面抽卡次数2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Drawcountleaflet2 {
      get { return drawcountleaflet2_; }
      set {
        drawcountleaflet2_ = value;
      }
    }

    /// <summary>Field number for the "drawcountleaflet3" field.</summary>
    public const int Drawcountleaflet3FieldNumber = 7;
    private int drawcountleaflet3_;
    /// <summary>
    ///喇叭界面抽卡次数3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Drawcountleaflet3 {
      get { return drawcountleaflet3_; }
      set {
        drawcountleaflet3_ = value;
      }
    }

    /// <summary>Field number for the "drawgainleaflet1" field.</summary>
    public const int Drawgainleaflet1FieldNumber = 11;
    private int drawgainleaflet1_;
    /// <summary>
    ///喇叭界面累计领取1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Drawgainleaflet1 {
      get { return drawgainleaflet1_; }
      set {
        drawgainleaflet1_ = value;
      }
    }

    /// <summary>Field number for the "drawgainleaflet2" field.</summary>
    public const int Drawgainleaflet2FieldNumber = 12;
    private int drawgainleaflet2_;
    /// <summary>
    ///喇叭界面累计领取2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Drawgainleaflet2 {
      get { return drawgainleaflet2_; }
      set {
        drawgainleaflet2_ = value;
      }
    }

    /// <summary>Field number for the "drawgainleaflet3" field.</summary>
    public const int Drawgainleaflet3FieldNumber = 13;
    private int drawgainleaflet3_;
    /// <summary>
    ///喇叭界面累计领取3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Drawgainleaflet3 {
      get { return drawgainleaflet3_; }
      set {
        drawgainleaflet3_ = value;
      }
    }

    /// <summary>Field number for the "lefttime" field.</summary>
    public const int LefttimeFieldNumber = 20;
    private int lefttime_;
    /// <summary>
    ///解锁时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lefttime {
      get { return lefttime_; }
      set {
        lefttime_ = value;
      }
    }

    /// <summary>Field number for the "leaflet2sec" field.</summary>
    public const int Leaflet2SecFieldNumber = 21;
    private int leaflet2Sec_;
    /// <summary>
    ///增加报纸倒数秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Leaflet2Sec {
      get { return leaflet2Sec_; }
      set {
        leaflet2Sec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_DrawCardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_DrawCardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Drawfreetime != other.Drawfreetime) return false;
      if (Unlocktime != other.Unlocktime) return false;
      if (Drawcountleaflet1 != other.Drawcountleaflet1) return false;
      if (Drawcountleaflet2 != other.Drawcountleaflet2) return false;
      if (Drawcountleaflet3 != other.Drawcountleaflet3) return false;
      if (Drawgainleaflet1 != other.Drawgainleaflet1) return false;
      if (Drawgainleaflet2 != other.Drawgainleaflet2) return false;
      if (Drawgainleaflet3 != other.Drawgainleaflet3) return false;
      if (Lefttime != other.Lefttime) return false;
      if (Leaflet2Sec != other.Leaflet2Sec) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Drawfreetime != 0) hash ^= Drawfreetime.GetHashCode();
      if (Unlocktime != 0) hash ^= Unlocktime.GetHashCode();
      if (Drawcountleaflet1 != 0) hash ^= Drawcountleaflet1.GetHashCode();
      if (Drawcountleaflet2 != 0) hash ^= Drawcountleaflet2.GetHashCode();
      if (Drawcountleaflet3 != 0) hash ^= Drawcountleaflet3.GetHashCode();
      if (Drawgainleaflet1 != 0) hash ^= Drawgainleaflet1.GetHashCode();
      if (Drawgainleaflet2 != 0) hash ^= Drawgainleaflet2.GetHashCode();
      if (Drawgainleaflet3 != 0) hash ^= Drawgainleaflet3.GetHashCode();
      if (Lefttime != 0) hash ^= Lefttime.GetHashCode();
      if (Leaflet2Sec != 0) hash ^= Leaflet2Sec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Drawfreetime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Drawfreetime);
      }
      if (Unlocktime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Unlocktime);
      }
      if (Drawcountleaflet1 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Drawcountleaflet1);
      }
      if (Drawcountleaflet2 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Drawcountleaflet2);
      }
      if (Drawcountleaflet3 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Drawcountleaflet3);
      }
      if (Drawgainleaflet1 != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Drawgainleaflet1);
      }
      if (Drawgainleaflet2 != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Drawgainleaflet2);
      }
      if (Drawgainleaflet3 != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Drawgainleaflet3);
      }
      if (Lefttime != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Lefttime);
      }
      if (Leaflet2Sec != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Leaflet2Sec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Drawfreetime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Drawfreetime);
      }
      if (Unlocktime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unlocktime);
      }
      if (Drawcountleaflet1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Drawcountleaflet1);
      }
      if (Drawcountleaflet2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Drawcountleaflet2);
      }
      if (Drawcountleaflet3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Drawcountleaflet3);
      }
      if (Drawgainleaflet1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Drawgainleaflet1);
      }
      if (Drawgainleaflet2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Drawgainleaflet2);
      }
      if (Drawgainleaflet3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Drawgainleaflet3);
      }
      if (Lefttime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Lefttime);
      }
      if (Leaflet2Sec != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Leaflet2Sec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_DrawCardInfo other) {
      if (other == null) {
        return;
      }
      if (other.Drawfreetime != 0) {
        Drawfreetime = other.Drawfreetime;
      }
      if (other.Unlocktime != 0) {
        Unlocktime = other.Unlocktime;
      }
      if (other.Drawcountleaflet1 != 0) {
        Drawcountleaflet1 = other.Drawcountleaflet1;
      }
      if (other.Drawcountleaflet2 != 0) {
        Drawcountleaflet2 = other.Drawcountleaflet2;
      }
      if (other.Drawcountleaflet3 != 0) {
        Drawcountleaflet3 = other.Drawcountleaflet3;
      }
      if (other.Drawgainleaflet1 != 0) {
        Drawgainleaflet1 = other.Drawgainleaflet1;
      }
      if (other.Drawgainleaflet2 != 0) {
        Drawgainleaflet2 = other.Drawgainleaflet2;
      }
      if (other.Drawgainleaflet3 != 0) {
        Drawgainleaflet3 = other.Drawgainleaflet3;
      }
      if (other.Lefttime != 0) {
        Lefttime = other.Lefttime;
      }
      if (other.Leaflet2Sec != 0) {
        Leaflet2Sec = other.Leaflet2Sec;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Drawfreetime = input.ReadInt32();
            break;
          }
          case 16: {
            Unlocktime = input.ReadInt32();
            break;
          }
          case 40: {
            Drawcountleaflet1 = input.ReadInt32();
            break;
          }
          case 48: {
            Drawcountleaflet2 = input.ReadInt32();
            break;
          }
          case 56: {
            Drawcountleaflet3 = input.ReadInt32();
            break;
          }
          case 88: {
            Drawgainleaflet1 = input.ReadInt32();
            break;
          }
          case 96: {
            Drawgainleaflet2 = input.ReadInt32();
            break;
          }
          case 104: {
            Drawgainleaflet3 = input.ReadInt32();
            break;
          }
          case 160: {
            Lefttime = input.ReadInt32();
            break;
          }
          case 168: {
            Leaflet2Sec = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_DRAWCARD                = 1522      --抽卡
  /// </summary>
  public sealed partial class C2S_DrawCard : pb::IMessage<C2S_DrawCard> {
    private static readonly pb::MessageParser<C2S_DrawCard> _parser = new pb::MessageParser<C2S_DrawCard>(() => new C2S_DrawCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_DrawCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_DrawCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_DrawCard(C2S_DrawCard other) : this() {
      boxid_ = other.boxid_;
      cardid_ = other.cardid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_DrawCard Clone() {
      return new C2S_DrawCard(this);
    }

    /// <summary>Field number for the "boxid" field.</summary>
    public const int BoxidFieldNumber = 1;
    private int boxid_;
    /// <summary>
    ///100 喇叭抽卡 101广告抽卡 102 收音机抽卡 103随机出现球员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Boxid {
      get { return boxid_; }
      set {
        boxid_ = value;
      }
    }

    /// <summary>Field number for the "cardid" field.</summary>
    public const int CardidFieldNumber = 2;
    private int cardid_;
    /// <summary>
    ///随机球员卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cardid {
      get { return cardid_; }
      set {
        cardid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_DrawCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_DrawCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Boxid != other.Boxid) return false;
      if (Cardid != other.Cardid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Boxid != 0) hash ^= Boxid.GetHashCode();
      if (Cardid != 0) hash ^= Cardid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Boxid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Boxid);
      }
      if (Cardid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cardid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Boxid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Boxid);
      }
      if (Cardid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cardid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_DrawCard other) {
      if (other == null) {
        return;
      }
      if (other.Boxid != 0) {
        Boxid = other.Boxid;
      }
      if (other.Cardid != 0) {
        Cardid = other.Cardid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Boxid = input.ReadInt32();
            break;
          }
          case 16: {
            Cardid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2CL_DRAWCARD                = 2522      --抽卡
  /// </summary>
  public sealed partial class S2C_DrawCard : pb::IMessage<S2C_DrawCard> {
    private static readonly pb::MessageParser<S2C_DrawCard> _parser = new pb::MessageParser<S2C_DrawCard>(() => new S2C_DrawCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_DrawCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_DrawCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_DrawCard(S2C_DrawCard other) : this() {
      ret_ = other.ret_;
      boxid_ = other.boxid_;
      cardid_ = other.cardid_;
      rewards_ = other.rewards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_DrawCard Clone() {
      return new S2C_DrawCard(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "boxid" field.</summary>
    public const int BoxidFieldNumber = 2;
    private int boxid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Boxid {
      get { return boxid_; }
      set {
        boxid_ = value;
      }
    }

    /// <summary>Field number for the "cardid" field.</summary>
    public const int CardidFieldNumber = 3;
    private int cardid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cardid {
      get { return cardid_; }
      set {
        cardid_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_rewards_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> rewards_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_DrawCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_DrawCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Boxid != other.Boxid) return false;
      if (Cardid != other.Cardid) return false;
      if(!rewards_.Equals(other.rewards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Boxid != 0) hash ^= Boxid.GetHashCode();
      if (Cardid != 0) hash ^= Cardid.GetHashCode();
      hash ^= rewards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Boxid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Boxid);
      }
      if (Cardid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cardid);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Boxid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Boxid);
      }
      if (Cardid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cardid);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_DrawCard other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Boxid != 0) {
        Boxid = other.Boxid;
      }
      if (other.Cardid != 0) {
        Cardid = other.Cardid;
      }
      rewards_.Add(other.rewards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Boxid = input.ReadInt32();
            break;
          }
          case 24: {
            Cardid = input.ReadInt32();
            break;
          }
          case 34: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_UPLEVELCARD             = 1523      --卡牌等级升级
  /// </summary>
  public sealed partial class C2S_UpLevelCard : pb::IMessage<C2S_UpLevelCard> {
    private static readonly pb::MessageParser<C2S_UpLevelCard> _parser = new pb::MessageParser<C2S_UpLevelCard>(() => new C2S_UpLevelCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_UpLevelCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UpLevelCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UpLevelCard(C2S_UpLevelCard other) : this() {
      cardid_ = other.cardid_;
      cardlevel_ = other.cardlevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UpLevelCard Clone() {
      return new C2S_UpLevelCard(this);
    }

    /// <summary>Field number for the "cardid" field.</summary>
    public const int CardidFieldNumber = 1;
    private int cardid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cardid {
      get { return cardid_; }
      set {
        cardid_ = value;
      }
    }

    /// <summary>Field number for the "cardlevel" field.</summary>
    public const int CardlevelFieldNumber = 2;
    private int cardlevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cardlevel {
      get { return cardlevel_; }
      set {
        cardlevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_UpLevelCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_UpLevelCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cardid != other.Cardid) return false;
      if (Cardlevel != other.Cardlevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cardid != 0) hash ^= Cardid.GetHashCode();
      if (Cardlevel != 0) hash ^= Cardlevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cardid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Cardid);
      }
      if (Cardlevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cardlevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cardid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cardid);
      }
      if (Cardlevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cardlevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_UpLevelCard other) {
      if (other == null) {
        return;
      }
      if (other.Cardid != 0) {
        Cardid = other.Cardid;
      }
      if (other.Cardlevel != 0) {
        Cardlevel = other.Cardlevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Cardid = input.ReadInt32();
            break;
          }
          case 16: {
            Cardlevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2CL_UPLEVELCARD             = 2523      --卡牌等级升级
  /// </summary>
  public sealed partial class S2C_UpLevelCard : pb::IMessage<S2C_UpLevelCard> {
    private static readonly pb::MessageParser<S2C_UpLevelCard> _parser = new pb::MessageParser<S2C_UpLevelCard>(() => new S2C_UpLevelCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_UpLevelCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpLevelCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpLevelCard(S2C_UpLevelCard other) : this() {
      ret_ = other.ret_;
      cardid_ = other.cardid_;
      cardlevel_ = other.cardlevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpLevelCard Clone() {
      return new S2C_UpLevelCard(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "cardid" field.</summary>
    public const int CardidFieldNumber = 2;
    private int cardid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cardid {
      get { return cardid_; }
      set {
        cardid_ = value;
      }
    }

    /// <summary>Field number for the "cardlevel" field.</summary>
    public const int CardlevelFieldNumber = 3;
    private int cardlevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cardlevel {
      get { return cardlevel_; }
      set {
        cardlevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_UpLevelCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_UpLevelCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Cardid != other.Cardid) return false;
      if (Cardlevel != other.Cardlevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Cardid != 0) hash ^= Cardid.GetHashCode();
      if (Cardlevel != 0) hash ^= Cardlevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Cardid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cardid);
      }
      if (Cardlevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cardlevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Cardid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cardid);
      }
      if (Cardlevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cardlevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_UpLevelCard other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Cardid != 0) {
        Cardid = other.Cardid;
      }
      if (other.Cardlevel != 0) {
        Cardlevel = other.Cardlevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Cardid = input.ReadInt32();
            break;
          }
          case 24: {
            Cardlevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_RESETLEVELCARD          = 1524      --[[卡牌等级重置]] 
  /// </summary>
  public sealed partial class C2S_ResetLevelCard : pb::IMessage<C2S_ResetLevelCard> {
    private static readonly pb::MessageParser<C2S_ResetLevelCard> _parser = new pb::MessageParser<C2S_ResetLevelCard>(() => new C2S_ResetLevelCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_ResetLevelCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ResetLevelCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ResetLevelCard(C2S_ResetLevelCard other) : this() {
      cardid_ = other.cardid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ResetLevelCard Clone() {
      return new C2S_ResetLevelCard(this);
    }

    /// <summary>Field number for the "cardid" field.</summary>
    public const int CardidFieldNumber = 1;
    private int cardid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cardid {
      get { return cardid_; }
      set {
        cardid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_ResetLevelCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_ResetLevelCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cardid != other.Cardid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cardid != 0) hash ^= Cardid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cardid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Cardid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cardid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cardid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_ResetLevelCard other) {
      if (other == null) {
        return;
      }
      if (other.Cardid != 0) {
        Cardid = other.Cardid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Cardid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2CL_RESETLEVELCARD          = 2524      --[[卡牌等级重置]]  
  /// </summary>
  public sealed partial class S2C_ResetLevelCard : pb::IMessage<S2C_ResetLevelCard> {
    private static readonly pb::MessageParser<S2C_ResetLevelCard> _parser = new pb::MessageParser<S2C_ResetLevelCard>(() => new S2C_ResetLevelCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ResetLevelCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ResetLevelCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ResetLevelCard(S2C_ResetLevelCard other) : this() {
      ret_ = other.ret_;
      cardid_ = other.cardid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ResetLevelCard Clone() {
      return new S2C_ResetLevelCard(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "cardid" field.</summary>
    public const int CardidFieldNumber = 2;
    private int cardid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cardid {
      get { return cardid_; }
      set {
        cardid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ResetLevelCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ResetLevelCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Cardid != other.Cardid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Cardid != 0) hash ^= Cardid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Cardid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cardid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Cardid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cardid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ResetLevelCard other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Cardid != 0) {
        Cardid = other.Cardid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Cardid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_UPDATECARD              = 1528      --[[刷新卡牌]]  
  /// </summary>
  public sealed partial class C2S_UpdateCard : pb::IMessage<C2S_UpdateCard> {
    private static readonly pb::MessageParser<C2S_UpdateCard> _parser = new pb::MessageParser<C2S_UpdateCard>(() => new C2S_UpdateCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_UpdateCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UpdateCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UpdateCard(C2S_UpdateCard other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UpdateCard Clone() {
      return new C2S_UpdateCard(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_UpdateCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_UpdateCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_UpdateCard other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2CL_UPDATECARD              = 2528      --[[刷新卡牌]]  
  /// </summary>
  public sealed partial class S2C_UpdateCard : pb::IMessage<S2C_UpdateCard> {
    private static readonly pb::MessageParser<S2C_UpdateCard> _parser = new pb::MessageParser<S2C_UpdateCard>(() => new S2C_UpdateCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_UpdateCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpdateCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpdateCard(S2C_UpdateCard other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpdateCard Clone() {
      return new S2C_UpdateCard(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_UpdateCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_UpdateCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_UpdateCard other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_FUNDTASKFINISH          = 1525      --基金任务领取奖励
  /// </summary>
  public sealed partial class C2S_FundTaskFinish : pb::IMessage<C2S_FundTaskFinish> {
    private static readonly pb::MessageParser<C2S_FundTaskFinish> _parser = new pb::MessageParser<C2S_FundTaskFinish>(() => new C2S_FundTaskFinish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_FundTaskFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_FundTaskFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_FundTaskFinish(C2S_FundTaskFinish other) : this() {
      taskid_ = other.taskid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_FundTaskFinish Clone() {
      return new C2S_FundTaskFinish(this);
    }

    /// <summary>Field number for the "taskid" field.</summary>
    public const int TaskidFieldNumber = 1;
    private int taskid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Taskid {
      get { return taskid_; }
      set {
        taskid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_FundTaskFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_FundTaskFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Taskid != other.Taskid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Taskid != 0) hash ^= Taskid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Taskid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Taskid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Taskid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Taskid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_FundTaskFinish other) {
      if (other == null) {
        return;
      }
      if (other.Taskid != 0) {
        Taskid = other.Taskid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Taskid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2CL_FUNDTASKFINISH          = 2525      --基金任务领取奖励
  /// </summary>
  public sealed partial class S2C_FundTaskFinish : pb::IMessage<S2C_FundTaskFinish> {
    private static readonly pb::MessageParser<S2C_FundTaskFinish> _parser = new pb::MessageParser<S2C_FundTaskFinish>(() => new S2C_FundTaskFinish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_FundTaskFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FundTaskFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FundTaskFinish(S2C_FundTaskFinish other) : this() {
      ret_ = other.ret_;
      taskid_ = other.taskid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_FundTaskFinish Clone() {
      return new S2C_FundTaskFinish(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "taskid" field.</summary>
    public const int TaskidFieldNumber = 2;
    private int taskid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Taskid {
      get { return taskid_; }
      set {
        taskid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_FundTaskFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_FundTaskFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Taskid != other.Taskid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Taskid != 0) hash ^= Taskid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Taskid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Taskid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Taskid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Taskid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_FundTaskFinish other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Taskid != 0) {
        Taskid = other.Taskid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Taskid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_GETFUNDTASKLIST          = 1526      --[[基金列表]] 
  /// </summary>
  public sealed partial class C2S_GetFundTaskList : pb::IMessage<C2S_GetFundTaskList> {
    private static readonly pb::MessageParser<C2S_GetFundTaskList> _parser = new pb::MessageParser<C2S_GetFundTaskList>(() => new C2S_GetFundTaskList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GetFundTaskList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetFundTaskList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetFundTaskList(C2S_GetFundTaskList other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetFundTaskList Clone() {
      return new C2S_GetFundTaskList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GetFundTaskList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GetFundTaskList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GetFundTaskList other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2CL_GETFUNDTASKLIST          = 2526      --[[基金列表]]
  /// </summary>
  public sealed partial class S2C_GetFundTaskList : pb::IMessage<S2C_GetFundTaskList> {
    private static readonly pb::MessageParser<S2C_GetFundTaskList> _parser = new pb::MessageParser<S2C_GetFundTaskList>(() => new S2C_GetFundTaskList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GetFundTaskList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetFundTaskList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetFundTaskList(S2C_GetFundTaskList other) : this() {
      fundpass_ = other.fundpass_;
      fundlist_ = other.fundlist_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetFundTaskList Clone() {
      return new S2C_GetFundTaskList(this);
    }

    /// <summary>Field number for the "fundpass" field.</summary>
    public const int FundpassFieldNumber = 1;
    private int fundpass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Fundpass {
      get { return fundpass_; }
      set {
        fundpass_ = value;
      }
    }

    /// <summary>Field number for the "fundlist" field.</summary>
    public const int FundlistFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_fundlist_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> fundlist_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Fundlist {
      get { return fundlist_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GetFundTaskList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GetFundTaskList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fundpass != other.Fundpass) return false;
      if(!fundlist_.Equals(other.fundlist_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fundpass != 0) hash ^= Fundpass.GetHashCode();
      hash ^= fundlist_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fundpass != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Fundpass);
      }
      fundlist_.WriteTo(output, _repeated_fundlist_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fundpass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fundpass);
      }
      size += fundlist_.CalculateSize(_repeated_fundlist_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GetFundTaskList other) {
      if (other == null) {
        return;
      }
      if (other.Fundpass != 0) {
        Fundpass = other.Fundpass;
      }
      fundlist_.Add(other.fundlist_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Fundpass = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            fundlist_.AddEntriesFrom(input, _repeated_fundlist_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_CL2WD_PASSINFO                = 1530      --[[请求通行证信息]]    
  /// </summary>
  public sealed partial class C2S_PassInfo : pb::IMessage<C2S_PassInfo> {
    private static readonly pb::MessageParser<C2S_PassInfo> _parser = new pb::MessageParser<C2S_PassInfo>(() => new C2S_PassInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_PassInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_PassInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_PassInfo(C2S_PassInfo other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_PassInfo Clone() {
      return new C2S_PassInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_PassInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_PassInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_PassInfo other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_WD2LC_PASSINFO                = 2530      --[[请求通行证信息]]    
  /// </summary>
  public sealed partial class S2C_PassInfo : pb::IMessage<S2C_PassInfo> {
    private static readonly pb::MessageParser<S2C_PassInfo> _parser = new pb::MessageParser<S2C_PassInfo>(() => new S2C_PassInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_PassInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_PassInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_PassInfo(S2C_PassInfo other) : this() {
      battlepasstime_ = other.battlepasstime_;
      battlepasscount_ = other.battlepasscount_;
      battlepassexp_ = other.battlepassexp_;
      battlepasslevel_ = other.battlepasslevel_;
      battlepasscoin_ = other.battlepasscoin_;
      battlepassspl_ = other.battlepassspl_;
      battlepasssgain_ = other.battlepasssgain_.Clone();
      battlepassslimit_ = other.battlepassslimit_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_PassInfo Clone() {
      return new S2C_PassInfo(this);
    }

    /// <summary>Field number for the "battlepasstime" field.</summary>
    public const int BattlepasstimeFieldNumber = 1;
    private int battlepasstime_;
    /// <summary>
    ///通行证时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Battlepasstime {
      get { return battlepasstime_; }
      set {
        battlepasstime_ = value;
      }
    }

    /// <summary>Field number for the "battlepasscount" field.</summary>
    public const int BattlepasscountFieldNumber = 2;
    private int battlepasscount_;
    /// <summary>
    ///通行证周期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Battlepasscount {
      get { return battlepasscount_; }
      set {
        battlepasscount_ = value;
      }
    }

    /// <summary>Field number for the "battlepassexp" field.</summary>
    public const int BattlepassexpFieldNumber = 3;
    private int battlepassexp_;
    /// <summary>
    ///通行证经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Battlepassexp {
      get { return battlepassexp_; }
      set {
        battlepassexp_ = value;
      }
    }

    /// <summary>Field number for the "battlepasslevel" field.</summary>
    public const int BattlepasslevelFieldNumber = 4;
    private int battlepasslevel_;
    /// <summary>
    /// 通行证等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Battlepasslevel {
      get { return battlepasslevel_; }
      set {
        battlepasslevel_ = value;
      }
    }

    /// <summary>Field number for the "battlepasscoin" field.</summary>
    public const int BattlepasscoinFieldNumber = 5;
    private int battlepasscoin_;
    /// <summary>
    ///通行证货币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Battlepasscoin {
      get { return battlepasscoin_; }
      set {
        battlepasscoin_ = value;
      }
    }

    /// <summary>Field number for the "battlepassspl" field.</summary>
    public const int BattlepasssplFieldNumber = 6;
    private int battlepassspl_;
    /// <summary>
    ///通行证特殊权限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Battlepassspl {
      get { return battlepassspl_; }
      set {
        battlepassspl_ = value;
      }
    }

    /// <summary>Field number for the "battlepasssgain" field.</summary>
    public const int BattlepasssgainFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_battlepasssgain_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> battlepasssgain_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///通行证已经领取的  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Battlepasssgain {
      get { return battlepasssgain_; }
    }

    /// <summary>Field number for the "battlepassslimit" field.</summary>
    public const int BattlepassslimitFieldNumber = 8;
    private static readonly pbc::MapField<int, int>.Codec _map_battlepassslimit_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 66);
    private readonly pbc::MapField<int, int> battlepassslimit_ = new pbc::MapField<int, int>();
    /// <summary>
    ///通行证限购
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Battlepassslimit {
      get { return battlepassslimit_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_PassInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_PassInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Battlepasstime != other.Battlepasstime) return false;
      if (Battlepasscount != other.Battlepasscount) return false;
      if (Battlepassexp != other.Battlepassexp) return false;
      if (Battlepasslevel != other.Battlepasslevel) return false;
      if (Battlepasscoin != other.Battlepasscoin) return false;
      if (Battlepassspl != other.Battlepassspl) return false;
      if(!battlepasssgain_.Equals(other.battlepasssgain_)) return false;
      if (!Battlepassslimit.Equals(other.Battlepassslimit)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Battlepasstime != 0) hash ^= Battlepasstime.GetHashCode();
      if (Battlepasscount != 0) hash ^= Battlepasscount.GetHashCode();
      if (Battlepassexp != 0) hash ^= Battlepassexp.GetHashCode();
      if (Battlepasslevel != 0) hash ^= Battlepasslevel.GetHashCode();
      if (Battlepasscoin != 0) hash ^= Battlepasscoin.GetHashCode();
      if (Battlepassspl != 0) hash ^= Battlepassspl.GetHashCode();
      hash ^= battlepasssgain_.GetHashCode();
      hash ^= Battlepassslimit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Battlepasstime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Battlepasstime);
      }
      if (Battlepasscount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Battlepasscount);
      }
      if (Battlepassexp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Battlepassexp);
      }
      if (Battlepasslevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Battlepasslevel);
      }
      if (Battlepasscoin != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Battlepasscoin);
      }
      if (Battlepassspl != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Battlepassspl);
      }
      battlepasssgain_.WriteTo(output, _repeated_battlepasssgain_codec);
      battlepassslimit_.WriteTo(output, _map_battlepassslimit_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Battlepasstime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Battlepasstime);
      }
      if (Battlepasscount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Battlepasscount);
      }
      if (Battlepassexp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Battlepassexp);
      }
      if (Battlepasslevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Battlepasslevel);
      }
      if (Battlepasscoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Battlepasscoin);
      }
      if (Battlepassspl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Battlepassspl);
      }
      size += battlepasssgain_.CalculateSize(_repeated_battlepasssgain_codec);
      size += battlepassslimit_.CalculateSize(_map_battlepassslimit_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_PassInfo other) {
      if (other == null) {
        return;
      }
      if (other.Battlepasstime != 0) {
        Battlepasstime = other.Battlepasstime;
      }
      if (other.Battlepasscount != 0) {
        Battlepasscount = other.Battlepasscount;
      }
      if (other.Battlepassexp != 0) {
        Battlepassexp = other.Battlepassexp;
      }
      if (other.Battlepasslevel != 0) {
        Battlepasslevel = other.Battlepasslevel;
      }
      if (other.Battlepasscoin != 0) {
        Battlepasscoin = other.Battlepasscoin;
      }
      if (other.Battlepassspl != 0) {
        Battlepassspl = other.Battlepassspl;
      }
      battlepasssgain_.Add(other.battlepasssgain_);
      battlepassslimit_.Add(other.battlepassslimit_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Battlepasstime = input.ReadInt32();
            break;
          }
          case 16: {
            Battlepasscount = input.ReadInt32();
            break;
          }
          case 24: {
            Battlepassexp = input.ReadInt32();
            break;
          }
          case 32: {
            Battlepasslevel = input.ReadInt32();
            break;
          }
          case 40: {
            Battlepasscoin = input.ReadInt32();
            break;
          }
          case 48: {
            Battlepassspl = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            battlepasssgain_.AddEntriesFrom(input, _repeated_battlepasssgain_codec);
            break;
          }
          case 66: {
            battlepassslimit_.AddEntriesFrom(input, _map_battlepassslimit_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_BUYPASS                 = 1531      --购买专属通行证
  /// </summary>
  public sealed partial class C2S_BuyPass : pb::IMessage<C2S_BuyPass> {
    private static readonly pb::MessageParser<C2S_BuyPass> _parser = new pb::MessageParser<C2S_BuyPass>(() => new C2S_BuyPass());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_BuyPass> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BuyPass() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BuyPass(C2S_BuyPass other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BuyPass Clone() {
      return new C2S_BuyPass(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_BuyPass);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_BuyPass other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_BuyPass other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2LC_BUYPASS                 = 2531      --购买专属通行证
  /// </summary>
  public sealed partial class S2C_BuyPass : pb::IMessage<S2C_BuyPass> {
    private static readonly pb::MessageParser<S2C_BuyPass> _parser = new pb::MessageParser<S2C_BuyPass>(() => new S2C_BuyPass());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_BuyPass> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BuyPass() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BuyPass(S2C_BuyPass other) : this() {
      ret_ = other.ret_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BuyPass Clone() {
      return new S2C_BuyPass(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_BuyPass);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_BuyPass other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_BuyPass other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_GETPASSITEM             = 1532      --领取通行证奖励
  /// </summary>
  public sealed partial class C2S_GetPassItem : pb::IMessage<C2S_GetPassItem> {
    private static readonly pb::MessageParser<C2S_GetPassItem> _parser = new pb::MessageParser<C2S_GetPassItem>(() => new C2S_GetPassItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GetPassItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetPassItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetPassItem(C2S_GetPassItem other) : this() {
      giftid_ = other.giftid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetPassItem Clone() {
      return new C2S_GetPassItem(this);
    }

    /// <summary>Field number for the "giftid" field.</summary>
    public const int GiftidFieldNumber = 1;
    private int giftid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Giftid {
      get { return giftid_; }
      set {
        giftid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GetPassItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GetPassItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Giftid != other.Giftid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Giftid != 0) hash ^= Giftid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Giftid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Giftid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Giftid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Giftid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GetPassItem other) {
      if (other == null) {
        return;
      }
      if (other.Giftid != 0) {
        Giftid = other.Giftid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Giftid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2LC_GETPASSITEM             = 2532      --领取通行证奖励
  /// </summary>
  public sealed partial class S2C_GetPassItem : pb::IMessage<S2C_GetPassItem> {
    private static readonly pb::MessageParser<S2C_GetPassItem> _parser = new pb::MessageParser<S2C_GetPassItem>(() => new S2C_GetPassItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GetPassItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetPassItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetPassItem(S2C_GetPassItem other) : this() {
      ret_ = other.ret_;
      giftid_ = other.giftid_;
      rewards_ = other.rewards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetPassItem Clone() {
      return new S2C_GetPassItem(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "giftid" field.</summary>
    public const int GiftidFieldNumber = 2;
    private int giftid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Giftid {
      get { return giftid_; }
      set {
        giftid_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_rewards_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> rewards_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GetPassItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GetPassItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Giftid != other.Giftid) return false;
      if(!rewards_.Equals(other.rewards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Giftid != 0) hash ^= Giftid.GetHashCode();
      hash ^= rewards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Giftid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Giftid);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Giftid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Giftid);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GetPassItem other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Giftid != 0) {
        Giftid = other.Giftid;
      }
      rewards_.Add(other.rewards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Giftid = input.ReadInt32();
            break;
          }
          case 26: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_BUYPASSSHOP             = 1533      --[[兑换通行证商品]]    
  /// </summary>
  public sealed partial class C2S_BuyPassShop : pb::IMessage<C2S_BuyPassShop> {
    private static readonly pb::MessageParser<C2S_BuyPassShop> _parser = new pb::MessageParser<C2S_BuyPassShop>(() => new C2S_BuyPassShop());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_BuyPassShop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BuyPassShop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BuyPassShop(C2S_BuyPassShop other) : this() {
      giftid_ = other.giftid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BuyPassShop Clone() {
      return new C2S_BuyPassShop(this);
    }

    /// <summary>Field number for the "giftid" field.</summary>
    public const int GiftidFieldNumber = 1;
    private int giftid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Giftid {
      get { return giftid_; }
      set {
        giftid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_BuyPassShop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_BuyPassShop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Giftid != other.Giftid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Giftid != 0) hash ^= Giftid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Giftid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Giftid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Giftid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Giftid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_BuyPassShop other) {
      if (other == null) {
        return;
      }
      if (other.Giftid != 0) {
        Giftid = other.Giftid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Giftid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2LC_BUYPASSSHOP             = 2533      --[[兑换通行证商品]]    
  /// </summary>
  public sealed partial class S2C_BuyPassShop : pb::IMessage<S2C_BuyPassShop> {
    private static readonly pb::MessageParser<S2C_BuyPassShop> _parser = new pb::MessageParser<S2C_BuyPassShop>(() => new S2C_BuyPassShop());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_BuyPassShop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BuyPassShop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BuyPassShop(S2C_BuyPassShop other) : this() {
      ret_ = other.ret_;
      giftid_ = other.giftid_;
      battlepassslimit_ = other.battlepassslimit_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BuyPassShop Clone() {
      return new S2C_BuyPassShop(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "giftid" field.</summary>
    public const int GiftidFieldNumber = 2;
    private int giftid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Giftid {
      get { return giftid_; }
      set {
        giftid_ = value;
      }
    }

    /// <summary>Field number for the "battlepassslimit" field.</summary>
    public const int BattlepassslimitFieldNumber = 3;
    private static readonly pbc::MapField<int, int>.Codec _map_battlepassslimit_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 26);
    private readonly pbc::MapField<int, int> battlepassslimit_ = new pbc::MapField<int, int>();
    /// <summary>
    ///通行证限购
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Battlepassslimit {
      get { return battlepassslimit_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_BuyPassShop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_BuyPassShop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Giftid != other.Giftid) return false;
      if (!Battlepassslimit.Equals(other.Battlepassslimit)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Giftid != 0) hash ^= Giftid.GetHashCode();
      hash ^= Battlepassslimit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Giftid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Giftid);
      }
      battlepassslimit_.WriteTo(output, _map_battlepassslimit_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Giftid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Giftid);
      }
      size += battlepassslimit_.CalculateSize(_map_battlepassslimit_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_BuyPassShop other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Giftid != 0) {
        Giftid = other.Giftid;
      }
      battlepassslimit_.Add(other.battlepassslimit_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Giftid = input.ReadInt32();
            break;
          }
          case 26: {
            battlepassslimit_.AddEntriesFrom(input, _map_battlepassslimit_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_BUYPASSLEVEL            = 1539      --[[购买通行证等级]]    
  /// </summary>
  public sealed partial class C2S_BuyPassLevel : pb::IMessage<C2S_BuyPassLevel> {
    private static readonly pb::MessageParser<C2S_BuyPassLevel> _parser = new pb::MessageParser<C2S_BuyPassLevel>(() => new C2S_BuyPassLevel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_BuyPassLevel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BuyPassLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BuyPassLevel(C2S_BuyPassLevel other) : this() {
      levelid_ = other.levelid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_BuyPassLevel Clone() {
      return new C2S_BuyPassLevel(this);
    }

    /// <summary>Field number for the "levelid" field.</summary>
    public const int LevelidFieldNumber = 1;
    private int levelid_;
    /// <summary>
    ///档位  1,2,3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Levelid {
      get { return levelid_; }
      set {
        levelid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_BuyPassLevel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_BuyPassLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Levelid != other.Levelid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Levelid != 0) hash ^= Levelid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Levelid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Levelid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Levelid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Levelid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_BuyPassLevel other) {
      if (other == null) {
        return;
      }
      if (other.Levelid != 0) {
        Levelid = other.Levelid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Levelid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2LC_BUYPASSLEVEL            = 2539      --[[购买通行证等级]]    
  /// </summary>
  public sealed partial class S2C_BuyPassLevel : pb::IMessage<S2C_BuyPassLevel> {
    private static readonly pb::MessageParser<S2C_BuyPassLevel> _parser = new pb::MessageParser<S2C_BuyPassLevel>(() => new S2C_BuyPassLevel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_BuyPassLevel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BuyPassLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BuyPassLevel(S2C_BuyPassLevel other) : this() {
      ret_ = other.ret_;
      levelid_ = other.levelid_;
      battlepasslevel_ = other.battlepasslevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BuyPassLevel Clone() {
      return new S2C_BuyPassLevel(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "levelid" field.</summary>
    public const int LevelidFieldNumber = 2;
    private int levelid_;
    /// <summary>
    ///档位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Levelid {
      get { return levelid_; }
      set {
        levelid_ = value;
      }
    }

    /// <summary>Field number for the "battlepasslevel" field.</summary>
    public const int BattlepasslevelFieldNumber = 3;
    private int battlepasslevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Battlepasslevel {
      get { return battlepasslevel_; }
      set {
        battlepasslevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_BuyPassLevel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_BuyPassLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Levelid != other.Levelid) return false;
      if (Battlepasslevel != other.Battlepasslevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Levelid != 0) hash ^= Levelid.GetHashCode();
      if (Battlepasslevel != 0) hash ^= Battlepasslevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Levelid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Levelid);
      }
      if (Battlepasslevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Battlepasslevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Levelid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Levelid);
      }
      if (Battlepasslevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Battlepasslevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_BuyPassLevel other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Levelid != 0) {
        Levelid = other.Levelid;
      }
      if (other.Battlepasslevel != 0) {
        Battlepasslevel = other.Battlepasslevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Levelid = input.ReadInt32();
            break;
          }
          case 24: {
            Battlepasslevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_CL2WD_GETESHOPINFO            = 1541      --[[商城信息]]   
  /// </summary>
  public sealed partial class C2S_GetShopInfo : pb::IMessage<C2S_GetShopInfo> {
    private static readonly pb::MessageParser<C2S_GetShopInfo> _parser = new pb::MessageParser<C2S_GetShopInfo>(() => new C2S_GetShopInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GetShopInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetShopInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetShopInfo(C2S_GetShopInfo other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetShopInfo Clone() {
      return new C2S_GetShopInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GetShopInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GetShopInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GetShopInfo other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_WD2LC_GETESHOPINFO            = 2541      --[[商城信息]]  
  /// </summary>
  public sealed partial class S2C_GetShopInfo : pb::IMessage<S2C_GetShopInfo> {
    private static readonly pb::MessageParser<S2C_GetShopInfo> _parser = new pb::MessageParser<S2C_GetShopInfo>(() => new S2C_GetShopInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GetShopInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetShopInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetShopInfo(S2C_GetShopInfo other) : this() {
      curtime_ = other.curtime_;
      dayrefreshtime_ = other.dayrefreshtime_;
      weekrefreshtime_ = other.weekrefreshtime_;
      monthrefreshtime_ = other.monthrefreshtime_;
      drawcardcount_ = other.drawcardcount_;
      firstgiftlist_ = other.firstgiftlist_.Clone();
      daygiftlist_ = other.daygiftlist_.Clone();
      weekgiftlist_ = other.weekgiftlist_.Clone();
      monthgiftlist_ = other.monthgiftlist_.Clone();
      shoprancardlist_ = other.shoprancardlist_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetShopInfo Clone() {
      return new S2C_GetShopInfo(this);
    }

    /// <summary>Field number for the "curtime" field.</summary>
    public const int CurtimeFieldNumber = 1;
    private int curtime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Curtime {
      get { return curtime_; }
      set {
        curtime_ = value;
      }
    }

    /// <summary>Field number for the "dayrefreshtime" field.</summary>
    public const int DayrefreshtimeFieldNumber = 2;
    private int dayrefreshtime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dayrefreshtime {
      get { return dayrefreshtime_; }
      set {
        dayrefreshtime_ = value;
      }
    }

    /// <summary>Field number for the "weekrefreshtime" field.</summary>
    public const int WeekrefreshtimeFieldNumber = 3;
    private int weekrefreshtime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Weekrefreshtime {
      get { return weekrefreshtime_; }
      set {
        weekrefreshtime_ = value;
      }
    }

    /// <summary>Field number for the "monthrefreshtime" field.</summary>
    public const int MonthrefreshtimeFieldNumber = 4;
    private int monthrefreshtime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Monthrefreshtime {
      get { return monthrefreshtime_; }
      set {
        monthrefreshtime_ = value;
      }
    }

    /// <summary>Field number for the "drawcardcount" field.</summary>
    public const int DrawcardcountFieldNumber = 5;
    private int drawcardcount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Drawcardcount {
      get { return drawcardcount_; }
      set {
        drawcardcount_ = value;
      }
    }

    /// <summary>Field number for the "firstgiftlist" field.</summary>
    public const int FirstgiftlistFieldNumber = 11;
    private static readonly pbc::MapField<int, global::PBase.PB_GiftPack>.Codec _map_firstgiftlist_codec
        = new pbc::MapField<int, global::PBase.PB_GiftPack>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::PBase.PB_GiftPack.Parser), 90);
    private readonly pbc::MapField<int, global::PBase.PB_GiftPack> firstgiftlist_ = new pbc::MapField<int, global::PBase.PB_GiftPack>();
    /// <summary>
    ///     --首冲礼包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::PBase.PB_GiftPack> Firstgiftlist {
      get { return firstgiftlist_; }
    }

    /// <summary>Field number for the "daygiftlist" field.</summary>
    public const int DaygiftlistFieldNumber = 12;
    private static readonly pbc::MapField<int, global::PBase.PB_GiftPack>.Codec _map_daygiftlist_codec
        = new pbc::MapField<int, global::PBase.PB_GiftPack>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::PBase.PB_GiftPack.Parser), 98);
    private readonly pbc::MapField<int, global::PBase.PB_GiftPack> daygiftlist_ = new pbc::MapField<int, global::PBase.PB_GiftPack>();
    /// <summary>
    ///       --每日礼包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::PBase.PB_GiftPack> Daygiftlist {
      get { return daygiftlist_; }
    }

    /// <summary>Field number for the "weekgiftlist" field.</summary>
    public const int WeekgiftlistFieldNumber = 13;
    private static readonly pbc::MapField<int, global::PBase.PB_GiftPack>.Codec _map_weekgiftlist_codec
        = new pbc::MapField<int, global::PBase.PB_GiftPack>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::PBase.PB_GiftPack.Parser), 106);
    private readonly pbc::MapField<int, global::PBase.PB_GiftPack> weekgiftlist_ = new pbc::MapField<int, global::PBase.PB_GiftPack>();
    /// <summary>
    ///      --周礼包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::PBase.PB_GiftPack> Weekgiftlist {
      get { return weekgiftlist_; }
    }

    /// <summary>Field number for the "monthgiftlist" field.</summary>
    public const int MonthgiftlistFieldNumber = 14;
    private static readonly pbc::MapField<int, global::PBase.PB_GiftPack>.Codec _map_monthgiftlist_codec
        = new pbc::MapField<int, global::PBase.PB_GiftPack>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::PBase.PB_GiftPack.Parser), 114);
    private readonly pbc::MapField<int, global::PBase.PB_GiftPack> monthgiftlist_ = new pbc::MapField<int, global::PBase.PB_GiftPack>();
    /// <summary>
    ///     --月礼包
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::PBase.PB_GiftPack> Monthgiftlist {
      get { return monthgiftlist_; }
    }

    /// <summary>Field number for the "shoprancardlist" field.</summary>
    public const int ShoprancardlistFieldNumber = 15;
    private static readonly pb::FieldCodec<global::PBase.PB_RanCard> _repeated_shoprancardlist_codec
        = pb::FieldCodec.ForMessage(122, global::PBase.PB_RanCard.Parser);
    private readonly pbc::RepeatedField<global::PBase.PB_RanCard> shoprancardlist_ = new pbc::RepeatedField<global::PBase.PB_RanCard>();
    /// <summary>
    ///   --每日随机卡片商品 { 1配置id 2卡牌id 卡牌num 4购买次数 }    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PBase.PB_RanCard> Shoprancardlist {
      get { return shoprancardlist_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GetShopInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GetShopInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Curtime != other.Curtime) return false;
      if (Dayrefreshtime != other.Dayrefreshtime) return false;
      if (Weekrefreshtime != other.Weekrefreshtime) return false;
      if (Monthrefreshtime != other.Monthrefreshtime) return false;
      if (Drawcardcount != other.Drawcardcount) return false;
      if (!Firstgiftlist.Equals(other.Firstgiftlist)) return false;
      if (!Daygiftlist.Equals(other.Daygiftlist)) return false;
      if (!Weekgiftlist.Equals(other.Weekgiftlist)) return false;
      if (!Monthgiftlist.Equals(other.Monthgiftlist)) return false;
      if(!shoprancardlist_.Equals(other.shoprancardlist_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Curtime != 0) hash ^= Curtime.GetHashCode();
      if (Dayrefreshtime != 0) hash ^= Dayrefreshtime.GetHashCode();
      if (Weekrefreshtime != 0) hash ^= Weekrefreshtime.GetHashCode();
      if (Monthrefreshtime != 0) hash ^= Monthrefreshtime.GetHashCode();
      if (Drawcardcount != 0) hash ^= Drawcardcount.GetHashCode();
      hash ^= Firstgiftlist.GetHashCode();
      hash ^= Daygiftlist.GetHashCode();
      hash ^= Weekgiftlist.GetHashCode();
      hash ^= Monthgiftlist.GetHashCode();
      hash ^= shoprancardlist_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Curtime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Curtime);
      }
      if (Dayrefreshtime != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Dayrefreshtime);
      }
      if (Weekrefreshtime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Weekrefreshtime);
      }
      if (Monthrefreshtime != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Monthrefreshtime);
      }
      if (Drawcardcount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Drawcardcount);
      }
      firstgiftlist_.WriteTo(output, _map_firstgiftlist_codec);
      daygiftlist_.WriteTo(output, _map_daygiftlist_codec);
      weekgiftlist_.WriteTo(output, _map_weekgiftlist_codec);
      monthgiftlist_.WriteTo(output, _map_monthgiftlist_codec);
      shoprancardlist_.WriteTo(output, _repeated_shoprancardlist_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Curtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Curtime);
      }
      if (Dayrefreshtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dayrefreshtime);
      }
      if (Weekrefreshtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weekrefreshtime);
      }
      if (Monthrefreshtime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Monthrefreshtime);
      }
      if (Drawcardcount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Drawcardcount);
      }
      size += firstgiftlist_.CalculateSize(_map_firstgiftlist_codec);
      size += daygiftlist_.CalculateSize(_map_daygiftlist_codec);
      size += weekgiftlist_.CalculateSize(_map_weekgiftlist_codec);
      size += monthgiftlist_.CalculateSize(_map_monthgiftlist_codec);
      size += shoprancardlist_.CalculateSize(_repeated_shoprancardlist_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GetShopInfo other) {
      if (other == null) {
        return;
      }
      if (other.Curtime != 0) {
        Curtime = other.Curtime;
      }
      if (other.Dayrefreshtime != 0) {
        Dayrefreshtime = other.Dayrefreshtime;
      }
      if (other.Weekrefreshtime != 0) {
        Weekrefreshtime = other.Weekrefreshtime;
      }
      if (other.Monthrefreshtime != 0) {
        Monthrefreshtime = other.Monthrefreshtime;
      }
      if (other.Drawcardcount != 0) {
        Drawcardcount = other.Drawcardcount;
      }
      firstgiftlist_.Add(other.firstgiftlist_);
      daygiftlist_.Add(other.daygiftlist_);
      weekgiftlist_.Add(other.weekgiftlist_);
      monthgiftlist_.Add(other.monthgiftlist_);
      shoprancardlist_.Add(other.shoprancardlist_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Curtime = input.ReadInt32();
            break;
          }
          case 16: {
            Dayrefreshtime = input.ReadInt32();
            break;
          }
          case 24: {
            Weekrefreshtime = input.ReadInt32();
            break;
          }
          case 32: {
            Monthrefreshtime = input.ReadInt32();
            break;
          }
          case 40: {
            Drawcardcount = input.ReadInt32();
            break;
          }
          case 90: {
            firstgiftlist_.AddEntriesFrom(input, _map_firstgiftlist_codec);
            break;
          }
          case 98: {
            daygiftlist_.AddEntriesFrom(input, _map_daygiftlist_codec);
            break;
          }
          case 106: {
            weekgiftlist_.AddEntriesFrom(input, _map_weekgiftlist_codec);
            break;
          }
          case 114: {
            monthgiftlist_.AddEntriesFrom(input, _map_monthgiftlist_codec);
            break;
          }
          case 122: {
            shoprancardlist_.AddEntriesFrom(input, _repeated_shoprancardlist_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_WD2LC_UPDATESHOPGIFT          = 2546      --[[商城购买礼包信息]] 
  /// </summary>
  public sealed partial class S2C_UpdateShopGift : pb::IMessage<S2C_UpdateShopGift> {
    private static readonly pb::MessageParser<S2C_UpdateShopGift> _parser = new pb::MessageParser<S2C_UpdateShopGift>(() => new S2C_UpdateShopGift());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_UpdateShopGift> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpdateShopGift() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpdateShopGift(S2C_UpdateShopGift other) : this() {
      giftinfo_ = other.giftinfo_ != null ? other.giftinfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UpdateShopGift Clone() {
      return new S2C_UpdateShopGift(this);
    }

    /// <summary>Field number for the "giftinfo" field.</summary>
    public const int GiftinfoFieldNumber = 1;
    private global::PBase.PB_GiftPack giftinfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PBase.PB_GiftPack Giftinfo {
      get { return giftinfo_; }
      set {
        giftinfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_UpdateShopGift);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_UpdateShopGift other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Giftinfo, other.Giftinfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (giftinfo_ != null) hash ^= Giftinfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (giftinfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Giftinfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (giftinfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Giftinfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_UpdateShopGift other) {
      if (other == null) {
        return;
      }
      if (other.giftinfo_ != null) {
        if (giftinfo_ == null) {
          giftinfo_ = new global::PBase.PB_GiftPack();
        }
        Giftinfo.MergeFrom(other.Giftinfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (giftinfo_ == null) {
              giftinfo_ = new global::PBase.PB_GiftPack();
            }
            input.ReadMessage(giftinfo_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_GETEMONTHCARDINFO       = 1543      --[[月卡信息]]    
  /// </summary>
  public sealed partial class C2S_GetMonthCardInfo : pb::IMessage<C2S_GetMonthCardInfo> {
    private static readonly pb::MessageParser<C2S_GetMonthCardInfo> _parser = new pb::MessageParser<C2S_GetMonthCardInfo>(() => new C2S_GetMonthCardInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GetMonthCardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetMonthCardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetMonthCardInfo(C2S_GetMonthCardInfo other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetMonthCardInfo Clone() {
      return new C2S_GetMonthCardInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GetMonthCardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GetMonthCardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GetMonthCardInfo other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2LC_GETEMONTHCARDINFO       = 2543      --[[月卡信息]]    
  /// </summary>
  public sealed partial class S2C_GetMonthCardInfo : pb::IMessage<S2C_GetMonthCardInfo> {
    private static readonly pb::MessageParser<S2C_GetMonthCardInfo> _parser = new pb::MessageParser<S2C_GetMonthCardInfo>(() => new S2C_GetMonthCardInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GetMonthCardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetMonthCardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetMonthCardInfo(S2C_GetMonthCardInfo other) : this() {
      monthcardinfo_ = other.monthcardinfo_.Clone();
      monthcardtime_ = other.monthcardtime_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetMonthCardInfo Clone() {
      return new S2C_GetMonthCardInfo(this);
    }

    /// <summary>Field number for the "monthcardinfo" field.</summary>
    public const int MonthcardinfoFieldNumber = 1;
    private static readonly pbc::MapField<int, int>.Codec _map_monthcardinfo_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
    private readonly pbc::MapField<int, int> monthcardinfo_ = new pbc::MapField<int, int>();
    /// <summary>
    ///购买信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Monthcardinfo {
      get { return monthcardinfo_; }
    }

    /// <summary>Field number for the "monthcardtime" field.</summary>
    public const int MonthcardtimeFieldNumber = 2;
    private static readonly pbc::MapField<int, int>.Codec _map_monthcardtime_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
    private readonly pbc::MapField<int, int> monthcardtime_ = new pbc::MapField<int, int>();
    /// <summary>
    ///领取时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Monthcardtime {
      get { return monthcardtime_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GetMonthCardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GetMonthCardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Monthcardinfo.Equals(other.Monthcardinfo)) return false;
      if (!Monthcardtime.Equals(other.Monthcardtime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Monthcardinfo.GetHashCode();
      hash ^= Monthcardtime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      monthcardinfo_.WriteTo(output, _map_monthcardinfo_codec);
      monthcardtime_.WriteTo(output, _map_monthcardtime_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += monthcardinfo_.CalculateSize(_map_monthcardinfo_codec);
      size += monthcardtime_.CalculateSize(_map_monthcardtime_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GetMonthCardInfo other) {
      if (other == null) {
        return;
      }
      monthcardinfo_.Add(other.monthcardinfo_);
      monthcardtime_.Add(other.monthcardtime_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            monthcardinfo_.AddEntriesFrom(input, _map_monthcardinfo_codec);
            break;
          }
          case 18: {
            monthcardtime_.AddEntriesFrom(input, _map_monthcardtime_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_GAINMONTHCARDITEM       = 1545      --[[领取月卡物品]]    
  /// </summary>
  public sealed partial class C2S_GainMonthCardItem : pb::IMessage<C2S_GainMonthCardItem> {
    private static readonly pb::MessageParser<C2S_GainMonthCardItem> _parser = new pb::MessageParser<C2S_GainMonthCardItem>(() => new C2S_GainMonthCardItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GainMonthCardItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GainMonthCardItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GainMonthCardItem(C2S_GainMonthCardItem other) : this() {
      monthcardid_ = other.monthcardid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GainMonthCardItem Clone() {
      return new C2S_GainMonthCardItem(this);
    }

    /// <summary>Field number for the "monthcardid" field.</summary>
    public const int MonthcardidFieldNumber = 1;
    private int monthcardid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Monthcardid {
      get { return monthcardid_; }
      set {
        monthcardid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GainMonthCardItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GainMonthCardItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Monthcardid != other.Monthcardid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Monthcardid != 0) hash ^= Monthcardid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Monthcardid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Monthcardid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Monthcardid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Monthcardid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GainMonthCardItem other) {
      if (other == null) {
        return;
      }
      if (other.Monthcardid != 0) {
        Monthcardid = other.Monthcardid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Monthcardid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2LC_GAINMONTHCARDITEM       = 2545      --[[领取月卡物品]]
  /// </summary>
  public sealed partial class S2C_GainMonthCardItem : pb::IMessage<S2C_GainMonthCardItem> {
    private static readonly pb::MessageParser<S2C_GainMonthCardItem> _parser = new pb::MessageParser<S2C_GainMonthCardItem>(() => new S2C_GainMonthCardItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GainMonthCardItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GainMonthCardItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GainMonthCardItem(S2C_GainMonthCardItem other) : this() {
      ret_ = other.ret_;
      monthcardid_ = other.monthcardid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GainMonthCardItem Clone() {
      return new S2C_GainMonthCardItem(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "monthcardid" field.</summary>
    public const int MonthcardidFieldNumber = 2;
    private int monthcardid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Monthcardid {
      get { return monthcardid_; }
      set {
        monthcardid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GainMonthCardItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GainMonthCardItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Monthcardid != other.Monthcardid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Monthcardid != 0) hash ^= Monthcardid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Monthcardid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Monthcardid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Monthcardid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Monthcardid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GainMonthCardItem other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Monthcardid != 0) {
        Monthcardid = other.Monthcardid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Monthcardid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_CL2WD_GAINITEMDALIY           = 1547      --[[领取每日任务物品]]    
  /// </summary>
  public sealed partial class C2S_GainItemDaily : pb::IMessage<C2S_GainItemDaily> {
    private static readonly pb::MessageParser<C2S_GainItemDaily> _parser = new pb::MessageParser<C2S_GainItemDaily>(() => new C2S_GainItemDaily());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GainItemDaily> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GainItemDaily() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GainItemDaily(C2S_GainItemDaily other) : this() {
      taskid_ = other.taskid_;
      vipcard_ = other.vipcard_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GainItemDaily Clone() {
      return new C2S_GainItemDaily(this);
    }

    /// <summary>Field number for the "taskid" field.</summary>
    public const int TaskidFieldNumber = 1;
    private int taskid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Taskid {
      get { return taskid_; }
      set {
        taskid_ = value;
      }
    }

    /// <summary>Field number for the "vipcard" field.</summary>
    public const int VipcardFieldNumber = 2;
    private int vipcard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vipcard {
      get { return vipcard_; }
      set {
        vipcard_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GainItemDaily);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GainItemDaily other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Taskid != other.Taskid) return false;
      if (Vipcard != other.Vipcard) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Taskid != 0) hash ^= Taskid.GetHashCode();
      if (Vipcard != 0) hash ^= Vipcard.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Taskid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Taskid);
      }
      if (Vipcard != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Vipcard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Taskid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Taskid);
      }
      if (Vipcard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vipcard);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GainItemDaily other) {
      if (other == null) {
        return;
      }
      if (other.Taskid != 0) {
        Taskid = other.Taskid;
      }
      if (other.Vipcard != 0) {
        Vipcard = other.Vipcard;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Taskid = input.ReadInt32();
            break;
          }
          case 16: {
            Vipcard = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_WD2LC_GAINITEMDALIY           = 2547      --[[领取每日任务物品]]   
  /// </summary>
  public sealed partial class S2C_GainItemDaily : pb::IMessage<S2C_GainItemDaily> {
    private static readonly pb::MessageParser<S2C_GainItemDaily> _parser = new pb::MessageParser<S2C_GainItemDaily>(() => new S2C_GainItemDaily());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GainItemDaily> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GainItemDaily() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GainItemDaily(S2C_GainItemDaily other) : this() {
      ret_ = other.ret_;
      taskid_ = other.taskid_;
      vipcard_ = other.vipcard_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GainItemDaily Clone() {
      return new S2C_GainItemDaily(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "taskid" field.</summary>
    public const int TaskidFieldNumber = 2;
    private int taskid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Taskid {
      get { return taskid_; }
      set {
        taskid_ = value;
      }
    }

    /// <summary>Field number for the "vipcard" field.</summary>
    public const int VipcardFieldNumber = 3;
    private int vipcard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vipcard {
      get { return vipcard_; }
      set {
        vipcard_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GainItemDaily);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GainItemDaily other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Taskid != other.Taskid) return false;
      if (Vipcard != other.Vipcard) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Taskid != 0) hash ^= Taskid.GetHashCode();
      if (Vipcard != 0) hash ^= Vipcard.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Taskid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Taskid);
      }
      if (Vipcard != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Vipcard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Taskid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Taskid);
      }
      if (Vipcard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vipcard);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GainItemDaily other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Taskid != 0) {
        Taskid = other.Taskid;
      }
      if (other.Vipcard != 0) {
        Vipcard = other.Vipcard;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Taskid = input.ReadInt32();
            break;
          }
          case 24: {
            Vipcard = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_CL2WD_TASKDALIYINFO           = 1548      --[[每日任务信息]]    
  /// </summary>
  public sealed partial class C2S_TaskDaliyInfo : pb::IMessage<C2S_TaskDaliyInfo> {
    private static readonly pb::MessageParser<C2S_TaskDaliyInfo> _parser = new pb::MessageParser<C2S_TaskDaliyInfo>(() => new C2S_TaskDaliyInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_TaskDaliyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_TaskDaliyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_TaskDaliyInfo(C2S_TaskDaliyInfo other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_TaskDaliyInfo Clone() {
      return new C2S_TaskDaliyInfo(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_TaskDaliyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_TaskDaliyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_TaskDaliyInfo other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_WD2LC_TASKDALIYINFO           = 2548      --[[每日任务信息]]    
  /// </summary>
  public sealed partial class S2C_TaskDaliyInfo : pb::IMessage<S2C_TaskDaliyInfo> {
    private static readonly pb::MessageParser<S2C_TaskDaliyInfo> _parser = new pb::MessageParser<S2C_TaskDaliyInfo>(() => new S2C_TaskDaliyInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_TaskDaliyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TaskDaliyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TaskDaliyInfo(S2C_TaskDaliyInfo other) : this() {
      gainlist_ = other.gainlist_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TaskDaliyInfo Clone() {
      return new S2C_TaskDaliyInfo(this);
    }

    /// <summary>Field number for the "gainlist" field.</summary>
    public const int GainlistFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_gainlist_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> gainlist_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///已经领取的列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Gainlist {
      get { return gainlist_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_TaskDaliyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_TaskDaliyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gainlist_.Equals(other.gainlist_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gainlist_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      gainlist_.WriteTo(output, _repeated_gainlist_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += gainlist_.CalculateSize(_repeated_gainlist_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_TaskDaliyInfo other) {
      if (other == null) {
        return;
      }
      gainlist_.Add(other.gainlist_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            gainlist_.AddEntriesFrom(input, _repeated_gainlist_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_SEVENLOGINGET           = 1542      --[[七日登录领取]]    
  /// </summary>
  public sealed partial class C2S_SevenLoginGet : pb::IMessage<C2S_SevenLoginGet> {
    private static readonly pb::MessageParser<C2S_SevenLoginGet> _parser = new pb::MessageParser<C2S_SevenLoginGet>(() => new C2S_SevenLoginGet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_SevenLoginGet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_SevenLoginGet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_SevenLoginGet(C2S_SevenLoginGet other) : this() {
      day_ = other.day_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_SevenLoginGet Clone() {
      return new C2S_SevenLoginGet(this);
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 1;
    private int day_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_SevenLoginGet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_SevenLoginGet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Day != other.Day) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Day != 0) hash ^= Day.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Day != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Day);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_SevenLoginGet other) {
      if (other == null) {
        return;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Day = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2LC_SEVENLOGINGET           = 2542      --[[七日登录领取]]
  /// </summary>
  public sealed partial class S2C_SevenLoginGet : pb::IMessage<S2C_SevenLoginGet> {
    private static readonly pb::MessageParser<S2C_SevenLoginGet> _parser = new pb::MessageParser<S2C_SevenLoginGet>(() => new S2C_SevenLoginGet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_SevenLoginGet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SevenLoginGet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SevenLoginGet(S2C_SevenLoginGet other) : this() {
      ret_ = other.ret_;
      day_ = other.day_;
      rewards_ = other.rewards_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SevenLoginGet Clone() {
      return new S2C_SevenLoginGet(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 2;
    private int day_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 3;
    private string rewards_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Rewards {
      get { return rewards_; }
      set {
        rewards_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_SevenLoginGet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_SevenLoginGet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Day != other.Day) return false;
      if (Rewards != other.Rewards) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Day != 0) hash ^= Day.GetHashCode();
      if (Rewards.Length != 0) hash ^= Rewards.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Day != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Day);
      }
      if (Rewards.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Rewards);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (Rewards.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Rewards);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_SevenLoginGet other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
      if (other.Rewards.Length != 0) {
        Rewards = other.Rewards;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Day = input.ReadInt32();
            break;
          }
          case 26: {
            Rewards = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_GAINSHARE               = 1549      --[[分享奖励]]    
  /// </summary>
  public sealed partial class C2S_GainShare : pb::IMessage<C2S_GainShare> {
    private static readonly pb::MessageParser<C2S_GainShare> _parser = new pb::MessageParser<C2S_GainShare>(() => new C2S_GainShare());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GainShare> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GainShare() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GainShare(C2S_GainShare other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GainShare Clone() {
      return new C2S_GainShare(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GainShare);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GainShare other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GainShare other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2LC_GAINSHARE               = 2549      --[[分享奖励]]    
  /// </summary>
  public sealed partial class S2C_GainShare : pb::IMessage<S2C_GainShare> {
    private static readonly pb::MessageParser<S2C_GainShare> _parser = new pb::MessageParser<S2C_GainShare>(() => new S2C_GainShare());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GainShare> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GainShare() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GainShare(S2C_GainShare other) : this() {
      ret_ = other.ret_;
      rewards_ = other.rewards_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GainShare Clone() {
      return new S2C_GainShare(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 2;
    private string rewards_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Rewards {
      get { return rewards_; }
      set {
        rewards_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GainShare);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GainShare other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Rewards != other.Rewards) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Rewards.Length != 0) hash ^= Rewards.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Rewards.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Rewards);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Rewards.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Rewards);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GainShare other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Rewards.Length != 0) {
        Rewards = other.Rewards;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 18: {
            Rewards = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_GAINLEAFET2             = 1506      --[[获得报纸]]  
  /// </summary>
  public sealed partial class C2S_GainLeafet2 : pb::IMessage<C2S_GainLeafet2> {
    private static readonly pb::MessageParser<C2S_GainLeafet2> _parser = new pb::MessageParser<C2S_GainLeafet2>(() => new C2S_GainLeafet2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GainLeafet2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GainLeafet2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GainLeafet2(C2S_GainLeafet2 other) : this() {
      num_ = other.num_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GainLeafet2 Clone() {
      return new C2S_GainLeafet2(this);
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 1;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///1时间 2广告
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GainLeafet2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GainLeafet2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Num != other.Num) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Num != 0) hash ^= Num.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Num != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Num);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GainLeafet2 other) {
      if (other == null) {
        return;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Num = input.ReadInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2CL_GAINLEAFET2             = 2506      --[[获得报纸]]  
  /// </summary>
  public sealed partial class S2C_GainLeafet2 : pb::IMessage<S2C_GainLeafet2> {
    private static readonly pb::MessageParser<S2C_GainLeafet2> _parser = new pb::MessageParser<S2C_GainLeafet2>(() => new S2C_GainLeafet2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GainLeafet2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GainLeafet2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GainLeafet2(S2C_GainLeafet2 other) : this() {
      ret_ = other.ret_;
      num_ = other.num_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GainLeafet2 Clone() {
      return new S2C_GainLeafet2(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GainLeafet2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GainLeafet2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Num != other.Num) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GainLeafet2 other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_GETGIFTINFO             = 1509      --[[请求礼包信息]]  
  /// </summary>
  public sealed partial class C2S_GetGiftInfo : pb::IMessage<C2S_GetGiftInfo> {
    private static readonly pb::MessageParser<C2S_GetGiftInfo> _parser = new pb::MessageParser<C2S_GetGiftInfo>(() => new C2S_GetGiftInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GetGiftInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetGiftInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetGiftInfo(C2S_GetGiftInfo other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetGiftInfo Clone() {
      return new C2S_GetGiftInfo(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GetGiftInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GetGiftInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GetGiftInfo other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2CL_GETGIFTINFO             = 2509      --[[请求礼包信息]]  
  /// </summary>
  public sealed partial class S2C_GetGiftInfo : pb::IMessage<S2C_GetGiftInfo> {
    private static readonly pb::MessageParser<S2C_GetGiftInfo> _parser = new pb::MessageParser<S2C_GetGiftInfo>(() => new S2C_GetGiftInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GetGiftInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetGiftInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetGiftInfo(S2C_GetGiftInfo other) : this() {
      type_ = other.type_;
      giftlist_ = other.giftlist_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetGiftInfo Clone() {
      return new S2C_GetGiftInfo(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "giftlist" field.</summary>
    public const int GiftlistFieldNumber = 2;
    private static readonly pbc::MapField<int, global::PBase.PB_GiftPack>.Codec _map_giftlist_codec
        = new pbc::MapField<int, global::PBase.PB_GiftPack>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::PBase.PB_GiftPack.Parser), 18);
    private readonly pbc::MapField<int, global::PBase.PB_GiftPack> giftlist_ = new pbc::MapField<int, global::PBase.PB_GiftPack>();
    /// <summary>
    ///   --礼包 { 1配置id 2时间 3购买次数 }
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::PBase.PB_GiftPack> Giftlist {
      get { return giftlist_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GetGiftInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GetGiftInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!Giftlist.Equals(other.Giftlist)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= Giftlist.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      giftlist_.WriteTo(output, _map_giftlist_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      size += giftlist_.CalculateSize(_map_giftlist_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GetGiftInfo other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      giftlist_.Add(other.giftlist_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            giftlist_.AddEntriesFrom(input, _map_giftlist_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_GETRANDNAME             = 1534      --[[随机名字]]    
  /// </summary>
  public sealed partial class C2S_GetRandName : pb::IMessage<C2S_GetRandName> {
    private static readonly pb::MessageParser<C2S_GetRandName> _parser = new pb::MessageParser<C2S_GetRandName>(() => new C2S_GetRandName());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GetRandName> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetRandName() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetRandName(C2S_GetRandName other) : this() {
      playerdbid_ = other.playerdbid_;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetRandName Clone() {
      return new C2S_GetRandName(this);
    }

    /// <summary>Field number for the "playerdbid" field.</summary>
    public const int PlayerdbidFieldNumber = 1;
    private int playerdbid_;
    /// <summary>
    ///不需要赋值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Playerdbid {
      get { return playerdbid_; }
      set {
        playerdbid_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GetRandName);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GetRandName other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Playerdbid != other.Playerdbid) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Playerdbid != 0) hash ^= Playerdbid.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Playerdbid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Playerdbid);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Playerdbid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Playerdbid);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GetRandName other) {
      if (other == null) {
        return;
      }
      if (other.Playerdbid != 0) {
        Playerdbid = other.Playerdbid;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Playerdbid = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2LC_GETRANDNAME             = 2534      --[[随机名字]]    
  /// </summary>
  public sealed partial class S2C_GetRandName : pb::IMessage<S2C_GetRandName> {
    private static readonly pb::MessageParser<S2C_GetRandName> _parser = new pb::MessageParser<S2C_GetRandName>(() => new S2C_GetRandName());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GetRandName> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetRandName() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetRandName(S2C_GetRandName other) : this() {
      ret_ = other.ret_;
      namelist_ = other.namelist_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetRandName Clone() {
      return new S2C_GetRandName(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "namelist" field.</summary>
    public const int NamelistFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_namelist_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> namelist_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Namelist {
      get { return namelist_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GetRandName);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GetRandName other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!namelist_.Equals(other.namelist_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= namelist_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      namelist_.WriteTo(output, _repeated_namelist_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      size += namelist_.CalculateSize(_repeated_namelist_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GetRandName other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      namelist_.Add(other.namelist_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 18: {
            namelist_.AddEntriesFrom(input, _repeated_namelist_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_CLIENTUNLOCK            = 1535      --[[客户端解锁模块]]    
  /// </summary>
  public sealed partial class C2S_ClientUnlock : pb::IMessage<C2S_ClientUnlock> {
    private static readonly pb::MessageParser<C2S_ClientUnlock> _parser = new pb::MessageParser<C2S_ClientUnlock>(() => new C2S_ClientUnlock());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_ClientUnlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ClientUnlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ClientUnlock(C2S_ClientUnlock other) : this() {
      unlockid_ = other.unlockid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ClientUnlock Clone() {
      return new C2S_ClientUnlock(this);
    }

    /// <summary>Field number for the "unlockid" field.</summary>
    public const int UnlockidFieldNumber = 1;
    private int unlockid_;
    /// <summary>
    /// 1 喇叭解锁
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unlockid {
      get { return unlockid_; }
      set {
        unlockid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_ClientUnlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_ClientUnlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Unlockid != other.Unlockid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Unlockid != 0) hash ^= Unlockid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Unlockid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Unlockid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Unlockid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unlockid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_ClientUnlock other) {
      if (other == null) {
        return;
      }
      if (other.Unlockid != 0) {
        Unlockid = other.Unlockid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Unlockid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2LC_CLIENTUNLOCK            = 2535      --[[客户端解锁模块]]    
  /// </summary>
  public sealed partial class S2C_ClientUnlock : pb::IMessage<S2C_ClientUnlock> {
    private static readonly pb::MessageParser<S2C_ClientUnlock> _parser = new pb::MessageParser<S2C_ClientUnlock>(() => new S2C_ClientUnlock());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ClientUnlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ClientUnlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ClientUnlock(S2C_ClientUnlock other) : this() {
      ret_ = other.ret_;
      unlockid_ = other.unlockid_;
      unlocktime_ = other.unlocktime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ClientUnlock Clone() {
      return new S2C_ClientUnlock(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "unlockid" field.</summary>
    public const int UnlockidFieldNumber = 2;
    private int unlockid_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unlockid {
      get { return unlockid_; }
      set {
        unlockid_ = value;
      }
    }

    /// <summary>Field number for the "unlocktime" field.</summary>
    public const int UnlocktimeFieldNumber = 3;
    private int unlocktime_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Unlocktime {
      get { return unlocktime_; }
      set {
        unlocktime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ClientUnlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ClientUnlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Unlockid != other.Unlockid) return false;
      if (Unlocktime != other.Unlocktime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Unlockid != 0) hash ^= Unlockid.GetHashCode();
      if (Unlocktime != 0) hash ^= Unlocktime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Unlockid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Unlockid);
      }
      if (Unlocktime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Unlocktime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Unlockid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unlockid);
      }
      if (Unlocktime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Unlocktime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ClientUnlock other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Unlockid != 0) {
        Unlockid = other.Unlockid;
      }
      if (other.Unlocktime != 0) {
        Unlocktime = other.Unlocktime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Unlockid = input.ReadInt32();
            break;
          }
          case 24: {
            Unlocktime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_GAINDRAWSUMREWARDS      = 1536      --[[累计抽卡奖励]]    
  /// </summary>
  public sealed partial class C2S_GainDrawSumRewards : pb::IMessage<C2S_GainDrawSumRewards> {
    private static readonly pb::MessageParser<C2S_GainDrawSumRewards> _parser = new pb::MessageParser<C2S_GainDrawSumRewards>(() => new C2S_GainDrawSumRewards());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GainDrawSumRewards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GainDrawSumRewards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GainDrawSumRewards(C2S_GainDrawSumRewards other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GainDrawSumRewards Clone() {
      return new C2S_GainDrawSumRewards(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GainDrawSumRewards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GainDrawSumRewards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GainDrawSumRewards other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2LC_GAINDRAWSUMREWARDS      = 2536      --[[累计抽卡奖励]]    
  /// </summary>
  public sealed partial class S2C_GainDrawSumRewards : pb::IMessage<S2C_GainDrawSumRewards> {
    private static readonly pb::MessageParser<S2C_GainDrawSumRewards> _parser = new pb::MessageParser<S2C_GainDrawSumRewards>(() => new S2C_GainDrawSumRewards());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GainDrawSumRewards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GainDrawSumRewards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GainDrawSumRewards(S2C_GainDrawSumRewards other) : this() {
      ret_ = other.ret_;
      id_ = other.id_;
      rewards_ = other.rewards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GainDrawSumRewards Clone() {
      return new S2C_GainDrawSumRewards(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_rewards_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> rewards_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GainDrawSumRewards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GainDrawSumRewards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Id != other.Id) return false;
      if(!rewards_.Equals(other.rewards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= rewards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GainDrawSumRewards other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      rewards_.Add(other.rewards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 26: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_TIMETASK                = 1538      --[[领取限时任务]]    
  /// </summary>
  public sealed partial class C2S_TimeTask : pb::IMessage<C2S_TimeTask> {
    private static readonly pb::MessageParser<C2S_TimeTask> _parser = new pb::MessageParser<C2S_TimeTask>(() => new C2S_TimeTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_TimeTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_TimeTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_TimeTask(C2S_TimeTask other) : this() {
      taskid_ = other.taskid_;
      vpcard_ = other.vpcard_;
      isdouble_ = other.isdouble_;
      timeout_ = other.timeout_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_TimeTask Clone() {
      return new C2S_TimeTask(this);
    }

    /// <summary>Field number for the "taskid" field.</summary>
    public const int TaskidFieldNumber = 1;
    private int taskid_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Taskid {
      get { return taskid_; }
      set {
        taskid_ = value;
      }
    }

    /// <summary>Field number for the "vpcard" field.</summary>
    public const int VpcardFieldNumber = 2;
    private int vpcard_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vpcard {
      get { return vpcard_; }
      set {
        vpcard_ = value;
      }
    }

    /// <summary>Field number for the "isdouble" field.</summary>
    public const int IsdoubleFieldNumber = 3;
    private bool isdouble_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isdouble {
      get { return isdouble_; }
      set {
        isdouble_ = value;
      }
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 4;
    private bool timeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_TimeTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_TimeTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Taskid != other.Taskid) return false;
      if (Vpcard != other.Vpcard) return false;
      if (Isdouble != other.Isdouble) return false;
      if (Timeout != other.Timeout) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Taskid != 0) hash ^= Taskid.GetHashCode();
      if (Vpcard != 0) hash ^= Vpcard.GetHashCode();
      if (Isdouble != false) hash ^= Isdouble.GetHashCode();
      if (Timeout != false) hash ^= Timeout.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Taskid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Taskid);
      }
      if (Vpcard != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Vpcard);
      }
      if (Isdouble != false) {
        output.WriteRawTag(24);
        output.WriteBool(Isdouble);
      }
      if (Timeout != false) {
        output.WriteRawTag(32);
        output.WriteBool(Timeout);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Taskid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Taskid);
      }
      if (Vpcard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vpcard);
      }
      if (Isdouble != false) {
        size += 1 + 1;
      }
      if (Timeout != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_TimeTask other) {
      if (other == null) {
        return;
      }
      if (other.Taskid != 0) {
        Taskid = other.Taskid;
      }
      if (other.Vpcard != 0) {
        Vpcard = other.Vpcard;
      }
      if (other.Isdouble != false) {
        Isdouble = other.Isdouble;
      }
      if (other.Timeout != false) {
        Timeout = other.Timeout;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Taskid = input.ReadInt32();
            break;
          }
          case 16: {
            Vpcard = input.ReadInt32();
            break;
          }
          case 24: {
            Isdouble = input.ReadBool();
            break;
          }
          case 32: {
            Timeout = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2LC_TIMETASK                = 2538      --[[领取限时任务]]    
  /// </summary>
  public sealed partial class S2C_TimeTask : pb::IMessage<S2C_TimeTask> {
    private static readonly pb::MessageParser<S2C_TimeTask> _parser = new pb::MessageParser<S2C_TimeTask>(() => new S2C_TimeTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_TimeTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TimeTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TimeTask(S2C_TimeTask other) : this() {
      ret_ = other.ret_;
      rewards_ = other.rewards_.Clone();
      isdouble_ = other.isdouble_;
      timeout_ = other.timeout_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TimeTask Clone() {
      return new S2C_TimeTask(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_rewards_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> rewards_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Rewards {
      get { return rewards_; }
    }

    /// <summary>Field number for the "isdouble" field.</summary>
    public const int IsdoubleFieldNumber = 3;
    private bool isdouble_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isdouble {
      get { return isdouble_; }
      set {
        isdouble_ = value;
      }
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 4;
    private bool timeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_TimeTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_TimeTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if(!rewards_.Equals(other.rewards_)) return false;
      if (Isdouble != other.Isdouble) return false;
      if (Timeout != other.Timeout) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      hash ^= rewards_.GetHashCode();
      if (Isdouble != false) hash ^= Isdouble.GetHashCode();
      if (Timeout != false) hash ^= Timeout.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (Isdouble != false) {
        output.WriteRawTag(24);
        output.WriteBool(Isdouble);
      }
      if (Timeout != false) {
        output.WriteRawTag(32);
        output.WriteBool(Timeout);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (Isdouble != false) {
        size += 1 + 1;
      }
      if (Timeout != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_TimeTask other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      rewards_.Add(other.rewards_);
      if (other.Isdouble != false) {
        Isdouble = other.Isdouble;
      }
      if (other.Timeout != false) {
        Timeout = other.Timeout;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 18: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
          case 24: {
            Isdouble = input.ReadBool();
            break;
          }
          case 32: {
            Timeout = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_GETRANKLIST         = 1561      --[[请求排行榜列表]]   
  /// </summary>
  public sealed partial class C2S_GetRankList : pb::IMessage<C2S_GetRankList> {
    private static readonly pb::MessageParser<C2S_GetRankList> _parser = new pb::MessageParser<C2S_GetRankList>(() => new C2S_GetRankList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GetRankList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetRankList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetRankList(C2S_GetRankList other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetRankList Clone() {
      return new C2S_GetRankList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GetRankList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GetRankList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GetRankList other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2LC_GETRANKLIST         = 2561      --[[请求排行榜列表]]    
  /// </summary>
  public sealed partial class S2C_GetRankList : pb::IMessage<S2C_GetRankList> {
    private static readonly pb::MessageParser<S2C_GetRankList> _parser = new pb::MessageParser<S2C_GetRankList>(() => new S2C_GetRankList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_GetRankList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetRankList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetRankList(S2C_GetRankList other) : this() {
      rankobjlist_ = other.rankobjlist_.Clone();
      rewardsec_ = other.rewardsec_;
      rewardcount_ = other.rewardcount_;
      rankclose_ = other.rankclose_;
      rewardfinalsec_ = other.rewardfinalsec_;
      rewardendsec_ = other.rewardendsec_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_GetRankList Clone() {
      return new S2C_GetRankList(this);
    }

    /// <summary>Field number for the "rankobjlist" field.</summary>
    public const int RankobjlistFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PBase.PB_RankObj> _repeated_rankobjlist_codec
        = pb::FieldCodec.ForMessage(10, global::PBase.PB_RankObj.Parser);
    private readonly pbc::RepeatedField<global::PBase.PB_RankObj> rankobjlist_ = new pbc::RepeatedField<global::PBase.PB_RankObj>();
    /// <summary>
    /// 成员列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PBase.PB_RankObj> Rankobjlist {
      get { return rankobjlist_; }
    }

    /// <summary>Field number for the "rewardsec" field.</summary>
    public const int RewardsecFieldNumber = 2;
    private int rewardsec_;
    /// <summary>
    ///每日领奖倒计时秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rewardsec {
      get { return rewardsec_; }
      set {
        rewardsec_ = value;
      }
    }

    /// <summary>Field number for the "rewardcount" field.</summary>
    public const int RewardcountFieldNumber = 3;
    private int rewardcount_;
    /// <summary>
    ///领奖次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rewardcount {
      get { return rewardcount_; }
      set {
        rewardcount_ = value;
      }
    }

    /// <summary>Field number for the "rankclose" field.</summary>
    public const int RankcloseFieldNumber = 4;
    private int rankclose_;
    /// <summary>
    ///排行榜关闭 1 关闭 0正常
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rankclose {
      get { return rankclose_; }
      set {
        rankclose_ = value;
      }
    }

    /// <summary>Field number for the "rewardfinalsec" field.</summary>
    public const int RewardfinalsecFieldNumber = 5;
    private int rewardfinalsec_;
    /// <summary>
    ///最终领奖倒计时秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rewardfinalsec {
      get { return rewardfinalsec_; }
      set {
        rewardfinalsec_ = value;
      }
    }

    /// <summary>Field number for the "rewardendsec" field.</summary>
    public const int RewardendsecFieldNumber = 6;
    private int rewardendsec_;
    /// <summary>
    ///功能关闭倒计时秒
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rewardendsec {
      get { return rewardendsec_; }
      set {
        rewardendsec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_GetRankList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_GetRankList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rankobjlist_.Equals(other.rankobjlist_)) return false;
      if (Rewardsec != other.Rewardsec) return false;
      if (Rewardcount != other.Rewardcount) return false;
      if (Rankclose != other.Rankclose) return false;
      if (Rewardfinalsec != other.Rewardfinalsec) return false;
      if (Rewardendsec != other.Rewardendsec) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rankobjlist_.GetHashCode();
      if (Rewardsec != 0) hash ^= Rewardsec.GetHashCode();
      if (Rewardcount != 0) hash ^= Rewardcount.GetHashCode();
      if (Rankclose != 0) hash ^= Rankclose.GetHashCode();
      if (Rewardfinalsec != 0) hash ^= Rewardfinalsec.GetHashCode();
      if (Rewardendsec != 0) hash ^= Rewardendsec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rankobjlist_.WriteTo(output, _repeated_rankobjlist_codec);
      if (Rewardsec != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Rewardsec);
      }
      if (Rewardcount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Rewardcount);
      }
      if (Rankclose != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Rankclose);
      }
      if (Rewardfinalsec != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Rewardfinalsec);
      }
      if (Rewardendsec != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Rewardendsec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rankobjlist_.CalculateSize(_repeated_rankobjlist_codec);
      if (Rewardsec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rewardsec);
      }
      if (Rewardcount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rewardcount);
      }
      if (Rankclose != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rankclose);
      }
      if (Rewardfinalsec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rewardfinalsec);
      }
      if (Rewardendsec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rewardendsec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_GetRankList other) {
      if (other == null) {
        return;
      }
      rankobjlist_.Add(other.rankobjlist_);
      if (other.Rewardsec != 0) {
        Rewardsec = other.Rewardsec;
      }
      if (other.Rewardcount != 0) {
        Rewardcount = other.Rewardcount;
      }
      if (other.Rankclose != 0) {
        Rankclose = other.Rankclose;
      }
      if (other.Rewardfinalsec != 0) {
        Rewardfinalsec = other.Rewardfinalsec;
      }
      if (other.Rewardendsec != 0) {
        Rewardendsec = other.Rewardendsec;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rankobjlist_.AddEntriesFrom(input, _repeated_rankobjlist_codec);
            break;
          }
          case 16: {
            Rewardsec = input.ReadInt32();
            break;
          }
          case 24: {
            Rewardcount = input.ReadInt32();
            break;
          }
          case 32: {
            Rankclose = input.ReadInt32();
            break;
          }
          case 40: {
            Rewardfinalsec = input.ReadInt32();
            break;
          }
          case 48: {
            Rewardendsec = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_WD2LC_JOINRANKLIST        = 2562      --[[玩家加入排行榜信息]] 
  /// </summary>
  public sealed partial class S2C_JoinRankList : pb::IMessage<S2C_JoinRankList> {
    private static readonly pb::MessageParser<S2C_JoinRankList> _parser = new pb::MessageParser<S2C_JoinRankList>(() => new S2C_JoinRankList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_JoinRankList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_JoinRankList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_JoinRankList(S2C_JoinRankList other) : this() {
      rankgroupid_ = other.rankgroupid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_JoinRankList Clone() {
      return new S2C_JoinRankList(this);
    }

    /// <summary>Field number for the "rankgroupid" field.</summary>
    public const int RankgroupidFieldNumber = 1;
    private string rankgroupid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Rankgroupid {
      get { return rankgroupid_; }
      set {
        rankgroupid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_JoinRankList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_JoinRankList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rankgroupid != other.Rankgroupid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rankgroupid.Length != 0) hash ^= Rankgroupid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rankgroupid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Rankgroupid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rankgroupid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Rankgroupid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_JoinRankList other) {
      if (other == null) {
        return;
      }
      if (other.Rankgroupid.Length != 0) {
        Rankgroupid = other.Rankgroupid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Rankgroupid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_AREASTEPREWARD        = 1565      --[[领取竞技场阶段奖励]]    
  /// </summary>
  public sealed partial class C2S_AreaStepReward : pb::IMessage<C2S_AreaStepReward> {
    private static readonly pb::MessageParser<C2S_AreaStepReward> _parser = new pb::MessageParser<C2S_AreaStepReward>(() => new C2S_AreaStepReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_AreaStepReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AreaStepReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AreaStepReward(C2S_AreaStepReward other) : this() {
      taskid_ = other.taskid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_AreaStepReward Clone() {
      return new C2S_AreaStepReward(this);
    }

    /// <summary>Field number for the "taskid" field.</summary>
    public const int TaskidFieldNumber = 1;
    private int taskid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Taskid {
      get { return taskid_; }
      set {
        taskid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_AreaStepReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_AreaStepReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Taskid != other.Taskid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Taskid != 0) hash ^= Taskid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Taskid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Taskid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Taskid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Taskid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_AreaStepReward other) {
      if (other == null) {
        return;
      }
      if (other.Taskid != 0) {
        Taskid = other.Taskid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Taskid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2LC_AREASTEPREWARD        = 2565      --[[领取竞技场阶段奖励]]    
  /// </summary>
  public sealed partial class S2C_AreaStepReward : pb::IMessage<S2C_AreaStepReward> {
    private static readonly pb::MessageParser<S2C_AreaStepReward> _parser = new pb::MessageParser<S2C_AreaStepReward>(() => new S2C_AreaStepReward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_AreaStepReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AreaStepReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AreaStepReward(S2C_AreaStepReward other) : this() {
      ret_ = other.ret_;
      taskid_ = other.taskid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_AreaStepReward Clone() {
      return new S2C_AreaStepReward(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "taskid" field.</summary>
    public const int TaskidFieldNumber = 2;
    private int taskid_;
    /// <summary>
    ///string rewardstr = 3;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Taskid {
      get { return taskid_; }
      set {
        taskid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_AreaStepReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_AreaStepReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Taskid != other.Taskid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Taskid != 0) hash ^= Taskid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Taskid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Taskid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Taskid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Taskid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_AreaStepReward other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Taskid != 0) {
        Taskid = other.Taskid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Taskid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_IOSPAYCHECK             = 1550      --[[支付]] 
  /// </summary>
  public sealed partial class C2S_IOSPayCheck : pb::IMessage<C2S_IOSPayCheck> {
    private static readonly pb::MessageParser<C2S_IOSPayCheck> _parser = new pb::MessageParser<C2S_IOSPayCheck>(() => new C2S_IOSPayCheck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_IOSPayCheck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_IOSPayCheck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_IOSPayCheck(C2S_IOSPayCheck other) : this() {
      payid_ = other.payid_;
      paycode_ = other.paycode_;
      platform_ = other.platform_;
      payorder_ = other.payorder_;
      repair_ = other.repair_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_IOSPayCheck Clone() {
      return new C2S_IOSPayCheck(this);
    }

    /// <summary>Field number for the "payid" field.</summary>
    public const int PayidFieldNumber = 1;
    private int payid_;
    /// <summary>
    ///商品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Payid {
      get { return payid_; }
      set {
        payid_ = value;
      }
    }

    /// <summary>Field number for the "paycode" field.</summary>
    public const int PaycodeFieldNumber = 2;
    private string paycode_ = "";
    /// <summary>
    ///支付凭证码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Paycode {
      get { return paycode_; }
      set {
        paycode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 9;
    private string platform_ = "";
    /// <summary>
    ///平台
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payorder" field.</summary>
    public const int PayorderFieldNumber = 10;
    private string payorder_ = "";
    /// <summary>
    ///订单号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Payorder {
      get { return payorder_; }
      set {
        payorder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "repair" field.</summary>
    public const int RepairFieldNumber = 11;
    private int repair_;
    /// <summary>
    ///补单  1补单    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Repair {
      get { return repair_; }
      set {
        repair_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_IOSPayCheck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_IOSPayCheck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payid != other.Payid) return false;
      if (Paycode != other.Paycode) return false;
      if (Platform != other.Platform) return false;
      if (Payorder != other.Payorder) return false;
      if (Repair != other.Repair) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payid != 0) hash ^= Payid.GetHashCode();
      if (Paycode.Length != 0) hash ^= Paycode.GetHashCode();
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (Payorder.Length != 0) hash ^= Payorder.GetHashCode();
      if (Repair != 0) hash ^= Repair.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Payid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Payid);
      }
      if (Paycode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Paycode);
      }
      if (Platform.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Platform);
      }
      if (Payorder.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Payorder);
      }
      if (Repair != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Repair);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Payid);
      }
      if (Paycode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Paycode);
      }
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (Payorder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Payorder);
      }
      if (Repair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Repair);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_IOSPayCheck other) {
      if (other == null) {
        return;
      }
      if (other.Payid != 0) {
        Payid = other.Payid;
      }
      if (other.Paycode.Length != 0) {
        Paycode = other.Paycode;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      if (other.Payorder.Length != 0) {
        Payorder = other.Payorder;
      }
      if (other.Repair != 0) {
        Repair = other.Repair;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Payid = input.ReadInt32();
            break;
          }
          case 18: {
            Paycode = input.ReadString();
            break;
          }
          case 74: {
            Platform = input.ReadString();
            break;
          }
          case 82: {
            Payorder = input.ReadString();
            break;
          }
          case 88: {
            Repair = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2LC_IOSPAYCHECK             = 2550      --[[支付]]   
  /// </summary>
  public sealed partial class S2C_IOSPayCheck : pb::IMessage<S2C_IOSPayCheck> {
    private static readonly pb::MessageParser<S2C_IOSPayCheck> _parser = new pb::MessageParser<S2C_IOSPayCheck>(() => new S2C_IOSPayCheck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_IOSPayCheck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_IOSPayCheck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_IOSPayCheck(S2C_IOSPayCheck other) : this() {
      ret_ = other.ret_;
      payid_ = other.payid_;
      paytype_ = other.paytype_;
      platform_ = other.platform_;
      payorder_ = other.payorder_;
      repair_ = other.repair_;
      paycode_ = other.paycode_;
      purchasetype_ = other.purchasetype_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_IOSPayCheck Clone() {
      return new S2C_IOSPayCheck(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "payid" field.</summary>
    public const int PayidFieldNumber = 2;
    private int payid_;
    /// <summary>
    ///商品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Payid {
      get { return payid_; }
      set {
        payid_ = value;
      }
    }

    /// <summary>Field number for the "paytype" field.</summary>
    public const int PaytypeFieldNumber = 3;
    private int paytype_;
    /// <summary>
    ///购买类型 101首冲 102商城礼包 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Paytype {
      get { return paytype_; }
      set {
        paytype_ = value;
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 9;
    private string platform_ = "";
    /// <summary>
    ///平台
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payorder" field.</summary>
    public const int PayorderFieldNumber = 10;
    private string payorder_ = "";
    /// <summary>
    ///订单号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Payorder {
      get { return payorder_; }
      set {
        payorder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "repair" field.</summary>
    public const int RepairFieldNumber = 11;
    private int repair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Repair {
      get { return repair_; }
      set {
        repair_ = value;
      }
    }

    /// <summary>Field number for the "paycode" field.</summary>
    public const int PaycodeFieldNumber = 12;
    private string paycode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Paycode {
      get { return paycode_; }
      set {
        paycode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "purchasetype" field.</summary>
    public const int PurchasetypeFieldNumber = 13;
    private int purchasetype_;
    /// <summary>
    ///0沙盒支付 >0正式支付
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Purchasetype {
      get { return purchasetype_; }
      set {
        purchasetype_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_IOSPayCheck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_IOSPayCheck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Payid != other.Payid) return false;
      if (Paytype != other.Paytype) return false;
      if (Platform != other.Platform) return false;
      if (Payorder != other.Payorder) return false;
      if (Repair != other.Repair) return false;
      if (Paycode != other.Paycode) return false;
      if (Purchasetype != other.Purchasetype) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Payid != 0) hash ^= Payid.GetHashCode();
      if (Paytype != 0) hash ^= Paytype.GetHashCode();
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (Payorder.Length != 0) hash ^= Payorder.GetHashCode();
      if (Repair != 0) hash ^= Repair.GetHashCode();
      if (Paycode.Length != 0) hash ^= Paycode.GetHashCode();
      if (Purchasetype != 0) hash ^= Purchasetype.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Payid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Payid);
      }
      if (Paytype != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Paytype);
      }
      if (Platform.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Platform);
      }
      if (Payorder.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Payorder);
      }
      if (Repair != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Repair);
      }
      if (Paycode.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Paycode);
      }
      if (Purchasetype != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Purchasetype);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Payid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Payid);
      }
      if (Paytype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Paytype);
      }
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (Payorder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Payorder);
      }
      if (Repair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Repair);
      }
      if (Paycode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Paycode);
      }
      if (Purchasetype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Purchasetype);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_IOSPayCheck other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Payid != 0) {
        Payid = other.Payid;
      }
      if (other.Paytype != 0) {
        Paytype = other.Paytype;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      if (other.Payorder.Length != 0) {
        Payorder = other.Payorder;
      }
      if (other.Repair != 0) {
        Repair = other.Repair;
      }
      if (other.Paycode.Length != 0) {
        Paycode = other.Paycode;
      }
      if (other.Purchasetype != 0) {
        Purchasetype = other.Purchasetype;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Payid = input.ReadInt32();
            break;
          }
          case 24: {
            Paytype = input.ReadInt32();
            break;
          }
          case 74: {
            Platform = input.ReadString();
            break;
          }
          case 82: {
            Payorder = input.ReadString();
            break;
          }
          case 88: {
            Repair = input.ReadInt32();
            break;
          }
          case 98: {
            Paycode = input.ReadString();
            break;
          }
          case 104: {
            Purchasetype = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_IOSPAYFAIL              = 1557      --[[支付失败补单]]    
  /// </summary>
  public sealed partial class C2S_IOSPayFail : pb::IMessage<C2S_IOSPayFail> {
    private static readonly pb::MessageParser<C2S_IOSPayFail> _parser = new pb::MessageParser<C2S_IOSPayFail>(() => new C2S_IOSPayFail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_IOSPayFail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_IOSPayFail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_IOSPayFail(C2S_IOSPayFail other) : this() {
      account_ = other.account_;
      payid_ = other.payid_;
      paycode_ = other.paycode_;
      platform_ = other.platform_;
      payorder_ = other.payorder_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_IOSPayFail Clone() {
      return new C2S_IOSPayFail(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    ///账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payid" field.</summary>
    public const int PayidFieldNumber = 2;
    private int payid_;
    /// <summary>
    ///商品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Payid {
      get { return payid_; }
      set {
        payid_ = value;
      }
    }

    /// <summary>Field number for the "paycode" field.</summary>
    public const int PaycodeFieldNumber = 3;
    private string paycode_ = "";
    /// <summary>
    ///支付凭证码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Paycode {
      get { return paycode_; }
      set {
        paycode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 4;
    private string platform_ = "";
    /// <summary>
    ///平台
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payorder" field.</summary>
    public const int PayorderFieldNumber = 5;
    private string payorder_ = "";
    /// <summary>
    ///订单号  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Payorder {
      get { return payorder_; }
      set {
        payorder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_IOSPayFail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_IOSPayFail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Payid != other.Payid) return false;
      if (Paycode != other.Paycode) return false;
      if (Platform != other.Platform) return false;
      if (Payorder != other.Payorder) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Payid != 0) hash ^= Payid.GetHashCode();
      if (Paycode.Length != 0) hash ^= Paycode.GetHashCode();
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (Payorder.Length != 0) hash ^= Payorder.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Payid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Payid);
      }
      if (Paycode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Paycode);
      }
      if (Platform.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Platform);
      }
      if (Payorder.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Payorder);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Payid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Payid);
      }
      if (Paycode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Paycode);
      }
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (Payorder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Payorder);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_IOSPayFail other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Payid != 0) {
        Payid = other.Payid;
      }
      if (other.Paycode.Length != 0) {
        Paycode = other.Paycode;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      if (other.Payorder.Length != 0) {
        Payorder = other.Payorder;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 16: {
            Payid = input.ReadInt32();
            break;
          }
          case 26: {
            Paycode = input.ReadString();
            break;
          }
          case 34: {
            Platform = input.ReadString();
            break;
          }
          case 42: {
            Payorder = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2LC_IOSPAYFAIL              = 2557      --[[支付失败补单]]    
  /// </summary>
  public sealed partial class S2C_IOSPayFail : pb::IMessage<S2C_IOSPayFail> {
    private static readonly pb::MessageParser<S2C_IOSPayFail> _parser = new pb::MessageParser<S2C_IOSPayFail>(() => new S2C_IOSPayFail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_IOSPayFail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_IOSPayFail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_IOSPayFail(S2C_IOSPayFail other) : this() {
      ret_ = other.ret_;
      account_ = other.account_;
      payid_ = other.payid_;
      paycode_ = other.paycode_;
      platform_ = other.platform_;
      payorder_ = other.payorder_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_IOSPayFail Clone() {
      return new S2C_IOSPayFail(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    /// <summary>
    ///账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payid" field.</summary>
    public const int PayidFieldNumber = 3;
    private int payid_;
    /// <summary>
    ///商品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Payid {
      get { return payid_; }
      set {
        payid_ = value;
      }
    }

    /// <summary>Field number for the "paycode" field.</summary>
    public const int PaycodeFieldNumber = 4;
    private string paycode_ = "";
    /// <summary>
    ///支付凭证码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Paycode {
      get { return paycode_; }
      set {
        paycode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 5;
    private string platform_ = "";
    /// <summary>
    ///平台
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payorder" field.</summary>
    public const int PayorderFieldNumber = 6;
    private string payorder_ = "";
    /// <summary>
    ///订单号 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Payorder {
      get { return payorder_; }
      set {
        payorder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_IOSPayFail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_IOSPayFail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Account != other.Account) return false;
      if (Payid != other.Payid) return false;
      if (Paycode != other.Paycode) return false;
      if (Platform != other.Platform) return false;
      if (Payorder != other.Payorder) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Payid != 0) hash ^= Payid.GetHashCode();
      if (Paycode.Length != 0) hash ^= Paycode.GetHashCode();
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (Payorder.Length != 0) hash ^= Payorder.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (Payid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Payid);
      }
      if (Paycode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Paycode);
      }
      if (Platform.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Platform);
      }
      if (Payorder.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Payorder);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Payid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Payid);
      }
      if (Paycode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Paycode);
      }
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (Payorder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Payorder);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_IOSPayFail other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Payid != 0) {
        Payid = other.Payid;
      }
      if (other.Paycode.Length != 0) {
        Paycode = other.Paycode;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      if (other.Payorder.Length != 0) {
        Payorder = other.Payorder;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
          case 24: {
            Payid = input.ReadInt32();
            break;
          }
          case 34: {
            Paycode = input.ReadString();
            break;
          }
          case 42: {
            Platform = input.ReadString();
            break;
          }
          case 50: {
            Payorder = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_IOSPAYFREE              = 1552      --[[免费直接支付]]   
  /// </summary>
  public sealed partial class C2S_IOSPayFree : pb::IMessage<C2S_IOSPayFree> {
    private static readonly pb::MessageParser<C2S_IOSPayFree> _parser = new pb::MessageParser<C2S_IOSPayFree>(() => new C2S_IOSPayFree());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_IOSPayFree> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_IOSPayFree() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_IOSPayFree(C2S_IOSPayFree other) : this() {
      payid_ = other.payid_;
      platform_ = other.platform_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_IOSPayFree Clone() {
      return new C2S_IOSPayFree(this);
    }

    /// <summary>Field number for the "payid" field.</summary>
    public const int PayidFieldNumber = 1;
    private int payid_;
    /// <summary>
    ///商品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Payid {
      get { return payid_; }
      set {
        payid_ = value;
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 3;
    private string platform_ = "";
    /// <summary>
    ///平台
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_IOSPayFree);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_IOSPayFree other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payid != other.Payid) return false;
      if (Platform != other.Platform) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payid != 0) hash ^= Payid.GetHashCode();
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Payid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Payid);
      }
      if (Platform.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Platform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Payid);
      }
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_IOSPayFree other) {
      if (other == null) {
        return;
      }
      if (other.Payid != 0) {
        Payid = other.Payid;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Payid = input.ReadInt32();
            break;
          }
          case 26: {
            Platform = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2LC_IOSPAYFREE              = 2552      --[[免费直接支付]]   
  /// </summary>
  public sealed partial class S2C_IOSPayFree : pb::IMessage<S2C_IOSPayFree> {
    private static readonly pb::MessageParser<S2C_IOSPayFree> _parser = new pb::MessageParser<S2C_IOSPayFree>(() => new S2C_IOSPayFree());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_IOSPayFree> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_IOSPayFree() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_IOSPayFree(S2C_IOSPayFree other) : this() {
      ret_ = other.ret_;
      payid_ = other.payid_;
      paytype_ = other.paytype_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_IOSPayFree Clone() {
      return new S2C_IOSPayFree(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "payid" field.</summary>
    public const int PayidFieldNumber = 2;
    private int payid_;
    /// <summary>
    ///商品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Payid {
      get { return payid_; }
      set {
        payid_ = value;
      }
    }

    /// <summary>Field number for the "paytype" field.</summary>
    public const int PaytypeFieldNumber = 3;
    private int paytype_;
    /// <summary>
    ///购买类型 101首冲 102商城礼包 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Paytype {
      get { return paytype_; }
      set {
        paytype_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_IOSPayFree);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_IOSPayFree other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Payid != other.Payid) return false;
      if (Paytype != other.Paytype) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Payid != 0) hash ^= Payid.GetHashCode();
      if (Paytype != 0) hash ^= Paytype.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Payid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Payid);
      }
      if (Paytype != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Paytype);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Payid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Payid);
      }
      if (Paytype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Paytype);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_IOSPayFree other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Payid != 0) {
        Payid = other.Payid;
      }
      if (other.Paytype != 0) {
        Paytype = other.Paytype;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Payid = input.ReadInt32();
            break;
          }
          case 24: {
            Paytype = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_WD2LC_PAYNOUSETOKEN           = 2554      --[[没有消耗token订单]]    
  /// </summary>
  public sealed partial class S2C_PayNoUseToken : pb::IMessage<S2C_PayNoUseToken> {
    private static readonly pb::MessageParser<S2C_PayNoUseToken> _parser = new pb::MessageParser<S2C_PayNoUseToken>(() => new S2C_PayNoUseToken());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_PayNoUseToken> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_PayNoUseToken() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_PayNoUseToken(S2C_PayNoUseToken other) : this() {
      account_ = other.account_;
      payorder_ = other.payorder_;
      token_ = other.token_;
      payid_ = other.payid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_PayNoUseToken Clone() {
      return new S2C_PayNoUseToken(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payorder" field.</summary>
    public const int PayorderFieldNumber = 2;
    private string payorder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Payorder {
      get { return payorder_; }
      set {
        payorder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payid" field.</summary>
    public const int PayidFieldNumber = 4;
    private int payid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Payid {
      get { return payid_; }
      set {
        payid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_PayNoUseToken);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_PayNoUseToken other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Payorder != other.Payorder) return false;
      if (Token != other.Token) return false;
      if (Payid != other.Payid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Payorder.Length != 0) hash ^= Payorder.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (Payid != 0) hash ^= Payid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Payorder.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Payorder);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      if (Payid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Payid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Payorder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Payorder);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (Payid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Payid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_PayNoUseToken other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Payorder.Length != 0) {
        Payorder = other.Payorder;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.Payid != 0) {
        Payid = other.Payid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Payorder = input.ReadString();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
          case 32: {
            Payid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_PAYCHECKORDER           = 1555      --[[消耗订单]]    
  /// </summary>
  public sealed partial class C2S_PayCheckOrder : pb::IMessage<C2S_PayCheckOrder> {
    private static readonly pb::MessageParser<C2S_PayCheckOrder> _parser = new pb::MessageParser<C2S_PayCheckOrder>(() => new C2S_PayCheckOrder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_PayCheckOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_PayCheckOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_PayCheckOrder(C2S_PayCheckOrder other) : this() {
      payorder_ = other.payorder_;
      payid_ = other.payid_;
      token_ = other.token_;
      playerdbid_ = other.playerdbid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_PayCheckOrder Clone() {
      return new C2S_PayCheckOrder(this);
    }

    /// <summary>Field number for the "payorder" field.</summary>
    public const int PayorderFieldNumber = 1;
    private string payorder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Payorder {
      get { return payorder_; }
      set {
        payorder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payid" field.</summary>
    public const int PayidFieldNumber = 2;
    private int payid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Payid {
      get { return payid_; }
      set {
        payid_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerdbid" field.</summary>
    public const int PlayerdbidFieldNumber = 9;
    private int playerdbid_;
    /// <summary>
    ///不用填  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Playerdbid {
      get { return playerdbid_; }
      set {
        playerdbid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_PayCheckOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_PayCheckOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payorder != other.Payorder) return false;
      if (Payid != other.Payid) return false;
      if (Token != other.Token) return false;
      if (Playerdbid != other.Playerdbid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payorder.Length != 0) hash ^= Payorder.GetHashCode();
      if (Payid != 0) hash ^= Payid.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (Playerdbid != 0) hash ^= Playerdbid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Payorder.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Payorder);
      }
      if (Payid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Payid);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      if (Playerdbid != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Playerdbid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payorder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Payorder);
      }
      if (Payid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Payid);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (Playerdbid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Playerdbid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_PayCheckOrder other) {
      if (other == null) {
        return;
      }
      if (other.Payorder.Length != 0) {
        Payorder = other.Payorder;
      }
      if (other.Payid != 0) {
        Payid = other.Payid;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.Playerdbid != 0) {
        Playerdbid = other.Playerdbid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Payorder = input.ReadString();
            break;
          }
          case 16: {
            Payid = input.ReadInt32();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
          case 72: {
            Playerdbid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2LC_PAYCHECKORDER           = 2555      --[[消耗订单]]    
  /// </summary>
  public sealed partial class S2C_PayCheckOrder : pb::IMessage<S2C_PayCheckOrder> {
    private static readonly pb::MessageParser<S2C_PayCheckOrder> _parser = new pb::MessageParser<S2C_PayCheckOrder>(() => new S2C_PayCheckOrder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_PayCheckOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[104]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_PayCheckOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_PayCheckOrder(S2C_PayCheckOrder other) : this() {
      ret_ = other.ret_;
      payorder_ = other.payorder_;
      payid_ = other.payid_;
      token_ = other.token_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_PayCheckOrder Clone() {
      return new S2C_PayCheckOrder(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "payorder" field.</summary>
    public const int PayorderFieldNumber = 2;
    private string payorder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Payorder {
      get { return payorder_; }
      set {
        payorder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payid" field.</summary>
    public const int PayidFieldNumber = 3;
    private int payid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Payid {
      get { return payid_; }
      set {
        payid_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 4;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_PayCheckOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_PayCheckOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Payorder != other.Payorder) return false;
      if (Payid != other.Payid) return false;
      if (Token != other.Token) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Payorder.Length != 0) hash ^= Payorder.GetHashCode();
      if (Payid != 0) hash ^= Payid.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Payorder.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Payorder);
      }
      if (Payid != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Payid);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Token);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Payorder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Payorder);
      }
      if (Payid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Payid);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_PayCheckOrder other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Payorder.Length != 0) {
        Payorder = other.Payorder;
      }
      if (other.Payid != 0) {
        Payid = other.Payid;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 18: {
            Payorder = input.ReadString();
            break;
          }
          case 24: {
            Payid = input.ReadInt32();
            break;
          }
          case 34: {
            Token = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_CL2WD_IOSPAYCONDITION         = 1556      --[[支付预检测]]    
  /// </summary>
  public sealed partial class C2S_IOSPayCondition : pb::IMessage<C2S_IOSPayCondition> {
    private static readonly pb::MessageParser<C2S_IOSPayCondition> _parser = new pb::MessageParser<C2S_IOSPayCondition>(() => new C2S_IOSPayCondition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_IOSPayCondition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[105]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_IOSPayCondition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_IOSPayCondition(C2S_IOSPayCondition other) : this() {
      payid_ = other.payid_;
      platform_ = other.platform_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_IOSPayCondition Clone() {
      return new C2S_IOSPayCondition(this);
    }

    /// <summary>Field number for the "payid" field.</summary>
    public const int PayidFieldNumber = 1;
    private int payid_;
    /// <summary>
    ///商品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Payid {
      get { return payid_; }
      set {
        payid_ = value;
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 2;
    private string platform_ = "";
    /// <summary>
    ///平台
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_IOSPayCondition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_IOSPayCondition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Payid != other.Payid) return false;
      if (Platform != other.Platform) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Payid != 0) hash ^= Payid.GetHashCode();
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Payid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Payid);
      }
      if (Platform.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Platform);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Payid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Payid);
      }
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_IOSPayCondition other) {
      if (other == null) {
        return;
      }
      if (other.Payid != 0) {
        Payid = other.Payid;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Payid = input.ReadInt32();
            break;
          }
          case 18: {
            Platform = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_WD2LC_IOSPAYCONDITION         = 2556      --[[支付预检测]]    
  /// </summary>
  public sealed partial class S2C_IOSPayCondition : pb::IMessage<S2C_IOSPayCondition> {
    private static readonly pb::MessageParser<S2C_IOSPayCondition> _parser = new pb::MessageParser<S2C_IOSPayCondition>(() => new S2C_IOSPayCondition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_IOSPayCondition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[106]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_IOSPayCondition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_IOSPayCondition(S2C_IOSPayCondition other) : this() {
      ret_ = other.ret_;
      payid_ = other.payid_;
      paytype_ = other.paytype_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_IOSPayCondition Clone() {
      return new S2C_IOSPayCondition(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "payid" field.</summary>
    public const int PayidFieldNumber = 2;
    private int payid_;
    /// <summary>
    ///商品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Payid {
      get { return payid_; }
      set {
        payid_ = value;
      }
    }

    /// <summary>Field number for the "paytype" field.</summary>
    public const int PaytypeFieldNumber = 3;
    private int paytype_;
    /// <summary>
    ///购买类型 101首冲 102商城礼包 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Paytype {
      get { return paytype_; }
      set {
        paytype_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_IOSPayCondition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_IOSPayCondition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Payid != other.Payid) return false;
      if (Paytype != other.Paytype) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Payid != 0) hash ^= Payid.GetHashCode();
      if (Paytype != 0) hash ^= Paytype.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Payid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Payid);
      }
      if (Paytype != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Paytype);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Payid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Payid);
      }
      if (Paytype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Paytype);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_IOSPayCondition other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Payid != 0) {
        Payid = other.Payid;
      }
      if (other.Paytype != 0) {
        Paytype = other.Paytype;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Payid = input.ReadInt32();
            break;
          }
          case 24: {
            Paytype = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_DELETEACC               = 1631      --[[删除账号]]  
  /// </summary>
  public sealed partial class C2S_DeleteAcc : pb::IMessage<C2S_DeleteAcc> {
    private static readonly pb::MessageParser<C2S_DeleteAcc> _parser = new pb::MessageParser<C2S_DeleteAcc>(() => new C2S_DeleteAcc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_DeleteAcc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[107]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_DeleteAcc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_DeleteAcc(C2S_DeleteAcc other) : this() {
      account_ = other.account_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_DeleteAcc Clone() {
      return new C2S_DeleteAcc(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_DeleteAcc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_DeleteAcc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_DeleteAcc other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2CL_DELETEACC               = 2631      --[[删除账号]]  
  /// </summary>
  public sealed partial class S2C_DeleteAcc : pb::IMessage<S2C_DeleteAcc> {
    private static readonly pb::MessageParser<S2C_DeleteAcc> _parser = new pb::MessageParser<S2C_DeleteAcc>(() => new S2C_DeleteAcc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_DeleteAcc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[108]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_DeleteAcc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_DeleteAcc(S2C_DeleteAcc other) : this() {
      ret_ = other.ret_;
      account_ = other.account_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_DeleteAcc Clone() {
      return new S2C_DeleteAcc(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_DeleteAcc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_DeleteAcc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Account != other.Account) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_DeleteAcc other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_SAVEUPLOAD              = 1601      --[[上传存档]] 
  /// </summary>
  public sealed partial class C2S_SaveUpload : pb::IMessage<C2S_SaveUpload> {
    private static readonly pb::MessageParser<C2S_SaveUpload> _parser = new pb::MessageParser<C2S_SaveUpload>(() => new C2S_SaveUpload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_SaveUpload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[109]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_SaveUpload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_SaveUpload(C2S_SaveUpload other) : this() {
      filename_ = other.filename_;
      data_ = other.data_;
      datastr_ = other.datastr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_SaveUpload Clone() {
      return new C2S_SaveUpload(this);
    }

    /// <summary>Field number for the "filename" field.</summary>
    public const int FilenameFieldNumber = 1;
    private string filename_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filename {
      get { return filename_; }
      set {
        filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "datastr" field.</summary>
    public const int DatastrFieldNumber = 3;
    private string datastr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Datastr {
      get { return datastr_; }
      set {
        datastr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_SaveUpload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_SaveUpload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Filename != other.Filename) return false;
      if (Data != other.Data) return false;
      if (Datastr != other.Datastr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Filename.Length != 0) hash ^= Filename.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Datastr.Length != 0) hash ^= Datastr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Filename.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Filename);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Data);
      }
      if (Datastr.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Datastr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Filename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Datastr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Datastr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_SaveUpload other) {
      if (other == null) {
        return;
      }
      if (other.Filename.Length != 0) {
        Filename = other.Filename;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Datastr.Length != 0) {
        Datastr = other.Datastr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Filename = input.ReadString();
            break;
          }
          case 18: {
            Data = input.ReadBytes();
            break;
          }
          case 26: {
            Datastr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2CL_SAVEUPLOAD              = 2601      --[[上传存档]] 
  /// </summary>
  public sealed partial class S2C_SaveUpload : pb::IMessage<S2C_SaveUpload> {
    private static readonly pb::MessageParser<S2C_SaveUpload> _parser = new pb::MessageParser<S2C_SaveUpload>(() => new S2C_SaveUpload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_SaveUpload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[110]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SaveUpload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SaveUpload(S2C_SaveUpload other) : this() {
      ret_ = other.ret_;
      filename_ = other.filename_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SaveUpload Clone() {
      return new S2C_SaveUpload(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "filename" field.</summary>
    public const int FilenameFieldNumber = 2;
    private string filename_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filename {
      get { return filename_; }
      set {
        filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_SaveUpload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_SaveUpload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Filename != other.Filename) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Filename.Length != 0) hash ^= Filename.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Filename.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Filename);
      }
      if (Time != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Filename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_SaveUpload other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Filename.Length != 0) {
        Filename = other.Filename;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 18: {
            Filename = input.ReadString();
            break;
          }
          case 24: {
            Time = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_SAVEDOWNLOAD            = 1605      --[[下载存档]]  
  /// </summary>
  public sealed partial class C2S_SaveDownload : pb::IMessage<C2S_SaveDownload> {
    private static readonly pb::MessageParser<C2S_SaveDownload> _parser = new pb::MessageParser<C2S_SaveDownload>(() => new C2S_SaveDownload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_SaveDownload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[111]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_SaveDownload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_SaveDownload(C2S_SaveDownload other) : this() {
      filename_ = other.filename_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_SaveDownload Clone() {
      return new C2S_SaveDownload(this);
    }

    /// <summary>Field number for the "filename" field.</summary>
    public const int FilenameFieldNumber = 1;
    private string filename_ = "";
    /// <summary>
    ///all代表全部
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filename {
      get { return filename_; }
      set {
        filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_SaveDownload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_SaveDownload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Filename != other.Filename) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Filename.Length != 0) hash ^= Filename.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Filename.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Filename);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Filename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_SaveDownload other) {
      if (other == null) {
        return;
      }
      if (other.Filename.Length != 0) {
        Filename = other.Filename;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Filename = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2CL_SAVEDOWNLOAD            = 2605      --[[下载存档]]
  /// </summary>
  public sealed partial class S2C_SaveDownload : pb::IMessage<S2C_SaveDownload> {
    private static readonly pb::MessageParser<S2C_SaveDownload> _parser = new pb::MessageParser<S2C_SaveDownload>(() => new S2C_SaveDownload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_SaveDownload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[112]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SaveDownload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SaveDownload(S2C_SaveDownload other) : this() {
      ret_ = other.ret_;
      filename_ = other.filename_;
      data_ = other.data_;
      datastr_ = other.datastr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_SaveDownload Clone() {
      return new S2C_SaveDownload(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "filename" field.</summary>
    public const int FilenameFieldNumber = 2;
    private string filename_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filename {
      get { return filename_; }
      set {
        filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "datastr" field.</summary>
    public const int DatastrFieldNumber = 4;
    private string datastr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Datastr {
      get { return datastr_; }
      set {
        datastr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_SaveDownload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_SaveDownload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Filename != other.Filename) return false;
      if (Data != other.Data) return false;
      if (Datastr != other.Datastr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Filename.Length != 0) hash ^= Filename.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Datastr.Length != 0) hash ^= Datastr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Filename.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Filename);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Data);
      }
      if (Datastr.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Datastr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Filename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Datastr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Datastr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_SaveDownload other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Filename.Length != 0) {
        Filename = other.Filename;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Datastr.Length != 0) {
        Datastr = other.Datastr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 18: {
            Filename = input.ReadString();
            break;
          }
          case 26: {
            Data = input.ReadBytes();
            break;
          }
          case 34: {
            Datastr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_UPLOADMAINTASK          = 1610      --[[上传主线任务]]  
  /// </summary>
  public sealed partial class C2S_UploadMainTask : pb::IMessage<C2S_UploadMainTask> {
    private static readonly pb::MessageParser<C2S_UploadMainTask> _parser = new pb::MessageParser<C2S_UploadMainTask>(() => new C2S_UploadMainTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_UploadMainTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[113]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UploadMainTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UploadMainTask(C2S_UploadMainTask other) : this() {
      taskid_ = other.taskid_;
      taskarg_ = other.taskarg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UploadMainTask Clone() {
      return new C2S_UploadMainTask(this);
    }

    /// <summary>Field number for the "taskid" field.</summary>
    public const int TaskidFieldNumber = 1;
    private int taskid_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Taskid {
      get { return taskid_; }
      set {
        taskid_ = value;
      }
    }

    /// <summary>Field number for the "taskarg" field.</summary>
    public const int TaskargFieldNumber = 2;
    private int taskarg_;
    /// <summary>
    ///任务进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Taskarg {
      get { return taskarg_; }
      set {
        taskarg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_UploadMainTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_UploadMainTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Taskid != other.Taskid) return false;
      if (Taskarg != other.Taskarg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Taskid != 0) hash ^= Taskid.GetHashCode();
      if (Taskarg != 0) hash ^= Taskarg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Taskid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Taskid);
      }
      if (Taskarg != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Taskarg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Taskid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Taskid);
      }
      if (Taskarg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Taskarg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_UploadMainTask other) {
      if (other == null) {
        return;
      }
      if (other.Taskid != 0) {
        Taskid = other.Taskid;
      }
      if (other.Taskarg != 0) {
        Taskarg = other.Taskarg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Taskid = input.ReadInt32();
            break;
          }
          case 16: {
            Taskarg = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2CL_UPLOADMAINTASK          = 2610      --[[上传主线任务]]  
  /// </summary>
  public sealed partial class S2C_UploadMainTask : pb::IMessage<S2C_UploadMainTask> {
    private static readonly pb::MessageParser<S2C_UploadMainTask> _parser = new pb::MessageParser<S2C_UploadMainTask>(() => new S2C_UploadMainTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_UploadMainTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[114]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UploadMainTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UploadMainTask(S2C_UploadMainTask other) : this() {
      ret_ = other.ret_;
      taskid_ = other.taskid_;
      taskarg_ = other.taskarg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UploadMainTask Clone() {
      return new S2C_UploadMainTask(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "taskid" field.</summary>
    public const int TaskidFieldNumber = 2;
    private int taskid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Taskid {
      get { return taskid_; }
      set {
        taskid_ = value;
      }
    }

    /// <summary>Field number for the "taskarg" field.</summary>
    public const int TaskargFieldNumber = 3;
    private int taskarg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Taskarg {
      get { return taskarg_; }
      set {
        taskarg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_UploadMainTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_UploadMainTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Taskid != other.Taskid) return false;
      if (Taskarg != other.Taskarg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Taskid != 0) hash ^= Taskid.GetHashCode();
      if (Taskarg != 0) hash ^= Taskarg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Taskid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Taskid);
      }
      if (Taskarg != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Taskarg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Taskid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Taskid);
      }
      if (Taskarg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Taskarg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_UploadMainTask other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Taskid != 0) {
        Taskid = other.Taskid;
      }
      if (other.Taskarg != 0) {
        Taskarg = other.Taskarg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Taskid = input.ReadInt32();
            break;
          }
          case 24: {
            Taskarg = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_UPLOADBIGTASK           = 1612      --[[上传大任务]]  
  /// </summary>
  public sealed partial class C2S_UploadBigTask : pb::IMessage<C2S_UploadBigTask> {
    private static readonly pb::MessageParser<C2S_UploadBigTask> _parser = new pb::MessageParser<C2S_UploadBigTask>(() => new C2S_UploadBigTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_UploadBigTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[115]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UploadBigTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UploadBigTask(C2S_UploadBigTask other) : this() {
      taskid_ = other.taskid_;
      taskarg_ = other.taskarg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UploadBigTask Clone() {
      return new C2S_UploadBigTask(this);
    }

    /// <summary>Field number for the "taskid" field.</summary>
    public const int TaskidFieldNumber = 1;
    private int taskid_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Taskid {
      get { return taskid_; }
      set {
        taskid_ = value;
      }
    }

    /// <summary>Field number for the "taskarg" field.</summary>
    public const int TaskargFieldNumber = 2;
    private int taskarg_;
    /// <summary>
    ///任务进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Taskarg {
      get { return taskarg_; }
      set {
        taskarg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_UploadBigTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_UploadBigTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Taskid != other.Taskid) return false;
      if (Taskarg != other.Taskarg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Taskid != 0) hash ^= Taskid.GetHashCode();
      if (Taskarg != 0) hash ^= Taskarg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Taskid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Taskid);
      }
      if (Taskarg != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Taskarg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Taskid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Taskid);
      }
      if (Taskarg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Taskarg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_UploadBigTask other) {
      if (other == null) {
        return;
      }
      if (other.Taskid != 0) {
        Taskid = other.Taskid;
      }
      if (other.Taskarg != 0) {
        Taskarg = other.Taskarg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Taskid = input.ReadInt32();
            break;
          }
          case 16: {
            Taskarg = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2CL_UPLOADBIGTASK           = 2612      --[[上传大任务]]  
  /// </summary>
  public sealed partial class S2C_UploadBigTask : pb::IMessage<S2C_UploadBigTask> {
    private static readonly pb::MessageParser<S2C_UploadBigTask> _parser = new pb::MessageParser<S2C_UploadBigTask>(() => new S2C_UploadBigTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_UploadBigTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[116]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UploadBigTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UploadBigTask(S2C_UploadBigTask other) : this() {
      ret_ = other.ret_;
      taskid_ = other.taskid_;
      taskarg_ = other.taskarg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UploadBigTask Clone() {
      return new S2C_UploadBigTask(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "taskid" field.</summary>
    public const int TaskidFieldNumber = 2;
    private int taskid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Taskid {
      get { return taskid_; }
      set {
        taskid_ = value;
      }
    }

    /// <summary>Field number for the "taskarg" field.</summary>
    public const int TaskargFieldNumber = 3;
    private int taskarg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Taskarg {
      get { return taskarg_; }
      set {
        taskarg_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_UploadBigTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_UploadBigTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Taskid != other.Taskid) return false;
      if (Taskarg != other.Taskarg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Taskid != 0) hash ^= Taskid.GetHashCode();
      if (Taskarg != 0) hash ^= Taskarg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Taskid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Taskid);
      }
      if (Taskarg != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Taskarg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Taskid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Taskid);
      }
      if (Taskarg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Taskarg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_UploadBigTask other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Taskid != 0) {
        Taskid = other.Taskid;
      }
      if (other.Taskarg != 0) {
        Taskarg = other.Taskarg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Taskid = input.ReadInt32();
            break;
          }
          case 24: {
            Taskarg = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_CL2WD_UPLOADPLAYERINFO         = 1611      --[[上传玩家信息]]  
  /// </summary>
  public sealed partial class C2S_UploadPlayerInfo : pb::IMessage<C2S_UploadPlayerInfo> {
    private static readonly pb::MessageParser<C2S_UploadPlayerInfo> _parser = new pb::MessageParser<C2S_UploadPlayerInfo>(() => new C2S_UploadPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_UploadPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[117]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UploadPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UploadPlayerInfo(C2S_UploadPlayerInfo other) : this() {
      typeid_ = other.typeid_;
      paramlist_ = other.paramlist_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_UploadPlayerInfo Clone() {
      return new C2S_UploadPlayerInfo(this);
    }

    /// <summary>Field number for the "typeid" field.</summary>
    public const int TypeidFieldNumber = 1;
    private int typeid_;
    /// <summary>
    ///id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Typeid {
      get { return typeid_; }
      set {
        typeid_ = value;
      }
    }

    /// <summary>Field number for the "paramlist" field.</summary>
    public const int ParamlistFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_paramlist_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> paramlist_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///参数列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Paramlist {
      get { return paramlist_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_UploadPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_UploadPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Typeid != other.Typeid) return false;
      if(!paramlist_.Equals(other.paramlist_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Typeid != 0) hash ^= Typeid.GetHashCode();
      hash ^= paramlist_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Typeid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Typeid);
      }
      paramlist_.WriteTo(output, _repeated_paramlist_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Typeid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Typeid);
      }
      size += paramlist_.CalculateSize(_repeated_paramlist_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_UploadPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Typeid != 0) {
        Typeid = other.Typeid;
      }
      paramlist_.Add(other.paramlist_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Typeid = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            paramlist_.AddEntriesFrom(input, _repeated_paramlist_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_WD2CL_UPLOADPLAYERINFO         = 2611      --[[上传玩家信息]]
  /// </summary>
  public sealed partial class S2C_UploadPlayerInfo : pb::IMessage<S2C_UploadPlayerInfo> {
    private static readonly pb::MessageParser<S2C_UploadPlayerInfo> _parser = new pb::MessageParser<S2C_UploadPlayerInfo>(() => new S2C_UploadPlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_UploadPlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[118]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UploadPlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UploadPlayerInfo(S2C_UploadPlayerInfo other) : this() {
      ret_ = other.ret_;
      typeid_ = other.typeid_;
      paramlist_ = other.paramlist_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_UploadPlayerInfo Clone() {
      return new S2C_UploadPlayerInfo(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    /// <summary>Field number for the "typeid" field.</summary>
    public const int TypeidFieldNumber = 2;
    private int typeid_;
    /// <summary>
    ///id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Typeid {
      get { return typeid_; }
      set {
        typeid_ = value;
      }
    }

    /// <summary>Field number for the "paramlist" field.</summary>
    public const int ParamlistFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_paramlist_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> paramlist_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///参数列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Paramlist {
      get { return paramlist_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_UploadPlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_UploadPlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      if (Typeid != other.Typeid) return false;
      if(!paramlist_.Equals(other.paramlist_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (Typeid != 0) hash ^= Typeid.GetHashCode();
      hash ^= paramlist_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (Typeid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Typeid);
      }
      paramlist_.WriteTo(output, _repeated_paramlist_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (Typeid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Typeid);
      }
      size += paramlist_.CalculateSize(_repeated_paramlist_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_UploadPlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      if (other.Typeid != 0) {
        Typeid = other.Typeid;
      }
      paramlist_.Add(other.paramlist_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
          case 16: {
            Typeid = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            paramlist_.AddEntriesFrom(input, _repeated_paramlist_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_CHEATDATA               = 1621      --[[客户端异常作弊数据上传]]  
  /// </summary>
  public sealed partial class C2S_ChestData : pb::IMessage<C2S_ChestData> {
    private static readonly pb::MessageParser<C2S_ChestData> _parser = new pb::MessageParser<C2S_ChestData>(() => new C2S_ChestData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_ChestData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[119]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ChestData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ChestData(C2S_ChestData other) : this() {
      type_ = other.type_;
      param_ = other.param_;
      playerdbid_ = other.playerdbid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_ChestData Clone() {
      return new C2S_ChestData(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    /// 1内存修改 2加速器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 2;
    private string param_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Param {
      get { return param_; }
      set {
        param_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerdbid" field.</summary>
    public const int PlayerdbidFieldNumber = 11;
    private int playerdbid_;
    /// <summary>
    ///客户端不用写
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Playerdbid {
      get { return playerdbid_; }
      set {
        playerdbid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_ChestData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_ChestData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Param != other.Param) return false;
      if (Playerdbid != other.Playerdbid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Param.Length != 0) hash ^= Param.GetHashCode();
      if (Playerdbid != 0) hash ^= Playerdbid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Param.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Param);
      }
      if (Playerdbid != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Playerdbid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Param.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Param);
      }
      if (Playerdbid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Playerdbid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_ChestData other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Param.Length != 0) {
        Param = other.Param;
      }
      if (other.Playerdbid != 0) {
        Playerdbid = other.Playerdbid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            Param = input.ReadString();
            break;
          }
          case 88: {
            Playerdbid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2CL_CHEATDATA               = 2621      --[[客户端异常作弊数据上传]]  
  /// </summary>
  public sealed partial class S2C_ChestData : pb::IMessage<S2C_ChestData> {
    private static readonly pb::MessageParser<S2C_ChestData> _parser = new pb::MessageParser<S2C_ChestData>(() => new S2C_ChestData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_ChestData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[120]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ChestData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ChestData(S2C_ChestData other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_ChestData Clone() {
      return new S2C_ChestData(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    /// 1内存修改 2加速器    
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_ChestData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_ChestData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_ChestData other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_CL2WD_TESTMSG                     = 1300      --[[测试协议]]   
  /// </summary>
  public sealed partial class C2S_TestMsg : pb::IMessage<C2S_TestMsg> {
    private static readonly pb::MessageParser<C2S_TestMsg> _parser = new pb::MessageParser<C2S_TestMsg>(() => new C2S_TestMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_TestMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[121]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_TestMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_TestMsg(C2S_TestMsg other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_TestMsg Clone() {
      return new C2S_TestMsg(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_TestMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_TestMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_TestMsg other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// MsgId.MSG_WD2CL_TESTMSG                     = 2300      --[[测试协议]]  
  /// </summary>
  public sealed partial class S2C_TestMsg : pb::IMessage<S2C_TestMsg> {
    private static readonly pb::MessageParser<S2C_TestMsg> _parser = new pb::MessageParser<S2C_TestMsg>(() => new S2C_TestMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_TestMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[122]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TestMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TestMsg(S2C_TestMsg other) : this() {
      ret_ = other.ret_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TestMsg Clone() {
      return new S2C_TestMsg(this);
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 1;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_TestMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_TestMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ret != other.Ret) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ret != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Ret);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_TestMsg other) {
      if (other == null) {
        return;
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ret = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_CL2WD_TESTRECHARGEDIAMOND         = 1301      --[[测试充值]] 
  /// </summary>
  public sealed partial class C2S_TestRecharge : pb::IMessage<C2S_TestRecharge> {
    private static readonly pb::MessageParser<C2S_TestRecharge> _parser = new pb::MessageParser<C2S_TestRecharge>(() => new C2S_TestRecharge());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_TestRecharge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[123]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_TestRecharge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_TestRecharge(C2S_TestRecharge other) : this() {
      type_ = other.type_;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_TestRecharge Clone() {
      return new C2S_TestRecharge(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///1 钻石 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_TestRecharge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_TestRecharge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_TestRecharge other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_WD2LC_TESTRECHARGEDIAMOND         = 2301      --[[测试充值]]
  /// </summary>
  public sealed partial class S2C_TestRecharge : pb::IMessage<S2C_TestRecharge> {
    private static readonly pb::MessageParser<S2C_TestRecharge> _parser = new pb::MessageParser<S2C_TestRecharge>(() => new S2C_TestRecharge());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_TestRecharge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[124]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TestRecharge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TestRecharge(S2C_TestRecharge other) : this() {
      type_ = other.type_;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TestRecharge Clone() {
      return new S2C_TestRecharge(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///1 钻石 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_TestRecharge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_TestRecharge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_TestRecharge other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_CL2WD_TESTGETTEAMCARD         = 1302      --[[测试获得卡牌]]
  /// </summary>
  public sealed partial class C2S_TestGetTeamCard : pb::IMessage<C2S_TestGetTeamCard> {
    private static readonly pb::MessageParser<C2S_TestGetTeamCard> _parser = new pb::MessageParser<C2S_TestGetTeamCard>(() => new C2S_TestGetTeamCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_TestGetTeamCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[125]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_TestGetTeamCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_TestGetTeamCard(C2S_TestGetTeamCard other) : this() {
      cardid_ = other.cardid_;
      cardnum_ = other.cardnum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_TestGetTeamCard Clone() {
      return new C2S_TestGetTeamCard(this);
    }

    /// <summary>Field number for the "cardid" field.</summary>
    public const int CardidFieldNumber = 1;
    private int cardid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cardid {
      get { return cardid_; }
      set {
        cardid_ = value;
      }
    }

    /// <summary>Field number for the "cardnum" field.</summary>
    public const int CardnumFieldNumber = 2;
    private int cardnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cardnum {
      get { return cardnum_; }
      set {
        cardnum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_TestGetTeamCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_TestGetTeamCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cardid != other.Cardid) return false;
      if (Cardnum != other.Cardnum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cardid != 0) hash ^= Cardid.GetHashCode();
      if (Cardnum != 0) hash ^= Cardnum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cardid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Cardid);
      }
      if (Cardnum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cardnum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cardid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cardid);
      }
      if (Cardnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cardnum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_TestGetTeamCard other) {
      if (other == null) {
        return;
      }
      if (other.Cardid != 0) {
        Cardid = other.Cardid;
      }
      if (other.Cardnum != 0) {
        Cardnum = other.Cardnum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Cardid = input.ReadInt32();
            break;
          }
          case 16: {
            Cardnum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MsgId.MSG_WD2CL_TESTGETTEAMCARD         = 2302      --[[测试获得卡牌]]   
  /// </summary>
  public sealed partial class S2C_TestGetTeamCard : pb::IMessage<S2C_TestGetTeamCard> {
    private static readonly pb::MessageParser<S2C_TestGetTeamCard> _parser = new pb::MessageParser<S2C_TestGetTeamCard>(() => new S2C_TestGetTeamCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_TestGetTeamCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[126]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TestGetTeamCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TestGetTeamCard(S2C_TestGetTeamCard other) : this() {
      cardid_ = other.cardid_;
      cardnum_ = other.cardnum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_TestGetTeamCard Clone() {
      return new S2C_TestGetTeamCard(this);
    }

    /// <summary>Field number for the "cardid" field.</summary>
    public const int CardidFieldNumber = 1;
    private int cardid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cardid {
      get { return cardid_; }
      set {
        cardid_ = value;
      }
    }

    /// <summary>Field number for the "cardnum" field.</summary>
    public const int CardnumFieldNumber = 2;
    private int cardnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cardnum {
      get { return cardnum_; }
      set {
        cardnum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_TestGetTeamCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_TestGetTeamCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cardid != other.Cardid) return false;
      if (Cardnum != other.Cardnum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cardid != 0) hash ^= Cardid.GetHashCode();
      if (Cardnum != 0) hash ^= Cardnum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cardid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Cardid);
      }
      if (Cardnum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Cardnum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cardid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cardid);
      }
      if (Cardnum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cardnum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_TestGetTeamCard other) {
      if (other == null) {
        return;
      }
      if (other.Cardid != 0) {
        Cardid = other.Cardid;
      }
      if (other.Cardnum != 0) {
        Cardnum = other.Cardnum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Cardid = input.ReadInt32();
            break;
          }
          case 16: {
            Cardnum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MSG_CL2LG_GETTASKLIST           = 1521,     //请求任务列表
  /// </summary>
  public sealed partial class C2S_GetTaskList : pb::IMessage<C2S_GetTaskList> {
    private static readonly pb::MessageParser<C2S_GetTaskList> _parser = new pb::MessageParser<C2S_GetTaskList>(() => new C2S_GetTaskList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GetTaskList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[127]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetTaskList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetTaskList(C2S_GetTaskList other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetTaskList Clone() {
      return new C2S_GetTaskList(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///任务类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GetTaskList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GetTaskList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GetTaskList other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///MSG_LG2CL_BACKTASLLIST          = 2521,     //返回任务列表
  /// </summary>
  public sealed partial class S2C_BackTaskList : pb::IMessage<S2C_BackTaskList> {
    private static readonly pb::MessageParser<S2C_BackTaskList> _parser = new pb::MessageParser<S2C_BackTaskList>(() => new S2C_BackTaskList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_BackTaskList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[128]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BackTaskList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BackTaskList(S2C_BackTaskList other) : this() {
      type_ = other.type_;
      taskList_ = other.taskList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BackTaskList Clone() {
      return new S2C_BackTaskList(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///任务类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "taskList" field.</summary>
    public const int TaskListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::PBase.PB_Task> _repeated_taskList_codec
        = pb::FieldCodec.ForMessage(18, global::PBase.PB_Task.Parser);
    private readonly pbc::RepeatedField<global::PBase.PB_Task> taskList_ = new pbc::RepeatedField<global::PBase.PB_Task>();
    /// <summary>
    ///物品列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PBase.PB_Task> TaskList {
      get { return taskList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_BackTaskList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_BackTaskList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!taskList_.Equals(other.taskList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= taskList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      taskList_.WriteTo(output, _repeated_taskList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      size += taskList_.CalculateSize(_repeated_taskList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_BackTaskList other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      taskList_.Add(other.taskList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 18: {
            taskList_.AddEntriesFrom(input, _repeated_taskList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// MSG_CL2LG_GETCOUNTERLIST        = 1531,     //请求计数器列表
  /// </summary>
  public sealed partial class C2S_GetCounterList : pb::IMessage<C2S_GetCounterList> {
    private static readonly pb::MessageParser<C2S_GetCounterList> _parser = new pb::MessageParser<C2S_GetCounterList>(() => new C2S_GetCounterList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2S_GetCounterList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[129]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetCounterList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetCounterList(C2S_GetCounterList other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2S_GetCounterList Clone() {
      return new C2S_GetCounterList(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2S_GetCounterList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2S_GetCounterList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2S_GetCounterList other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// MSG_LG2CL_BACKCOUNTERLIST       = 2531,     //返回计数器列表
  /// </summary>
  public sealed partial class S2C_BackCounterList : pb::IMessage<S2C_BackCounterList> {
    private static readonly pb::MessageParser<S2C_BackCounterList> _parser = new pb::MessageParser<S2C_BackCounterList>(() => new S2C_BackCounterList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<S2C_BackCounterList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PClient.ClientReflection.Descriptor.MessageTypes[130]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BackCounterList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BackCounterList(S2C_BackCounterList other) : this() {
      counterList_ = other.counterList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public S2C_BackCounterList Clone() {
      return new S2C_BackCounterList(this);
    }

    /// <summary>Field number for the "counterList" field.</summary>
    public const int CounterListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PBase.PB_Counter> _repeated_counterList_codec
        = pb::FieldCodec.ForMessage(10, global::PBase.PB_Counter.Parser);
    private readonly pbc::RepeatedField<global::PBase.PB_Counter> counterList_ = new pbc::RepeatedField<global::PBase.PB_Counter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PBase.PB_Counter> CounterList {
      get { return counterList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as S2C_BackCounterList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(S2C_BackCounterList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!counterList_.Equals(other.counterList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= counterList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      counterList_.WriteTo(output, _repeated_counterList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += counterList_.CalculateSize(_repeated_counterList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(S2C_BackCounterList other) {
      if (other == null) {
        return;
      }
      counterList_.Add(other.counterList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            counterList_.AddEntriesFrom(input, _repeated_counterList_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
